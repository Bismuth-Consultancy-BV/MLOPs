<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="mlops" label="MLOPs">
    <memberTool name="mlops_install"/>
    <memberTool name="mlops_pip_install"/>
    <memberTool name="mlops_download_model"/>
    <memberTool name="mlops_convert_model"/>
  </toolshelf>

  <tool name="mlops_install" label="Install Dependencies" icon="$MLOPs/help/icons/mlops.svg">
    <script scriptType="python"><![CDATA[import subprocess
import os
import hashlib
from urllib import request
import ssl
import mlops_utils
import shutil
from imp import reload
reload(mlops_utils)

FOLDER = os.path.normpath(os.path.join(hou.text.expandString("$HOUDINI_TEMP_DIR"), "MLOPs"))
PIP_FOLDER = mlops_utils.PIP_FOLDER
PIPINSTALLFILE = os.path.normpath(os.path.join(FOLDER, "get-pip.py"))

# Downloading pip installation file   
if not os.path.isdir(FOLDER):
    os.makedirs(FOLDER)

total = 3
count = 1
with hou.InterruptableOperation("Installing Dependencies, downloading ~5Gb", open_interrupt_dialog=True) as operation:
    
    flags = 0
    if os.name == 'nt':
        flags = subprocess.CREATE_NO_WINDOW
        
    env = os.environ.copy() 
    if "PYTHONPATH" in env: 
        del env["PYTHONPATH"] 

    # Trying to download get-pip with curl , this can quietly fail when behind proxy 
    hou.ui.setStatusMessage("curl download get-pip.py")
    p = subprocess.Popen(["curl", "-o", PIPINSTALLFILE, "https://bootstrap.pypa.io/get-pip.py"], env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, creationflags = flags)
    out, err = p.communicate()
    if err:
        raise hou.Error(out.decode())

    # Checking if get-pip downloaded with curl , otherwise try download previous get-pip using urllib with SSL certification and test Md5 hash for safety
    if not os.path.isfile(PIPINSTALLFILE):
      hou.ui.setStatusMessage("curl failed to download get-pip.py , trying urllib.")
      remote_url = "https://github.com/pypa/get-pip/raw/2b873b978dbfdfc5e15ef5c3adf4354084612432/public/get-pip.py" # last known get-pip.py from 20230422
      # Create an SSL context with certificate verification
      context = ssl.create_default_context()
      context.check_hostname = True
      context.verify_mode = ssl.CERT_REQUIRED
      with request.urlopen(remote_url, context=context) as response:
          with open(PIPINSTALLFILE, 'wb') as file:
              while True:
                  chunk = response.read(1024)
                  if not chunk:
                      break
                  file.write(chunk)
      if os.path.isfile(PIPINSTALLFILE):
        hou.ui.setStatusMessage("testing get-pip.py MD5.")
        safe_md5 = '6f33e0cffbbd2093f2406f8d0839b01f'  # last known get-pip.py MD5 hash from 20230422
        test_md5 = hashlib.md5(open(PIPINSTALLFILE,'rb').read()).hexdigest()
        if safe_md5 != test_md5: 
          os.remove(PIPINSTALLFILE) # delete the unsafe get-pip.py if doesnt match 
          raise hou.Error("unsafe get-pip.py downloaded with incorrect MD5hash. safe_MD5 = " + safe_md5 + " != " + test_md5)

    # If that also fails to download , then error out and ask for manual download
    if not os.path.isfile(PIPINSTALLFILE):
      raise hou.Error("Failed to download get-pip.py , please download get-pip.py manually from https://bootstrap.pypa.io/ , and place in here = " + PIPINSTALLFILE  )
    operation.updateProgress(percentage=count/total)
    count+=1

    # Installing pip to Houdini
    hou.ui.setStatusMessage("Installing pip to Houdini")
    p = subprocess.Popen(["hython", PIPINSTALLFILE], env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, creationflags = flags)
    out, err = p.communicate()
    if err:
        raise hou.Error(out.decode())
    operation.updateProgress(percentage=count/total)
    count+=1

    dependencies_dir = os.path.normpath(os.path.join(hou.text.expandString("$MLOPS"), "data", "dependencies", "python"))
    if os.path.isdir(dependencies_dir):
        shutil.rmtree(dependencies_dir)

    hou.ui.setStatusMessage("Installing requirements.txt")    
    mlops_utils.pip_install(hou.text.expandString("$MLOPS/requirements.txt"), True, True)
    count+=1


# Informing user about the change
hou.ui.displayMessage("You have now installed the required dependencies for this build of Houdini.\nPlease restart Houdini for it to take effect", buttons=('OK',), severity=hou.severityType.Message, title="MLOPs Plugin")]]></script>
  </tool>

  <tool name="mlops_download_model" label="Download Model" icon="$MLOPS/help/icons/mlops.svg">
    <script scriptType="python"><![CDATA[import mlops_utils
from imp import reload
reload(mlops_utils)

mlops_utils.MLOPSCheckpointDownloader(hou.qt.mainWindow())]]></script>
  </tool>

  <tool name="mlops_convert_model" label="Convert Model" icon="$MLOPS/help/icons/mlops.svg">
    <script scriptType="python"><![CDATA[import mlops_utils
from imp import reload
reload(mlops_utils)

mlops_utils.MLOPSConvertModel(hou.qt.mainWindow())]]></script>
  </tool>

  <tool name="mlops_pip_install" label="Pip Install" icon="$MLOPS/help/icons/mlops.svg">
    <script scriptType="python"><![CDATA[import mlops_utils
from imp import reload
reload(mlops_utils)

mlops_utils.MLOPSPipInstall(hou.qt.mainWindow())


]]></script>
  </tool>
</shelfDocument>
