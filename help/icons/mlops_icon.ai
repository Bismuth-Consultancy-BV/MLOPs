%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.0.0
%%For: (Mo) ()
%%Title: (mlops_icon.ai)
%%CreationDate: 5/18/2023 5:15 PM
%%Canvassize: 16383
%%BoundingBox: 89 -193 192 -90
%%HiResBoundingBox: 89.9438 -192.6523 191.9912 -90.6055
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 142.5 -142.5 142.5 -142.5
%AI3_TileBox: -155.8701 -562.7207 439.1494 279.1396
%AI3_DocumentPreview: None
%AI5_ArtSize: 283.46 283.46
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -139 8 3.25 1823 950 18 0 0 48 117 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-164 -538
%AI7_GridSettings: 28.3465 10 28.3465 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 128 8
%%BeginData: 22252 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD12FFA97E7E53FD144D7777A2A8FD27FFA87EFD137DA8FD24FFA9
%77774D4D284D4D4D464D4D4D464D4D4D464D4D4D464D4D4D4C4D4D4D284D
%4D78A8FD22FFA8FD047D597D7D7D597D7D7D597D7D7D597D7D7D597D537D
%A8FD20FFA278FD224D53A9FD20FFFD1A7DA8FD1DFFCB534D224D4C4D464D
%4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D
%2278A8FD1DFF537D7D7D537D7D7D537D7D7D537D7D7D537D7D7D537D7D7D
%537D537DA8FD1BFFA2FD2A4D7EFD1BFF84FD1C7DA8FD1AFF78284D4D4D46
%4D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D
%4D464D4D4D464D4D4D53FD1AFF7D537D7D7D597D7D7D597D7D7D597D7D7D
%597D7D7D597D7D7D59FD047DFD19FF78FD2F4DFD19FFFD1E7DA8FD16FFCB
%4D224D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D28716A958EB28E
%956A71224D4C4D464D4C4D464D4C4D464D4C4D4DFD17FFA87D597D537D7D
%7D537D7D7D537D7D7D537D7D7D537D7D7D537D7D7D537D59A8FD16FF78FD
%174D958FB2B2B28FB2B2B28F95FD104D53FD17FFFD1E7DA8FD15FF78294D
%464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D6AB28EB28EB28EB28EB2
%8EB28EB26B4D464D4D4D464D4D4D464D4D4D464D77FD15FFA87D7D7D597D
%7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D53A8FD14FFA2
%29FD154D71B28FB2B2B28FB2B2B28FB2B2B28FB271FD0F4D7EFD14FFA859
%FD1D7DA8FD13FFCB4D4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D
%46B28EB28EB28EB28EB28EB28EB28EB28EB2464D464D4C4D464D4C4D464D
%4C4D224DA8FD13FF7D7D537D7D7D537D7D7D537D7D7D537D7D7D537D7D7D
%537D7D7D537D7D7D52A8FD13FF77FD164DB7B2B28FB2B2B28FB2B2B28FB2
%B2B28FB2B2B7FD0F4D78FD13FFA8FD1F7DFD12FFA24D4D4D464D4D4D464D
%4D4D464D4D4D464D4D4D464D29718EB28EB28EB28EB28EB28EB28EB28EB2
%8EB28E71284D4D4D464D4D4D464D4D4D464D4DA8FD12FF7D7D597D7D7D59
%7D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D537DFD12FF78FD
%164D8FB28FB2B2B28FB2B2B28FB2B2B28FB2B2B28FB28FFD0F4D77FD11FF
%A8FD207DFD11FFA94C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D
%46B28EB28EB28EB28EB28EB28EB28EB28EB28EB28EB2464D464D4C4D464D
%4C4D464D4C4D224DA8FD10FFA8527D7D7D537D7D7D537D7D7D537D7D7D53
%7D7D7D537D7D7D537D7D7D537D597DA8FD10FF78FD164D71B2B28FB2B2B2
%8FB2B2B28FB2B2B28FB2B2B28FB2B271FD0F4D7EFD10FFA8FD207DFD11FF
%774D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D46B28EB28EB28E
%B28EB28EB28EB28EB28EB28EB28EB24D4D464D4D4D464D4D4D464D4D4D46
%4D4DFD10FFA8527D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D
%597D7D7D597D7D7DA8FD0FFFA9FD174D718FB2B2B28FB2B2B28FB2B2B28F
%B2B2B28FB2B2B28F71FD104DA8FD0FFFA8FD207DA8FD0FFF774D464D4C4D
%464D4C4D464D4C4D464D4C4D464D4C4D464D46B28EB28EB28EB28EB28EB2
%8EB28EB28EB28EB28EB2464D4C4D464D4C4D464D4C4D464D4C4D227EFD0F
%FFA8527D537D7D7D537D7D7D537D7D7D537D7D7D537D7D7D537D7D7D537D
%7D7D537D7DFD0FFF78FD184D8FB2B2B28FB2B2B28FB2B2B28FB2B2B28FB2
%B2B28F71FD104D77FD0FFFFD217DA8FD0FFF4D4D464D4D4D464D4D4D464D
%4D4D464D4D4D464D4D4D464D29718EB28EB28EB28EB28EB28EB28EB28EB2
%8EB28E95284D4D4D464D4D4D464D4D4D464D4D4D2877FD0EFFAF7D7D7D59
%7D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D
%FD0FFFFD1A4DB28FB2B2B28FB2B2B28FB2B2B28FB2B2B28FB2FD134DFD0F
%FFFD227DFD0FFF224D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C
%4D464D6AB28EB28EB28EB28EB28EB28EB28EB28EB28E4D284D464D4C4D46
%4D4C4D464D4C4D464D4C4DA8FD0DFFA87D527D7D7D537D7D7D537D7D7D53
%7D7D7D537D7D7D537D7D7D537D7D7D537D7D7D53FD0FFFFD1B4D8FB2B2B2
%8FB2B2B28FB2B2B28FB2B2B28FB28F71FD114DFD0FFFFD217DA8FD0FFF46
%4D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D8EB28E
%B28EB28EB28EB28EB28EB28EB28EB28E4D284D4D4D464D4D4D464D4D4D46
%4D4D4DA8FD0EFFA8527D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D
%7D7D597D7D7D59FD047DFD0FFFFD1D4D6BB2B2B28FB2B2B28FB2B2B28FB2
%B2B28FB28FFD104DFD10FF7E53FD1E7DFD10FF4C4D464D4C4D464D4C4D46
%4D4C4D464D4C4D464D4C4D464D4C4D464D4C4D46958EB28EB28EB28E9546
%718EB28EB28EB28E4D224D4C4D464D4C4D464D4C4D224DA8FD0FFFA87E52
%7D527D527D527D527D527D527D527D527D527D527D527D527D527D7DFD11
%FFFD204D717195719571714D4D4D95B2B28FB2B2B28F71FD0D4DFD13FFFD
%1BA8FD12FF4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D
%4D464D4D4D464D4D4D284D294D224D4D4D28718EB28EB28EB28E4D4D4D46
%4D4D4D464D4D4D464DA9FD3FFFFD2B4D2995B2B28FB2B2B28FFD0C4DFD40
%FF464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D46
%4D4C4D464D4C4D464D4C4D464D4C4D22718EB28EB28EB26A4D4C4D464D4C
%4D464D4C4DA8FD0DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0FFFFD2E4D958FB2B2B28FB7FD0B4D
%FD0EFF532752275227522752275227522752275227522752275227522752
%275227522752275252FD0EFF464D4D4D464D4D4D464D4D4D464D4D4D464D
%4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D2971
%8EB28EB28E954D4D464D4D4D464D4D4DA8FD0DFF52FD2127F852FD0EFFFD
%304D958FB2B2B28F71FD094DFD0EFF522752275227522752275227522752
%275227522752275227522752275227522752272752FD0EFF4C4D464D4C4D
%464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D
%4C4D464D4C4D464D4C4D464D4CB28EB28EB26A4D4C4D464D4C4D224DA8FD
%0DFFFD232752A8FD0DFFFD314D71B2B2B28FB7FD094DFD0EFF5227522752
%275227522752275227522752275227522752275227522752275227522727
%52FD0EFF4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D
%464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D29718EB28EB28E71
%294D464D4D4D464DA9FD0DFF52FD222752FD0EFFFD324D958FB2B2B271FD
%084DFD0EFF7D275227522752275227522752275227522752275227522752
%2752275227522752272752FD0EFF464D4C4D464D4C4D464D4C4D46530D14
%141514140D304C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D
%4C4D464D6AB28EB28E95224D4C4D464D4C4DA8FD0DFF7DFD2127F87DFD0E
%FFFD0C4D14151B151B151B151B15152F71FD194D718FB2B2B29571FD074D
%FD0FFF272727522752275227522752275227522752275227522752275227
%52275227522752FD0FFF464D4D4D464D4D4D4C4D2915141B1415141B1415
%141B14150D4D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D
%71B28EB28E954C4D4D4D464D4D4DA8FD0EFF84F8FD1C272827277DFD0FFF
%FD094D291B151B141B151B141B151B141B151B0EFD184D71B2B28FB295FD
%084DFD10FF7D202727522752275227522752275227522752275227522752
%2752275227277DFD10FF4C4D464D4C4D464D4D15141B1415141B1415141B
%1415141B14150D4D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D
%4CB28EB28E954D4D464D4C4D224DA8FD10FF7DFD1A27F8277DFD11FFFD08
%4D14151B151B151B151B151B151B151B151B151BFD174D71B2B28FB295FD
%084DFD13FF7D522752275227522752275227522752275227522752272752
%7DA8FD12FF4D4D464D4D4D46531415141B1415141B1415141B1415141B14
%1514144D4D464D4D4D464D4D4D464D4D4D464D4D4D46FD044DB28EB28EB7
%4D4D464D4D4D464DCBFD14FF7DF8FD132752FD15FFFD074D0D1B151B141B
%151B141B151B141B151B141B151B14FD164D718FB2B2B295FD084DFD16FF
%7D2752275227522752275227522752275227277DFD16FF464D4C4D464D4C
%14141B1415141B1415141B1415141B1415141B1415FD04140EFD05140D53
%464D4C4D464D4C4D464D4DB28EB28E95464D4C4D464D4C4DA8FD16FF52F8
%FD0F2752FD17FFFD074D141B151B151B151B151B151B151B151B151B151B
%151B151B151B151B151B151B151553FD084D718FB2B2B29571FD074DCBFD
%16FFA852275227522752275227522752275227FD18FF464D4D4D464D4D15
%141B1415141B1415141B1415141B1415141B1415141B1415141B1415141B
%1415141B2F4D464D4D4D464D71B28EB28E954C4D4D4D464D4D4D7EFD17FF
%52FD0E2752FD18FFFD074D141B141B151B141B151B141B151B141B151B14
%1B151B141B151B141B151B141B151B141B2FFD064D71B2B28FB295FD084D
%A2FD17FFA827522752275227522752275227277DFD18FF4C4D464D4C4D46
%141415141B1415141B1415141B1415141B1415141B1415141B1415141B14
%15141B141514154D4D464D4C4D4CB28EB28E954D4D464D4C4D464D53FD17
%FFA8FD0E27A8FD18FFFD064D71141B151B151B151B151B151B151B151B15
%1B151B15362F5A30362F5A305A0E1B151B151B1536FD054D71B2B28FB295
%FD084D77FD18FF2752275227522752275227522752A8FD18FF4D4D464D4D
%4D46301415141B1415141B1415141B1415141B141514154D4D464D4D4D46
%4D4D4D29151415141B144D46FD044DB28EB28EB74D4D464D4D4D464D4DA8
%FD16FFA8FD0E27FD19FFFD084D15151B141B151B141B151B141B151B141B
%151B0DFD0B4D2F1B151B141BFD054D718FB2B2B295FD094D78FD17FF2727
%275227522752275227522752A8FD18FF464D4C4D464D4C4D291B1415141B
%1415141B1415141B1415141B144D464D4C4D464D4C4D464D4C4D141B1415
%14534C4D464D4DB28EB28E95464D4C4D464D4C4D224DA9FD15FFA8FD0E27
%A8FD18FFFD084D710E1B151B151B151B151B151B151B151B1553FD0D4D1B
%151B151B2FFD044D718FB2B2B29571FD094DA2FD16FF274C275227522752
%275227522752A8FD18FF464D4D4D464D4D4D464D0E15141B1415141B1415
%141B141514534D4D464D4D4D464D4D4D464D4D4D141B141514544D4D464D
%71B28EB28E954C4D4D4D464D4D4D464D4DFD15FFA852FD0D27A8FD18FFFD
%0B4D0E1B141B151B141B151B141B1453FD0F4D15141B151B2FFD044D71B2
%B28FB295FD0B4D7EFD15FF2752275227522752275227522752A8FD18FF4C
%4D464D4C4D464D4C4D464D2914141B1415141B14140D4D4C4D464D4C4D46
%4D4C4D464D4C4D464D1415141B1453464D4C4D4CB28EB28E954D4D464D4C
%4D464D4C4D224DA8FD13FFA8FD0E27AFFD18FFFD0E4D532F360E142F534D
%71FD114D1B151B151B2F714D4D4D71B2B28FB295FD0C4D78FD14FF275227
%5227522752275227522752A8FD18FF4D4D464D4D4D464D4D4D464D4D4D46
%4D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D1415141B14
%5346FD044DB28EB28EB74D4D464D4D4D464D4D4D464D297EFD12FFA8FD0E
%27FD19FFFD284D1B151B141B2FFD044D718FB2B2B28F71FD0D4DA8FD12FF
%2727275227522752275227522752A8FD18FF464D4C4D464D4C4D464D4C4D
%464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D141B
%141514544C4D464D46B28EB28EB2464D4C4D464D4C4D464D4C4D464D4CA2
%FD10FFA8FD0E27A8FD18FFFD284D1B151B151B2FFD054D8FB2B2B28F95FD
%0F4DA9FD10FF274C275227522752275227522752A8FD18FF464D4D4D464D
%4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D
%464D4D4D141B141514544D4D464D4D958EB28EB28E4D4D4D464D4D4D464D
%4D4D464D4D4D287EFD0EFFA852FD0D27A8FD18FFFD284D15141B151B2FFD
%054D71B28FB2B2B2FD114D78CBFD0DFFFD0C27F827A8FD18FF4C4D464D4C
%4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D46
%4D4C4D464D0E15141B1414464D4C4D224D8EB28EB28E95224D4C4D464D4C
%4D464D4C4D464D4C4D224D7EFD0BFFA87D527D527D527D527D527D527D52
%FD19FFFD284D36151B151B14FD064D958FB2B2B28F71FD134DA9FD31FF4D
%4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D46
%4D4D4D464D4D4D464D2915141B14152F4D4D4D464D4DB28EB28EB28E7129
%4D464D4D4D464D4D4D464D4D4D464D4D4D287777A9FD2EFFFD294D141B14
%1B1514FD064D71B28FB2B2B28F71FD154D7777A2A8FFCBFFFFFFCBFFFFFF
%CBFFFFFFCBFD1CFF464D4C4D464D4C4D464D4C4D46532E35343B34352E53
%4C4D464D4C4D464D4C4D464D4C4D464D4C4D46301415141B142F464D4C4D
%224D8EB28EB28EB28E4D284D464D4C4D464D4C4D464D4C4D464D4C4D464D
%284D224D4D4D4C4D4D4D4C4D4D4D4C4D4D4D4CFD044D77537E7ECBFD12FF
%FD0C4D59343A343B3A3B343A3A5F53FD104D714D1B151B151B14FD064D71
%8FB2B2B28FB28F71FD2F4D787EFD10FF464D4D4D464D4D4D4C4D4D35343A
%343A123A343A123A343A2E4D4D4D464D4D4D464D4D4D464D4D4D464D0D15
%141B14150E4D4D4D464D29718EB28EB28EB28E4D284D4D4D464D4D4D464D
%4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D
%464D4D4D464D4D4D4C78A8FD0DFFFD0A4D3B343B343B343B343B343B343B
%343A2EFD114D141B141B151B14FD064D718FB2B2B28FB28FFD314D294D77
%FD0CFF4C4D464D4C4D464D4C34123A123A123A123A123A123A123A343A2E
%4D4C4D464D4C4D464D4C4D464D4C4D46301415141B14150E4D4C4D464D28
%718EB28EB28EB28E4D224D4C4D464D4C4D464D4C4D464D4C4D464D4C4D46
%4D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D224D4D
%A8FD0AFFFD084D59343B3A3B343B3A3B343B3A3B343B3A3B343BFD114D36
%151B151B151B14FD064D95B2B28FB2B2B28F71FD334DA2FD09FF4D4D464D
%4D4D4653343A123A343A123A343A123A343A123A343A34594D4D464D4D4D
%464D4D4D464D4D4D4C4D4D14141B1415141B0E4D464D4D4D28718EB28EB2
%8EB28E4D294D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D
%464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D2878FD08FFFD
%074D2F3A343B343B343B343B343B343B343B343B343A34FD124D14141B15
%1B141B14FD054D2995B2B28FB2B2B28F71FD324D2978FD07FF464D4C4D46
%4D4C35123A123A123A123A123A123A123A123A123A343A3459345934592E
%532E4D4C4D464D4C4D464D4C14141B1415141B0E4D464D4C4D22718EB28E
%B28EB28E4D284D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C
%4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D2278FD06FF
%FD074D343B3A3B343B3A3B343B3A3B343B3A3B343B3A3B343B343A343B34
%3A343B345953FD084D15151B151B151B1471FD054D958FB2B2B28FB28F71
%FD334D7EFD05FF464D4D4D464D4D3A123A343A123A343A123A343A123A34
%3A123A343A123A343A123A343A123A343A34534D4D464D4D4D4614141514
%1B14150E4D4D4D464D29718EB28EB28EB28E4D284D4D4D464D4D4D464D4D
%4D464D4D4D464D4D4D464D4D4D464D4D4D4C4D294D4C774D534D4D294D46
%4D4D4D464D4D4D464D29A2FD04FFFD074D343A343B343B343B343B343B34
%3B343B343B343B343B343B343B343B343B343B343A345F53FD064D14151B
%141B151B14FD064D718FB2B2B28FB28FFD1E4D787EFD05FFA27EFD0D4DFD
%04FF4C4D464D4C4D4635343A123A123A123A123A123A123A123A123A123A
%343A343A343A123A123A123A123A123A2E4D464D4C4D46141415141B1415
%0E4D4C4D464D28718EB28EB28EB28E4D224D4C4D464D4C4D464D4C4D464D
%4C4D464D4C4D464D4C4D224D4DA8FD0AFF774D224D4C4D464D4C4D464D77
%FFFFFFFD074D353A343B3A3B343B3A3B343B3A3B343B3A3B343B3A595359
%53595359353B343B3A3B343B3A3A53FD044D714D14151B151B151B14FD06
%4D95B2B28FB2B2B28F71FD184D77FD0DFF7EFD0B4DA8FFFF4D4D464D4D4D
%4653343A123A343A123A343A123A343A123A343A34354D4D464D4D4D464D
%4D53343A343A123B343A2E4D4D4D4C4D4D14141B1415141B0E4D464D4D4D
%28718EB28EB28EB28E4D294D464D4D4D464D4D4D464D4D4D464D4D4D464D
%4D4D53FD0FFF7E4D4D4D464D4D4D464D2977FFFFFD084D5F343B343B343B
%343B343B343B343B343B343A2FFD0B4D533B343B343B343A2FFD064D1414
%1B151B141B14FD054D2995B2B28FB2B2B28F71FD154DFD11FF77FD0A4DCB
%FF464D4C4D464D4C4D283A343A123A123A123A123A123A123A123A344D46
%4D4C4D464D4C4D464D4C4D2835343A123A343A2E4D4C4D464D4C14141B14
%15141B0E4D464D4C4D22718EB28EB28EB28E4D284D464D4C4D464D4C4D46
%4D4C4D464D4C4D22A8FD12FF4C4D4C4D464D4C4D464D77FFFD094D353A34
%3B3A3B343B3A3B343B3A3B343B3453FD0F4D59343B3A3B343B53FD064D15
%151B151B151B1471FD054D958FB2B2B28FB28F71FD114D78FD13FFA2FD09
%4D77FF464D4D4D464D4D4D464D2E3A123A343A123A343A123A343A12534D
%4D464D4D4D464D4D4D464D4D4D4C4D4D35343A343A123A2F4D464D4D4D46
%141415141B14150E4D4D4D464D29718EB28EB28EB28E4D284D4D4D464D4D
%4D464D4D4D464D4D4D77FD13FFA84D4D4D464D4D4D464D4DA9FD0B4D533A
%343B343B343B343A343A3453FD134D59343B343B343A53FD064D14151B14
%1B151B14FD064D718FB2B2B28FB28FFD104DA9FD14FFFD0A4D7E4C4D464D
%4C4D464D4C4D464D4C59123A343A113A34352E4D4C4D464D4C4D464D4C4D
%464D4C4D464D4C4D464D4C35123A123A123A2E4D464D4C4D46141415141B
%14150E4D4C4D464D28718EB28EB28EB28E4D224D4C4D464D4C4D464D4C4D
%224DA8FD14FF77224D4C4D464D4C4D2278FD0E4D5353592F595353FD194D
%593A3B343B3A3A53FD044D714D14151B151B151B14FD064D95B2B28FB2B2
%B28F71FD0D4DCBFD14FF53FD094D534D4D464D4D4D464D4D4D464D4D4D46
%4D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D
%4D4C59343A123B343A2E4D4D4D4C4D4D14141B1415141B0E4D464D4D4D28
%718EB28EB28EB28E4D294D464D4D4D464D4D4D464DA8FD14FF77284D4D4D
%464D4D4D46FD314D59343B343B343A2FFD064D14141B151B141B14FD054D
%2995B2B28FB2B2B28F71FD0B4DA9FD14FFFD0B4D464D4C4D464D4C4D464D
%4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D
%464D4C4D464D4C4D4659343A123A343A2E4D4C4D464D4C14141B1415141B
%0E4D464D4C4D22718EB28EB28EB28E4D284D464D4C4D464D4C4D77FD13FF
%A24D4C4D464D4C4D464D4CFD334D59343B3A3B343B53FD064D15151B151B
%151B1471FD054D958FB2B2B28FB28F71FD094D78FD13FF7EFD0B4D464D4D
%4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D46
%4D4D4D464D4D4D464D4D4D464D4D4D4C4D4D35343A343A123A2F4D464D4D
%4D46141415141B14150E4D4D4D464D29718EB28EB28EB28E4D284D4D4D46
%4D4D4D28A2FD12FFFD044D464D4D4D46FD374D59343B343B343A53FD064D
%14151B141B151B14FD064D718FB2B2B28FB28FFD0A4DFD11FF77FD0C4D4C
%4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D22
%4D4C76707670764C4D284D464D4C4D464D4C4D464D4C35123A123A123A2E
%4D464D4C4D46141415141B14150E4D4C4D464D28718EB28EB28EB28E4D22
%4D4C4D464D4C4D4DFD0FFF774D4C4D464D4C4D464D4C4D46FD1F4D779AC1
%C0C7C1C1C0C19A77FD0D4D593A3B343B3A3A53FD044D714D14151B151B15
%1B14FD064D95B2B28FB2B2B28F71FD084D53FD0DFF78FD104D464D4D4D46
%4D4D4D464D4D4D464D4D4D464D4D4D464D4D4D4C4D4D9A9EC1C0C19EC1C0
%C19EC1C09A4C4D4D4D464D4D4D464D4D4D4C59343A123B343A2E4D4D4D4C
%4D4D14141B1415141B0E4D464D4D4D28718EB28EB28EB28E4D294D464D4D
%4D464D4DA2FD09FFCB534D464D4D4D464D4D4D464D4D4D46FD1D4DC2C0C1
%C0C1C1C1C0C1C1C1C0C1C0C14CFD0C4D59343B343B343A2FFD064D14141B
%151B141B14FD054D2995B2B28FB2B2B28F71FD094D777ECBFFFFCBFF7E78
%FD114D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C
%9F9EC19EC198C19EC198C19EC198C1C09F464D4C4D464D4C4D464D4C4D46
%59343A123A343A2E4D4C4D464D4C14141B1415141B0E4D464D4C4D22718E
%B28EB28EB28E4D284D464D4C4D464D284D224D4D4D464D284D464D4C4D46
%4D4C4D464D4C4D464D4CFD1B4D9AC0C1C1C1C0C1C1C1C0C1C1C1C0C1C1C1
%C0A0FD0D4D59343B3A3B343B53FD064D15151B151B151B1471FD054D958F
%B2B2B28FB28F71FD254D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D
%2871C0C19EC1C0C19EC1C0C19EC1C0C19EC1C0C19E714D4D464D4D4D464D
%4D4D4C4D4D35343A343A123A2F4D464D4D4D46141415141B14150E4D4D4D
%464D29718EB28EB28EB28E4D284D4D4D464D4D4D464D4D4D464D4D4D464D
%4D4D464D4D4D464D4D4D464D4D4D77FD184D76C1C1C1C0C1C1C1C0C1C1C1
%C0C1C1C1C0C1C1C176FD0E4D59343B343B343A53FD064D14151B141B151B
%14FD064D718FB2B2B28FB28FFD204D534D464D4C4D464D4C4D464D4C4D46
%4D4C4D464D4C4D464D4C9F9EC19EC198C19EC198C19EC198C19EC198C19E
%C1707770774C4D284D224D4C4D464D4C35123A123A123A2E4D464D4C4D46
%141415141B14150E4D4C4D464D28718EB28EB28EB28E4D224D4C4D464D4C
%4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D2278A2FD174D71FD04
%C1C0C1C1C1C0C1C1C1C0C1C1C1C0C1C1C1C0C7C1C1C0C1999BFD094D593A
%3B343B3A3A53FD044D714D14151B151B151B14FD064D95B2B28FB2B2B28F
%71FD1C4D7EA84D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4C
%C19EC1C0C19EC1C0C19EC1C0C19EC1C0C19EC1C0C19EC1C0C19EC1C0C175
%71294D464D4D4D4C59343A123B343A2E4D4D4D4C4D4D14141B1415141B0E
%4D464D4D4D28718EB28EB28EB28E4D294D464D4D4D464D4D4D464D4D4D46
%4D4D4D464D4D4D464D4D4D46A9FFFD174D77C1C1C0C1C1C1C0C1C1C1C0C1
%C1C1C0C1C1C1C0C1C1C1C0C1C1C1C0C1C1C1C09AFD074D59343B343B343A
%2FFD064D14141B151B141B14FD054D2995B2B28FB2B2B28F71FD194D77FF
%FF7E284D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D4CC19EC198C1
%9EC198C19EC198C19EC198C19EC198C1C0C198C19EC198C19EC19EC14C4D
%224D4C4D4659343A123A343A2E4D4C4D464D4C14141B1415141B0E4D464D
%4C4D22718EB28EB28EB28E4D284D464D4C4D464D4C4D464D4C4D464D4C4D
%464D4C4D464D77FFFFA8FD164D71C1C1C0C1C1C1C0C1C1C1C0C1C1C1C0C1
%C1C1C0C1C1C29AC2C1C1C0C1C1C1C0C1C1C170FD064D59343B3A3B343B53
%FD064D15151B151B151B1471FD054D958FB2B2B28FB28F71FD174DCBFFFF
%FF534D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D289AC0C19EC1C0
%C19EC1C0C19EC1C0C19EC1C0C19EA04D4D4C4D709A9EC1C0C19EC1C0C170
%4D4D4D4C4D4D35343A343A123A2F4D464D4D4D46141415141B14150E4D4D
%4D464D29718EB28EB28EB28E4D284D4D4D464D4D4D464D4D4D464D4D4D46
%4D4D4D2878FD04FFA9FD164D70C1C1C1C0C1C1C1C0C1C1C1C0C1C1C1C0C1
%C1C170FD064D719AC1C0C1C0C1C0C170FD064D59343B343B343A53FD064D
%14151B141B151B14FD064D718FB2B2B28FB28FFD154DA2FD05FF78284D46
%4D4C4D464D4C4D464D4C4D464D4C4D464D4C4D99C19EC198C19EC198C19E
%C198C19EC198C1994D224D4C4D464D284D4CC1C0C198C19EC14C4D4C4D46
%4D4C35123A123A123A2E4D464D4C4D46141415141B14150E4D4C4D464D28
%718EB28EB28EB28E4D224D4C4D464D4C4D464D4C4D464D4C4D464D53FD06
%FFA9FD164D77C1C1C0C1C1C1C0C1C1C1C0C1C1C1C0C1C177FD0B4DC1C0C1
%C1C1C0C176FD064D593A3B343B3A3A53FD044D714D14151B151B151B14FD
%064D95B2B28FB2B2B28F71FD114DFD08FF7E4D464D4D4D464D4D4D464D4D
%4D464D4D4D464D4D4D2877C0C198C1C0C19EC1C0C19EC1C0C19E76294D46
%4D4D4D464D4D4D464D4CC19EC1C0C19EC1704D464D4D4D4C59343A123B34
%3A2E4D4D4D4C4D4D14141B1415141B0E4D464D4D4D28718EB28EB28EB28E
%4D294D464D4D4D464D4D4D464D4D4D28A2FD09FF77FD164D77C1C1C0C1C1
%C1C0C1C1C1C0C1C077FD0F4DC1C0C1C1C1C0C170FD064D59343B343B343A
%2FFD064D14141B151B141B14FD054D2995B2B28FB2B2B28F71FD0D4D78FD
%0BFF4D4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D227199C19EC1
%C0C198C1C0C19971284D464D4C4D464D4C4D464D4C4D464D4CC19EC19EC1
%98C1704D224D4C4D4659343A123A343A2E4D4C4D464D4C14141B1415141B
%0E4D464D4C4D22718EB28EB28EB28E4D284D464D4C4D464D4C4D2277FD0D
%FFFD184D4C9B9AC2C1C2999A4CFD144DC1C1C1C0C1C1C170FD064D59343B
%3A3B343B53FD064D15151B151B151B1471FD054D958FB2B2B28FB28F71FD
%094D78FD0FFFFD044D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D28
%4D4D4D4C4D294D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D4CC1C0
%C19EC1C0C1704D4D4D4C4D4D35343A343A123A2F4D464D4D4D4614141514
%1B14150E4D4D4D464D29718EB28EB28EB28E4D284D4D4D4C4D2977FD11FF
%77FD334D4CC1C0C1C0C1C0C170FD064D59343B343B343A53FD064D14151B
%141B151B14FD064D718FB2B2B28FB28FFD064D7EFD13FF7D4D284D464D4C
%4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D46
%4D4C4D464D4C4D464D4C4D464D4C4D4CC1C0C198C19EC14C4D4C4D464D4C
%35123A123A123A2E4D464D4C4D46141415141B14150E4D4C4D464D28718E
%B28EB28EB28E4D224D4DA2FD15FFA978FD334DC1C0C1C1C1C0C176FD064D
%593A3B343B3A3A53FD044D714D14151B151B151B14FD064D95B2B28FB2B2
%B28F7177FD19FFA84D4D294D464D4D4D464D4D4D464D4D4D464D4D4D464D
%4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4D4D464D4CC1
%9EC1C0C19EC1704D464D4D4D4C59343A123B343A2E4D4D4D4C4D4D14141B
%1415141B0E4D464D4D4D28718EB28EB28EBDA8FD1CFFA87E4D4D29FD2E4D
%C1C0C1C1C1C0C170FD064D59343B343B343A2FFD064D14141B151B141B14
%FD054D2971B2BDC3FD22FFA27E53774D4D464D4C4D464D4C4D464D4C4D46
%4D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C4D464D4C
%C198C19EC198C1704D464D4C4D4659343A123A343A2E4D4C4D464D4C1414
%1B1415141B0E4D224D4D7777CBFD11FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
7 Bn
%AI5_BeginGradient: (Fade to Black)
(Fade to Black) 0 2 Bd
[
0
0 %_Br
[
0 0 0 1 1 50 100 %_BS
%_0 0 0 1 1 50 100 Bs
0 0 0 1 1 25 0 %_BS
%_0 0 0 1 1 25 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Green, Yellow, Orange)
(Green, Yellow, Orange) 0 7 Bd
[
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9
>
<
BFBEBEBDBCBBBBBAB9B8B8B7B6B5B5B4B3B2B2B1B0AFAEAEADACABABAAA9A8A8A7A6A5A5A4A3A2A1
A1A09F9E9E9D9C9B9B9A999898979695949493929191908F8E8E8D8C8B8B8A898887878685848483
828181807F7E7E7D7C7B7B7A797877777675747473727171706F6E6E6D6C6B6A6A69686767666564
6463626161605F5E5D5D5C5B5A5A595857575655545453525150504F4E4D4D4C4B4A4A4948474746
45444443424140403F3E3D3D3C3B3A3A393837373635343333323130302F2E2D2D2C2B2A2A292827
262625242323222120201F1E1D1D1C1B1A1A
>
1
0
1 %_Br
0
<
1A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F4041
42434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646566676869
6A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F9091
92939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9
BABBBCBDBEBF
>
<
F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5
F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8
F8F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFBFBFBFB
FCFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFEFEFF
FFFFFFFFFFFF
>
0
1 %_Br
<
D9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2
B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A6968676665646362
61605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A
393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A1918171615141312
11100F0E0D0C0B0A09080706050403020100
>
0.1
<
FFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFD
FDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFAFAFA
FAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8
F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6
F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3
F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2
>
0
1 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9
>
<
BFBEBEBDBCBBBBBAB9B8B8B7B6B5B5B4B3B2B2B1B0AFAEAEADACABABAAA9A8A8A7A6A5A5A4A3A2A1
A1A09F9E9E9D9C9B9B9A999898979695949493929191908F8E8E8D8C8B8B8A898887878685848483
828181807F7E7E7D7C7B7B7A797877777675747473727171706F6E6E6D6C6B6A6A69686767666564
6463626161605F5E5D5D5C5B5A5A595857575655545453525150504F4E4D4D4C4B4A4A4948474746
45444443424140403F3E3D3D3C3B3A3A393837373635343333323130302F2E2D2D2C2B2A2A292827
262625242323222120201F1E1D1D1C1B1A1A
>
1
0
1 %_Br
0
<
1A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F4041
42434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646566676869
6A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F9091
92939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9
BABBBCBDBEBF
>
<
F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5
F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8
F8F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFBFBFBFB
FCFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFEFEFF
FFFFFFFFFFFF
>
0
1 %_Br
<
D9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBFBEBDBCBBBAB9B8B7B6B5B4B3
B3B2B1B0AFAEADACABABAAA9A8A7A6A5A4A4A3A2A1A09F9E9E9D9C9B9A9998989796959494939291
908F8F8E8D8C8B8B8A898888878685848483828181807F7E7E7D7C7B7B7A79787877767575747373
727170706F6E6E6D6C6B6B6A6969686767666565646363626161605F5F5E5D5D5C5B5B5A5A595858
575656555554535352525150504F4F4E4D4D4C4C4B4B4A4949484847474646454444434342424141
40403F3F3E3D3D3C3C3B3B3A3A3939383837373636363535343433333232313130302F2F2F2E2E2D
2D2C2C2B2B2B2A2A29292928282727262626252524242423232322222121212020201F1F1E1E1E1D
1D1D1C1C1C1B1B1B1A1A1A1919191818181717171716161615151514141414131313121212121111
1111101010100F0F0F0F0E0E0E0E0D0D0D0D0D0C0C0C0C0B0B0B0B0B0A0A0A0A0A09090909090808
08080808070707070707060606060606060505050505050504040404040404040303030303030303
03020202020202020202020202010101010101010101010101010101010101000000000000000000
0000000000000000000000000000000000
>
0.1
<
FFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFDFD
FDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB
FBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9
F9F9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7
F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F6F6
F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5
F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4
F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3
F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3
F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2
F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2
F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2
>
0
1 %_Br
[
0.85 0.1 1 0 1 50 100 %_BS
%_0.85 0.1 1 0 1 50 100 Bs
0 0.75 1 0 1 50 80.117 %_BS
%_0 0.75 1 0 1 50 80.117 Bs
0 0.1 0.95 0 1 50 64 %_BS
%_0 0.1 0.95 0 1 50 64 Bs
0.85 0.1 1 0 1 50 47 %_BS
%_0.85 0.1 1 0 1 50 47 Bs
0 0.75 1 0 1 50 30 %_BS
%_0 0.75 1 0 1 50 30 Bs
0 0.1 0.95 0 1 50 15 %_BS
%_0 0.1 0.95 0 1 50 15 Bs
0.85 0.1 1 0 1 28 0 %_BS
%_0.85 0.1 1 0 1 28 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Purple Radial)
(Purple Radial) 1 2 Bd
[
<
0001010203030405050607070809090A0B0B0C0C0D0E0E0F10101112121313141515161717181819
1A1A1B1B1C1D1D1E1E1F20202121222323242425262627272828292A2A2B2B2C2C2D2E2E2F2F3030
313132333334343535363637373839393A3A3B3B3C3C3D3D3E3E3F3F404041414242434344444545
46464747484849494A4A4B4B4C4C4D4D4E4E4F4F5050515151525253535454555556565657575858
59595A5A5A5B5B5C5C5D5D5D5E5E5F5F5F6060616162626263636464646565666666676767686869
69696A6A6B6B6B6C6C6C6D6D6D6E6E6F6F6F70707071717172727273737374747475757576767677
77777878787979797A7A7A7B7B7B7B7C7C7C7D7D7D7E7E7E7E7F7F7F7F8080808181818182828282
83838384848484858585858686868687878787878888888889898989898A8A8A8A8B8B8B8B8B8C8C
8C8C8C8D8D8D8D8D8E8E8E8E8E8F8F8F8F8F8F909090909090919191919191929292929292929393
93939393939494949494949494959595959595959595969696969696969696969797979797979797
97979797989898989898989898989898989898989898999999999999999999999999999999999999
999999999999
>
<
000102030405060708090A0B0C0D0E0F10111213141516161718191A1B1C1D1E1F20212223242525
262728292A2B2C2D2E2F2F30313233343536373738393A3B3C3D3E3E3F4041424343444546474849
494A4B4C4D4D4E4F5051525253545556565758595A5A5B5C5D5D5E5F606161626364646566676768
696A6A6B6C6D6D6E6F7070717272737475757677777879797A7B7C7C7D7E7E7F8080818282838484
858686878888898A8A8B8B8C8D8D8E8F8F90909192929394949595969797989899999A9B9B9C9C9D
9E9E9F9FA0A0A1A1A2A3A3A4A4A5A5A6A6A7A7A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2
B3B3B4B4B5B5B5B6B6B7B7B8B8B9B9BABABABBBBBCBCBDBDBEBEBEBFBFC0C0C0C1C1C2C2C3C3C3C4
C4C5C5C5C6C6C6C7C7C8C8C8C9C9C9CACACACBCBCCCCCCCDCDCDCECECECFCFCFD0D0D0D0D1D1D1D2
D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D6D7D7D7D7D8D8D8D8D9D9D9D9DADADADADBDBDBDBDBDCDCDC
DCDDDDDDDDDDDEDEDEDEDEDEDFDFDFDFDFE0E0E0E0E0E0E1E1E1E1E1E1E1E2E2E2E2E2E2E2E2E3E3
E3E3E3E3E3E3E3E4E4E4E4E4E4E4E4E4E4E4E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5E5
E5E5E5E5E5E6
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000
>
1 %_Br
[
0 0 0 0 1 30 63.1579 %_BS
%_0 0 0 0 1 30 63.1579 Bs
0.6 0.9 0.000031 0.000031 1 50 100 %_BS
%_0.6 0.9 0.000031 0.000031 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Super Soft Black Vignette)
(Super Soft Black Vignette) 1 3 Bd
[
0.2
0.2
0.2
1
1 %_Br
0.2
0.2
0.2
1
1 %_Br
[
0.2 0.2 0.2 1 1 56.0729 57.4443 %_BS
%_0.2 0.2 0.2 1 1 56.0729 57.4443 Bs
0.2 0.2 0.2 1 1 31.8603 79.7713 %_BS
%_0.2 0.2 0.2 1 1 31.8603 79.7713 Bs
0.2 0.2 0.2 1 1 50 100 %_BS
%_0.2 0.2 0.2 1 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 26)
(Unnamed gradient 26) 0 3 Bd
[
<
00000000010101010101020202020202020303030303030303040404040404040405050505050505
05050606060606060606060607070707070707070707070708080808080808080808080809090909
0909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B
0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C
0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
>
<
0001020303040506070808090A0B0C0C0D0E0F0F10111212131414151616171818191A1A1B1C1C1D
1D1E1E1F20202121222223232425252626272727282829292A2A2B2B2C2C2C2D2D2E2E2F2F2F3030
30313132323233333334343435353536363637373737383838393939393A3A3A3A3B3B3B3B3C3C3C
3C3D3D3D3D3E3E3E3E3E3F3F3F3F3F3F404040404041414141414142424242424242434343434343
43434444444444444444454545454545454545454646464646464646464646464747474747474747
47474747474747484848484848484848484848484848484848484848484949494949494949494949
4949494949494949494949494949494949494949494949494949494949494949494A4A4A4A4A4A4A
4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A
4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A
4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A
4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A
>
<
00020406080A0C0E10121416181A1C1E1F21232527282A2C2D2F3132343637393A3C3D3F40424345
4647494A4C4D4E50515253555657585A5B5C5D5E606162636465666768696A6B6C6D6E6F70717273
747576777778797A7B7C7C7D7E7F8080818282838485858687878889898A8B8B8C8C8D8E8E8F8F90
90919192929394949495959696979798989999999A9A9B9B9B9C9C9D9D9D9E9E9E9F9F9FA0A0A0A1
A1A1A2A2A2A2A3A3A3A4A4A4A4A5A5A5A5A6A6A6A6A6A7A7A7A7A7A8A8A8A8A8A9A9A9A9A9A9AAAA
AAAAAAAAAAABABABABABABABACACACACACACACACACADADADADADADADADADADADAEAEAEAEAEAEAEAE
AEAEAEAEAEAEAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFB0B0B0B0B0B0B0B0B0B0B0B0
B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0
B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0
B0B0B0B0B0B0B0B0B0B0B0B0B0B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1
B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1
>
<
00000000000000000000000000000000000000000000000000010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
020202020202020202020202020202
>
1 %_Br
1
0 %_Br
[
0.05246 0.289616 0.692164 0.007477 1 50 100 %_BS
%_0.05246 0.289616 0.692164 0.007477 1 50 100 Bs
1 0 13 45 %_BS
%_1 0 13 45 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 30)
(Unnamed gradient 30) 1 2 Bd
[
<
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
>
<
181919191A1A1B1C1C1D1D1E1F1F202122222324252526272829292A2B2C2D2E2E2F303132333435
36363738393A3B3C3D3E3F404142434445464748494A
>
<
CECECECDCDCDCCCCCCCBCBCBCACAC9C9C9C8C8C7C7C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBD
BDBCBCBBBABAB9B9B8B8B7B6B6B5B5B4B3B3B2B2B1B1
>
<
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010102020202020202020202020202020202020202
>
1 %_Br
[
0.049561 0.095003 0.808347 0.00296 1 57.3034 0 %_BS
%_0.049561 0.095003 0.808347 0.00296 1 57.3034 0 Bs
0.05246 0.289616 0.692164 0.007477 1 50 100 %_BS
%_0.05246 0.289616 0.692164 0.007477 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 31)
(Unnamed gradient 31) 0 3 Bd
[
<
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
>
<
4A494847464544434241403F3E3D3C3B3A393838373635343433323131302F2F2E2D2D2C2B2B2A2A
292828272726262525242423232322222121212020201F1F1F1E1E1E1D1D1D1D1C1C1C1C1B1B1B1B
1B1B1A1A1A1A1A1A1A19191919191919191919191918181818181818181818181818181818
>
<
B1B1B2B2B3B4B4B5B5B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C0C1C1C2C2C2C3C3C3C4
C4C4C5C5C5C6C6C6C7C7C7C7C8C8C8C8C9C9C9C9CACACACACACBCBCBCBCBCBCCCCCCCCCCCCCCCCCD
CDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECECECECECECECECECECECECECECE
>
<
02020202020202020202020202020202020202010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101
>
1 %_Br
<
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D
>
<
18191A1B1C1D1E1F202122232425262728292A2B2C2D2F303132333435363738393A3B3C3D3E3F40
4142434445464748494A
>
<
CECECDCCCCCBCBCAC9C9C8C7C7C6C6C5C4C4C3C3C2C1C1C0C0BFBEBEBDBDBCBBBBBABAB9B8B8B7B7
B6B5B5B4B4B3B2B2B1B1
>
<
01010101010101010101010101010101010101010101010101010101010101010202020202020202
02020202020202020202
>
1 %_Br
[
0.049561 0.095003 0.808347 0.00296 1 50 100 %_BS
%_0.049561 0.095003 0.808347 0.00296 1 50 100 Bs
0.05246 0.289616 0.692164 0.007477 1 23.7288 50 %_BS
%_0.05246 0.289616 0.692164 0.007477 1 23.7288 50 Bs
0.049561 0.095003 0.808347 0.00296 1 50 0 %_BS
%_0.049561 0.095003 0.808347 0.00296 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Laguna)
(Laguna) 0 3.1914 84.1563 84.791 [
%AI3_Tile
(0 O 0 R 0 1 1 0 k
 0 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 10 M []0 d0 XR
42.0781 30.3906 m
12.2227 12.8779 9.0488 12.4082 V
7.2871 14.1709 0 30.3906 Y
13.1641 20.5186 29.1484 23.3389 42.0781 30.3906 C
f
42.0781 57.5908 m
12.2227 40.0781 9.0488 39.6094 V
7.2871 41.3711 0 57.5908 Y
13.1641 47.7178 29.1484 50.5391 42.0781 57.5908 C
f
42.0781 84.791 m
12.2227 67.2773 9.0488 66.8096 V
7.2871 68.5703 0 84.791 Y
13.1641 74.918 29.1484 77.7402 42.0781 84.791 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6 0.9 0.000031 0.000031 k
 0.6 0.9 0.000031 0.000031 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 10 M []0 d0 XR
84.1563 30.3906 m
54.3008 12.8779 51.127 12.4082 V
49.3652 14.1709 42.0781 30.3906 Y
55.2422 20.5186 71.2266 23.3389 84.1563 30.3906 C
f
84.1563 57.5908 m
54.3008 40.0781 51.127 39.6094 V
49.3652 41.3711 42.0781 57.5908 Y
55.2422 47.7178 71.2266 50.5391 84.1563 57.5908 C
f
84.1563 84.791 m
54.3008 67.2773 51.127 66.8096 V
49.3652 68.5703 42.0781 84.791 Y
55.2422 74.918 71.2266 77.7402 84.1563 84.791 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.85 0.1 1 0 k
 0.85 0.1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 10 M []0 d0 XR
21.0391 33.582 m
19.2773 33.582 17.8477 32.1523 17.8477 30.3906 c
17.8477 28.6289 19.2773 27.2002 21.0391 27.2002 c
22.8008 27.2002 24.2285 28.6289 24.2285 30.3906 c
24.2285 32.1523 22.8008 33.582 21.0391 33.582 c
f
21.0391 6.3818 m
19.2773 6.3818 17.8477 4.9531 17.8477 3.1914 c
17.8477 1.4287 19.2773 0 21.0391 0 c
22.8008 0 24.2285 1.4287 24.2285 3.1914 c
24.2285 4.9531 22.8008 6.3818 21.0391 6.3818 c
f
21.0391 60.7822 m
19.2773 60.7822 17.8477 59.3525 17.8477 57.5908 c
17.8477 55.8291 19.2773 54.3994 21.0391 54.3994 c
22.8008 54.3994 24.2285 55.8291 24.2285 57.5908 c
24.2285 59.3525 22.8008 60.7822 21.0391 60.7822 c
f
21.0391 87.9824 m
19.2773 87.9824 17.8477 86.5547 17.8477 84.791 c
17.8477 83.0283 19.2773 81.5996 21.0391 81.5996 c
22.8008 81.5996 24.2285 83.0283 24.2285 84.791 c
24.2285 86.5547 22.8008 87.9824 21.0391 87.9824 c
f
63.1172 33.582 m
61.3555 33.582 59.9258 32.1523 59.9258 30.3906 c
59.9258 28.6289 61.3555 27.2002 63.1172 27.2002 c
64.8789 27.2002 66.3066 28.6289 66.3066 30.3906 c
66.3066 32.1523 64.8789 33.582 63.1172 33.582 c
f
63.1172 6.3818 m
61.3555 6.3818 59.9258 4.9531 59.9258 3.1914 c
59.9258 1.4287 61.3555 0 63.1172 0 c
64.8789 0 66.3066 1.4287 66.3066 3.1914 c
66.3066 4.9531 64.8789 6.3818 63.1172 6.3818 c
f
63.1172 60.7822 m
61.3555 60.7822 59.9258 59.3525 59.9258 57.5908 c
59.9258 55.8291 61.3555 54.3994 63.1172 54.3994 c
64.8789 54.3994 66.3066 55.8291 66.3066 57.5908 c
66.3066 59.3525 64.8789 60.7822 63.1172 60.7822 c
f
63.1172 87.9824 m
61.3555 87.9824 59.9258 86.5547 59.9258 84.791 c
59.9258 83.0283 61.3555 81.5996 63.1172 81.5996 c
64.8789 81.5996 66.3066 83.0283 66.3066 84.791 c
66.3066 86.5547 64.8789 87.9824 63.1172 87.9824 c
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6 0.9 0.000031 0.000031 k
 0.6 0.9 0.000031 0.000031 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 10 M []0 d0 XR
0 3.1914 m
29.8535 20.7041 33.0273 21.1738 V
34.79 19.4111 42.0781 3.1914 Y
28.9141 13.0645 12.9277 10.2422 0 3.1914 C
f
0 30.3906 m
29.8535 47.9033 33.0273 48.374 V
34.79 46.6104 42.0781 30.3906 Y
28.9141 40.2646 12.9277 37.4434 0 30.3906 C
f
0 57.5908 m
29.8535 75.1035 33.0273 75.5752 V
34.79 73.8105 42.0781 57.5908 Y
28.9141 67.4648 12.9277 64.6436 0 57.5908 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 1 1 0 k
 0 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 10 M []0 d0 XR
42.0781 3.1914 m
71.9316 20.7041 75.1055 21.1738 V
76.8691 19.4111 84.1563 3.1914 Y
70.9922 13.0645 55.0059 10.2422 42.0781 3.1914 C
f
42.0781 30.3906 m
71.9316 47.9033 75.1055 48.374 V
76.8691 46.6104 84.1563 30.3906 Y
70.9922 40.2646 55.0059 37.4434 42.0781 30.3906 C
f
42.0781 57.5908 m
71.9316 75.1035 75.1055 75.5752 V
76.8691 73.8105 84.1563 57.5908 Y
70.9922 67.4648 55.0059 64.6436 42.0781 57.5908 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(New Pattern 1)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8049 8049 m
-8049 7990.0254 L
-8033.4902 7990.0254 L
-8033.4902 8049 L
-8049 8049 L
n
0 O
0 0 0 1 k
10 M-8049 8000.0586 m
-8049 7999.5742 L
-8033.4878 7999.5742 L
-8033.4878 8000.0586 L
-8049 8000.0586 L
f
-8049 8017.3838 m
-8049 8016.8965 L
-8033.4878 8016.8965 L
-8033.4878 8017.3838 L
-8049 8017.3838 L
f
-8048.9995 8002.3682 m
-8048.9995 8001.6494 L
-8033.4878 8001.6494 L
-8033.4878 8002.3682 L
-8048.9995 8002.3682 L
f
-8048.9995 8012.6328 m
-8048.9995 8011.9121 L
-8033.4878 8011.9121 L
-8033.4878 8012.6328 L
-8048.9995 8012.6328 L
f
-8048.9995 8010.4951 m
-8048.9995 8009.4141 L
-8033.4878 8009.4141 L
-8033.4878 8010.4951 L
-8048.9995 8010.4951 L
f
-8048.9995 8004.9395 m
-8048.9995 8003.8594 L
-8033.4878 8003.8594 L
-8033.4878 8004.9395 L
-8048.9995 8004.9395 L
f
-8048.9995 8007.9854 m
-8048.9995 8006.334 L
-8033.4878 8006.334 L
-8033.4878 8007.9854 L
-8048.9995 8007.9854 L
f
*u
1 D
-8033.4888 8016.1455 m
-8048.9995 8016.1455 L
-8048.9995 8015.6816 L
-8048.6514 8015.6816 L
-8048.6514 8014.4844 L
-8048.9995 8014.4844 L
-8048.9995 8014.0215 L
-8033.4888 8014.0215 L
-8033.4888 8014.4844 L
-8033.8408 8014.4844 L
-8033.8408 8015.6846 L
-8033.4888 8015.6846 L
-8033.4888 8016.1455 L
f
0 D
-8045.1255 8015.6846 m
-8044.4199 8015.6846 L
-8044.4199 8014.4844 L
-8045.1255 8014.4844 L
-8045.1255 8015.6846 L
f
-8045.8306 8014.4844 m
-8046.5361 8014.4844 L
-8046.5361 8015.6846 L
-8045.8306 8015.6846 L
-8045.8306 8014.4844 L
f
-8043.7144 8015.6846 m
-8043.0098 8015.6846 L
-8043.0098 8014.4844 L
-8043.7144 8014.4844 L
-8043.7144 8015.6846 L
f
-8042.3042 8015.6846 m
-8041.5986 8015.6846 L
-8041.5986 8014.4844 L
-8042.3042 8014.4844 L
-8042.3042 8015.6846 L
f
-8040.8936 8015.6846 m
-8040.1885 8015.6846 L
-8040.1885 8014.4844 L
-8040.8936 8014.4844 L
-8040.8936 8015.6846 L
f
-8039.4834 8015.6846 m
-8038.7778 8015.6846 L
-8038.7778 8014.4844 L
-8039.4834 8014.4844 L
-8039.4834 8015.6846 L
f
-8038.0718 8015.6846 m
-8037.3672 8015.6846 L
-8037.3672 8014.4844 L
-8038.0718 8014.4844 L
-8038.0718 8015.6846 L
f
-8036.6616 8015.6846 m
-8035.9575 8015.6846 L
-8035.9575 8014.4844 L
-8036.6616 8014.4844 L
-8036.6616 8015.6846 L
f
-8035.2515 8015.6846 m
-8034.5454 8015.6846 L
-8034.5454 8014.4844 L
-8035.2515 8014.4844 L
-8035.2515 8015.6846 L
f
-8047.9463 8015.6846 m
-8047.2407 8015.6846 L
-8047.2407 8014.4844 L
-8047.9463 8014.4844 L
-8047.9463 8015.6846 L
f
*U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 2)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8049 8048.998 m
-8049 7990.0225 L
-7990.0254 7990.0225 L
-7990.0254 8048.998 L
-8049 8048.998 L
n
*u
1 D
0 O
0 0 0 1 k
10 M-8022.4902 8008.4453 m
-8020.9678 8009.9678 -8021.5166 8012.9834 -8023.7153 8015.1836 c
-8025.9146 8017.3809 -8028.9302 8017.9297 -8030.4526 8016.4082 c
-8031.9751 8014.8857 -8031.4263 8011.8682 -8029.2271 8009.6709 c
-8027.0288 8007.4717 -8024.0127 8006.9238 -8022.4902 8008.4453 c
f
0 D
-8023.1519 8009.0781 m
-8024.5728 8007.6582 -8027.2241 8008.0059 -8029.0728 8009.8545 c
-8030.9214 8011.7031 -8031.2695 8014.3545 -8029.8486 8015.7754 c
-8028.4282 8017.1953 -8025.7769 8016.8486 -8023.9282 8015 c
-8022.0786 8013.1504 -8021.7314 8010.5 -8023.1519 8009.0781 c
f
*U
-8040.5327 7999.2607 m
-8039.7969 7999.1309 l
-8039.71 7998.4385 l
-8034.9458 8003.9814 l
-8040.5327 7999.2607 l
f
-8029.9409 7996.3145 m
-8030.1235 7994.7266 L
-8029.7002 7994.4512 -8029.3184 7994.1309 -8028.9346 7993.8145 C
-8028.6841 7996.9189 L
-8028.3535 7996.9453 L
-8028.4678 7993.4395 L
-8028.0503 7993.1162 -8027.6089 7992.8213 -8027.0913 7992.6152 C
-8027.1235 7997.7266 L
-8026.9063 7997.7734 L
-8026.5938 7992.4521 L
-8026.2007 7992.3516 -8025.7632 7992.3008 -8025.2642 7992.3213 C
-8026.0376 8001.4463 L
-8024.7666 7992.3594 L
-8024.3359 7992.4063 -8023.96 7992.4746 -8023.6289 7992.5625 C
-8024.4551 7999.334 L
-8024.2998 7999.2109 L
-8023.1465 7992.7148 L
-8022.7471 7992.8633 -8022.4238 7993.0449 -8022.1528 7993.25 C
-8022.7334 7998.0762 L
-8022.4688 7997.9414 L
-8021.7114 7993.6426 L
-8021.2256 7994.1494 -8020.9194 7994.7344 -8020.5127 7995.2822 C
-8021.0713 7997.3496 L
-8020.6001 7997.1709 L
-8020.1338 7995.7383 L
-8019.8096 7996.082 -8019.4063 7996.3945 -8018.8394 7996.6406 c
-8018.8506 7996.6357 -8017.7393 7996.6826 -8017.7466 7996.6533 c
-8017.7959 7996.4375 -8018.6655 7996.2998 -8018.6455 7996.3105 c
-8021.2974 7994.8965 -8020.3232 7992.3301 -8024.8735 7991.873 c
-8028.4072 7991.5176 -8029.2515 7994.75 -8032.0962 7995.0615 c
-8032.1152 7995.0625 -8032.7632 7995.3174 -8032.8442 7995.4502 C
-8032.8486 7995.625 -8032.4595 7995.5186 -8032.2417 7995.4766 c
-8031.6001 7995.3477 -8031.0498 7995.2402 -8030.5728 7994.9912 C
-8030.4023 7996.1914 L
-8029.9409 7996.3145 L
f
-8042.6626 8008.9463 m
-8044.2495 8008.7637 L
-8044.5254 8009.1865 -8044.8462 8009.5693 -8045.1626 8009.9521 C
-8042.0576 8010.2031 L
-8042.0322 8010.5352 L
-8045.5376 8010.4189 L
-8045.8608 8010.8369 -8046.1558 8011.2783 -8046.3618 8011.7959 C
-8041.2505 8011.7637 L
-8041.2031 8011.9814 L
-8046.5249 8012.293 L
-8046.6265 8012.6865 -8046.6758 8013.125 -8046.6558 8013.623 C
-8037.5298 8012.8496 L
-8046.6177 8014.1201 L
-8046.5713 8014.5498 -8046.5024 8014.9277 -8046.4146 8015.2578 C
-8039.6426 8014.4316 L
-8039.7656 8014.5869 L
-8046.2622 8015.7402 L
-8046.1138 8016.1406 -8045.9312 8016.4629 -8045.7271 8016.7344 C
-8040.9014 8016.1533 L
-8041.0352 8016.418 L
-8045.3335 8017.1768 L
-8044.8271 8017.6621 -8044.2417 8017.9688 -8043.6943 8018.375 C
-8041.6274 8017.8145 L
-8041.8066 8018.2871 L
-8043.2383 8018.752 L
-8042.8945 8019.0762 -8042.5825 8019.4814 -8042.3359 8020.0479 c
-8042.3408 8020.0361 -8042.2935 8021.1484 -8042.3242 8021.1416 c
-8042.54 8021.0908 -8042.6768 8020.2227 -8042.6675 8020.2412 c
-8044.0806 8017.5898 -8046.6475 8018.5645 -8047.1045 8014.0127 c
-8047.4595 8010.4805 -8044.2271 8009.6367 -8043.9165 8006.791 c
-8043.9136 8006.7725 -8043.6602 8006.125 -8043.5273 8006.043 C
-8043.3535 8006.0381 -8043.4575 8006.4277 -8043.5015 8006.6455 c
-8043.6294 8007.2871 -8043.7368 8007.8369 -8043.9858 8008.3145 C
-8042.7842 8008.4854 L
-8042.6626 8008.9463 L
f
-8013.0127 8007.2285 m
-8008.2495 8008.6348 -8006.9502 8010.9209 -8006.9746 8012.5654 C
-8006.5366 8009.459 -8004.6558 8011.8652 -8004.1313 8013.0029 C
-8005.0498 8009.416 -8002.4463 8012.5439 -8002.2715 8012.8496 C
-8003.2593 8009.4063 -8010.3955 8006.9404 -8013.0127 8007.2285 C
f
-8018.9775 8006.2197 m
-8022.3242 8000.1738 -8019.4233 7998.5703 -8018.7354 7998.377 c
-8018.9233 7998.4287 -8019.3135 7999.2949 -8019.2026 7999.6367 C
-8018.9482 7999.0928 -8018.4111 7998.8193 -8017.8994 7998.6094 C
-8019.1626 7999.6094 -8019.6943 8002.4111 -8018.9082 8005.9512 c
-8018.9775 8006.2197 l
f
-8021.2222 8006.5254 m
-8023.6035 8004.1016 -8025.0474 8003.2773 -8023.1035 8000.668 c
-8023.2202 8000.8262 -8023.3838 8001.7168 -8023.1758 8002.0117 C
-8023.0942 8001.418 -8022.6626 8000.998 -8022.2358 8000.6455 C
-8023.9395 8004.0732 -8021.2222 8006.5254 y
f
-8013.6577 8005.4199 m
-8013.9897 8003.5615 -8012.4922 8002.4688 -8010.8662 8001.8496 C
-8011.4194 8001.8662 -8012.0176 8001.9307 -8012.4482 8002.3496 C
-8012.4302 8001.9893 -8011.7598 8001.3184 -8011.5654 8001.3359 c
-8012.2778 8001.2744 -8014.4951 8000.8447 -8013.8408 8005.6191 c
-8013.6577 8005.4199 l
f
-8010.5576 8006.1133 m
-8010.1538 8004.7266 -8007.9502 8004.459 V
-8008.5342 8004.2871 -8009.2314 8004.3662 -8009.6626 8004.7852 C
-8009.6455 8004.4258 -8008.8408 8003.7178 -8008.6479 8003.7568 c
-8010.3921 8003.4141 -8010.6782 8005.9072 y
-8010.5576 8006.1133 l
f
-8007.1152 8007.3213 m
-8006.8408 8006.627 -8006.0942 8006.1201 -8005.2646 8006 C
-8005.6475 8005.8975 -8006.0854 8005.9873 -8006.4297 8006.3242 C
-8006.4175 8006.0352 -8005.7744 8005.4863 -8005.6182 8005.502 c
-8007.2729 8005.3496 -8007.1152 8007.3213 Y
f
-8016.5562 8005.4629 m
-8016.6504 8002.1309 -8015.4175 8000.4541 -8013.9761 7999.6514 C
-8014.5264 7999.7148 -8015.1162 7999.8271 -8015.5103 8000.2793 C
-8015.5249 7999.9189 -8014.9087 7999.1953 -8014.7134 7999.1973 c
-8015.4287 7999.1943 -8018.0034 7999.0898 -8016.7866 8005.7109 c
-8016.5562 8005.4629 l
f
-8031.7944 8026.0137 m
-8030.3882 8030.7754 -8028.1006 8032.0762 -8026.4575 8032.0518 C
-8029.5635 8032.4893 -8027.1567 8034.3701 -8026.0195 8034.8945 C
-8029.6074 8033.9766 -8026.4795 8036.5791 -8026.1729 8036.7549 C
-8029.6162 8035.7676 -8032.0825 8028.6309 -8031.7944 8026.0137 C
f
-8032.8022 8020.0488 m
-8038.8481 8016.7002 -8040.4521 8019.6025 -8040.6465 8020.291 c
-8040.5938 8020.1025 -8039.7295 8019.7119 -8039.3857 8019.8242 C
-8039.9297 8020.0781 -8040.2017 8020.6152 -8040.4126 8021.127 C
-8039.4126 8019.8633 -8036.6113 8019.334 -8033.0703 8020.1182 c
-8032.8022 8020.0488 l
f
-8032.4966 8017.8037 m
-8034.9214 8015.4229 -8035.7446 8013.9805 -8038.3535 8015.9229 c
-8038.1968 8015.8066 -8037.3057 8015.6426 -8037.0112 8015.8496 C
-8037.6064 8015.9307 -8038.0239 8016.3633 -8038.3774 8016.79 C
-8034.9487 8015.0879 -8032.4966 8017.8037 y
f
-8033.6025 8025.3682 m
-8035.4614 8025.0361 -8036.5537 8026.5342 -8037.1729 8028.1602 C
-8037.1558 8027.6074 -8037.0918 8027.0098 -8036.6719 8026.5791 C
-8037.0327 8026.5957 -8037.7041 8027.2656 -8037.6865 8027.4609 c
-8037.7485 8026.75 -8038.1777 8024.5313 -8033.4038 8025.1846 c
-8033.6025 8025.3682 l
f
-8032.9087 8028.4688 m
-8034.2959 8028.873 -8034.5649 8031.0762 V
-8034.7354 8030.4922 -8034.6558 8029.7949 -8034.2368 8029.3633 C
-8034.5967 8029.3809 -8035.3042 8030.1865 -8035.2666 8030.3789 c
-8035.6079 8028.6348 -8033.1152 8028.3477 y
-8032.9087 8028.4688 l
f
-8031.7007 8031.9111 m
-8032.3955 8032.1846 -8032.9009 8032.9307 -8033.0234 8033.7617 C
-8033.1265 8033.3789 -8033.0337 8032.9404 -8032.6982 8032.5967 C
-8032.9873 8032.6104 -8033.5361 8033.252 -8033.5215 8033.4082 c
-8033.6729 8031.7529 -8031.7007 8031.9111 Y
f
-8033.5591 8022.4697 m
-8036.8921 8022.377 -8038.5679 8023.6094 -8039.3696 8025.0508 C
-8039.3081 8024.502 -8039.1953 8023.9102 -8038.7422 8023.5146 C
-8039.1035 8023.5029 -8039.8262 8024.1162 -8039.8257 8024.3135 c
-8039.8286 8023.5967 -8039.9321 8021.0234 -8033.3115 8022.2402 c
-8033.5591 8022.4697 l
f
u
u
-8043.0234 7998.709 m
-8043.2856 7998.1953 -8043.0479 7997.6689 -8041.2905 7997.6504 C
-8042.0322 7996.9082 L
-8043.9927 7996.9941 -8044.3423 7998.1777 -8044.1665 7998.7578 c
-8043.9736 7999.3906 -8043.5488 7999.9023 -8043.2085 8000.25 C
-8044.2031 8000.6113 -8044.2505 8001.3916 -8044.0479 8001.79 c
-8043.7729 8002.334 -8043.2998 8002.752 -8042.9487 8003.0176 C
-8043.9448 8003.377 -8043.8623 8004.1133 -8043.6074 8004.457 c
-8043.2856 8004.8906 -8042.8174 8005.2031 -8042.4751 8005.4023 C
-8043.4585 8005.8301 -8043.3022 8006.5234 -8043.0239 8006.8154 c
-8042.6929 8007.166 -8042.2466 8007.3916 -8041.9199 8007.5322 C
-8042.7695 8008.0225 -8042.5537 8008.6318 -8042.2715 8008.8633 c
-8041.9458 8009.1318 -8041.5342 8009.2842 -8041.23 8009.377 C
-8041.9395 8009.9082 -8041.6802 8010.4297 -8041.4014 8010.6074 c
-8041.0698 8010.8174 -8040.6714 8010.9082 -8040.3857 8010.9541 C
-8040.9673 8011.5098 -8040.6768 8011.9482 -8040.4097 8012.0762 c
-8039.9326 8012.3037 -8039.3511 8012.2764 -8039.1768 8012.2813 c
-8038.6343 8012.2959 -8037.8838 8012.125 -8037.4272 8012.0703 c
-8036.3442 8011.9434 -8032.5718 8011.2754 -8030.9023 8011.4385 C
-8031.1704 8011.2285 -8031.1714 8011.2285 v
-8033.1304 8011.041 -8036.0479 8011.4678 -8037.1294 8011.5957 c
-8037.9839 8011.6953 -8039.1182 8011.9951 -8039.9951 8011.7295 c
-8040.2593 8011.6494 -8040.3696 8011.4453 -8039.8906 8011.0215 C
-8039.3135 8011.0732 -8038.5737 8011.002 -8038.1118 8011.0039 c
-8036.9009 8011.0098 -8032.6504 8010.7832 -8030.8311 8011.1895 C
-8031.0986 8010.9209 -8031.0986 8010.9199 v
-8033.2344 8010.4492 -8036.5098 8010.5254 -8037.7202 8010.5186 c
-8038.6758 8010.5137 -8039.9673 8010.6914 -8040.8984 8010.2783 c
-8041.1777 8010.1563 -8041.2729 8009.918 -8040.6953 8009.5166 C
-8040.0615 8009.6602 -8039.2153 8009.6816 -8038.6968 8009.7471 c
-8037.3623 8009.918 -8032.6431 8010.2441 -8030.6929 8010.9375 C
-8030.9502 8010.6064 -8030.9512 8010.6064 v
-8033.2422 8009.7969 -8036.8647 8009.4375 -8038.1992 8009.2656 c
-8039.2529 8009.1309 -8040.7007 8009.1504 -8041.6719 8008.5703 c
-8041.9624 8008.3975 -8042.0352 8008.123 -8041.3481 8007.7578 C
-8040.6704 8007.998 -8039.7578 8008.1328 -8039.2026 8008.2754 c
-8037.7534 8008.6445 -8032.5938 8009.6426 -8030.5361 8010.6689 C
-8030.7754 8010.2695 -8030.7759 8010.2695 v
-8033.1934 8009.0664 -8037.1392 8008.1797 -8038.5879 8007.8105 c
-8039.7314 8007.5186 -8041.3311 8007.3457 -8042.3242 8006.5723 c
-8042.6182 8006.3457 -8042.6626 8006.0352 -8041.8745 8005.7305 C
-8041.1606 8006.082 -8040.1802 8006.3535 -8039.5889 8006.584 c
-8038.0415 8007.1865 -8032.4863 8008.9863 -8030.3564 8010.3984 C
-8030.5654 8009.9258 -8030.5674 8009.9248 v
-8033.0698 8008.2695 -8037.3018 8006.7578 -8038.8486 8006.1543 c
-8040.0703 8005.6777 -8041.8115 8005.2695 -8042.8018 8004.2842 c
-8043.0786 8004.0098 -8043.1006 8003.6846 -8042.3384 8003.4551 C
-8041.5942 8003.9404 -8040.5234 8004.3584 -8039.8926 8004.6895 c
-8038.2446 8005.5518 -8032.2441 8008.2246 -8030.1055 8010.0957 C
-8030.2407 8009.5186 -8030.2417 8009.5186 v
-8032.7559 8007.3281 -8037.2954 8005.127 -8038.9438 8004.2617 c
-8040.2456 8003.5801 -8042.1602 8002.9248 -8043.0815 8001.6709 c
-8043.3135 8001.3555 -8043.2974 8001.0127 -8042.6118 8000.8105 C
-8041.8594 8001.4668 -8040.6641 8002.0762 -8039.9888 8002.5322 c
-8038.27 8003.6953 -8031.9126 8007.377 -8029.8442 8009.7637 C
-8030.1377 8008.9902 -8030.1382 8008.9893 v
-8032.5718 8006.1934 -8037.0825 8003.2842 -8038.8018 8002.1221 c
-8040.1582 8001.2031 -8042.2295 8000.2607 -8043.0234 7998.709 c
f
U
u
-8040.2329 7995.918 m
-8040.7446 7995.6543 -8041.2715 7995.8926 -8041.2905 7997.6504 C
-8042.0313 7996.9082 L
-8041.9473 7994.9473 -8040.7622 7994.5977 -8040.1826 7994.7754 c
-8039.5503 7994.9658 -8039.0386 7995.3916 -8038.6919 7995.7324 C
-8038.3306 7994.7373 -8037.5498 7994.6904 -8037.1504 7994.8906 c
-8036.6064 7995.168 -8036.1895 7995.6406 -8035.9224 7995.9922 C
-8035.5649 7994.9951 -8034.8281 7995.0781 -8034.4834 7995.334 c
-8034.0498 7995.6543 -8033.7368 7996.123 -8033.5376 7996.4648 C
-8033.1113 7995.4824 -8032.4175 7995.6387 -8032.1255 7995.918 c
-8031.7759 7996.248 -8031.5488 7996.6943 -8031.4082 7997.0215 C
-8030.9185 7996.1719 -8030.3086 7996.3877 -8030.0767 7996.6689 c
-8029.8086 7996.9951 -8029.6553 7997.4053 -8029.5649 7997.7109 C
-8029.0327 7997.002 -8028.5103 7997.2607 -8028.3345 7997.5391 c
-8028.1235 7997.8701 -8028.0322 7998.2695 -8027.9858 7998.5537 C
-8027.4312 7997.9727 -8026.9912 7998.2637 -8026.8638 7998.5313 c
-8026.6367 7999.0078 -8026.6655 7999.5898 -8026.6592 7999.7637 c
-8026.6431 8000.3066 -8026.8159 8001.0566 -8026.8696 8001.5137 c
-8026.9966 8002.5957 -8027.6655 8006.3682 -8027.5034 8008.0381 C
-8027.7129 8007.7695 l
-8027.8999 8005.8105 -8027.4727 8002.8926 -8027.3457 8001.8105 c
-8027.2446 8000.957 -8026.9458 7999.8223 -8027.2114 7998.9453 c
-8027.2915 7998.6816 -8027.4946 7998.5703 -8027.9199 7999.0508 C
-8027.8682 7999.6279 -8027.9395 8000.3662 -8027.9375 8000.8281 c
-8027.9302 8002.04 -8028.1567 8006.29 -8027.7524 8008.1094 C
-8028.0195 8007.8428 -8028.0195 8007.8418 v
-8028.4922 8005.7061 -8028.4155 8002.4316 -8028.4214 8001.2207 c
-8028.4272 8000.2646 -8028.25 7998.9736 -8028.6616 7998.043 c
-8028.7847 7997.7637 -8029.0234 7997.668 -8029.4238 7998.2461 C
-8029.2798 7998.8789 -8029.2593 7999.7246 -8029.1929 8000.2441 c
-8029.0225 8001.5781 -8028.6958 8006.2959 -8028.0034 8008.248 C
-8028.3345 8007.9902 -8028.3354 8007.9893 v
-8029.1455 8005.6982 -8029.5039 8002.0762 -8029.6753 8000.7402 c
-8029.8096 7999.6885 -8029.79 7998.2402 -8030.3706 7997.2695 c
-8030.5435 7996.9785 -8030.8174 7996.9053 -8031.1816 7997.5938 C
-8030.9434 7998.2695 -8030.8081 7999.1836 -8030.6665 7999.7383 c
-8030.2969 8001.1865 -8029.2993 8006.3477 -8028.27 8008.4053 C
-8028.6704 8008.166 -8028.6714 8008.166 v
-8029.8745 8005.7471 -8030.7607 8001.8008 -8031.1294 8000.3535 c
-8031.4214 7999.209 -8031.5962 7997.6094 -8032.3662 7996.6172 c
-8032.5962 7996.3232 -8032.9058 7996.2783 -8033.2114 7997.0664 C
-8032.8594 7997.7793 -8032.5874 7998.7617 -8032.3574 7999.3516 c
-8031.7534 8000.8984 -8029.9546 8006.4541 -8028.5415 8008.585 C
-8029.0161 8008.375 l
-8030.6704 8005.8711 -8032.1826 8001.6387 -8032.7866 8000.0918 c
-8033.2622 7998.8701 -8033.6714 7997.1289 -8034.6558 7996.1387 c
-8034.9312 7995.8623 -8035.2559 7995.8398 -8035.4858 7996.6016 C
-8035.0015 7997.3457 -8034.5825 7998.418 -8034.2529 7999.0469 c
-8033.3887 8000.6953 -8030.7158 8006.6973 -8028.8447 8008.8359 C
-8029.4209 8008.6992 -8029.4214 8008.6992 v
-8031.6128 8006.1846 -8033.8145 8001.6455 -8034.6782 7999.9961 c
-8035.3599 7998.6943 -8036.0161 7996.7793 -8037.2695 7995.8594 c
-8037.5854 7995.627 -8037.9272 7995.6426 -8038.1313 7996.3281 C
-8037.4736 7997.082 -8036.8638 7998.2764 -8036.4072 7998.9512 c
-8035.2441 8000.6709 -8031.5635 8007.0273 -8029.1768 8009.0967 C
-8029.9502 8008.8037 -8029.9512 8008.8018 v
-8032.7471 8006.3682 -8035.6558 8001.8584 -8036.8184 8000.1387 c
-8037.7368 7998.7822 -8038.6802 7996.7119 -8040.2329 7995.918 c
f
U
U
*u
1 D
-7990.0264 8000.0566 m
-7996.5264 8000.0566 L
-7996.1826 8000.4189 -7995.7622 8000.7578 -7995.1777 8001.0332 c
-7995.1978 8001.0234 -7994.3994 8001.1563 -7994.2622 8001.332 c
-7994.0967 8001.541 -7995.7886 8001.582 -7996.6929 8000.5342 C
-7997.3486 8003.709 L
-7997.8135 8004.0273 L
-7997.0918 8000.0977 L
-7997.5249 7999.5703 -7997.8594 7999.002 -7998.3687 7998.5186 C
-7999.0337 8004.6289 L
-7999.29 8004.7754 L
-7998.8286 7998.1475 L
-7999.1104 7997.957 -7999.4424 7997.791 -7999.8486 7997.6621 C
-8000.7119 8005.0225 L
-8000.9482 8005.0078 L
-8000.3369 7997.5322 L
-8000.6729 7997.4609 -8001.0518 7997.4111 -8001.4834 7997.3857 C
-8002.0303 8004.9541 L
-8002.1992 8004.9521 L
-8001.9814 7997.3711 L
-8002.4814 7997.377 -8002.9175 7997.4473 -8003.3042 7997.5674 C
-8003.4155 8004.7061 L
-8003.6338 8004.6689 L
-8003.7935 7997.7549 L
-8004.2998 7997.9863 -8004.7266 7998.3018 -8005.1279 7998.6455 C
-8005.0454 8004.2412 L
-8005.3774 8004.0273 L
-8005.5752 7999.043 L
-8005.9434 7999.377 -8006.3096 7999.7168 -8006.7178 8000.0127 C
-8006.7217 8003.3389 L
-8007.1455 8003.0645 L
-8007.1553 8000.2988 L
-8007.6191 8000.5693 -8008.5854 8001.0098 -8009.4014 8000.8672 C
-8008.1714 8000.543 -8007.7925 8000.3301 -8007.5034 8000.0566 C
-8010.7295 8000.0566 L
-8006.8955 8004.4512 -8000.3394 8008.6865 -7995.3018 8002.0225 C
-7995.1807 8001.8838 -7994.8174 8001.5625 -7994.1255 8001.6475 C
-7990.0264 8001.6475 L
-7990.0264 8002.3672 L
-7993.4834 8002.3672 L
-7993.1318 8002.6777 -7992.8223 8003.4863 -7993.0386 8003.8574 C
-7990.0264 8003.8574 L
-7990.0264 8004.9385 L
-7993.1689 8004.9385 L
-7993.2935 8005.4492 -7993.5439 8005.8857 -7993.8218 8006.3311 C
-7990.0264 8006.3311 L
-7990.0264 8007.9873 L
-7994.7354 8007.9873 L
-7994.9424 8008.4453 -7995.1016 8008.9082 -7995.1768 8009.4121 C
-7990.0264 8009.4121 L
-7990.0264 8010.4922 L
-7995.1714 8010.4922 L
-7995.1074 8010.9834 -7994.9614 8011.4668 -7994.7378 8011.9111 C
-7990.0264 8011.9111 L
-7990.0264 8012.6309 L
-7994.2744 8012.6309 L
-7993.9375 8013.0039 -7992.8535 8013.5938 -7992.9375 8014.0225 C
-7990.0239 8014.0225 L
-7990.0239 8014.4824 L
-7990.3721 8014.4824 L
-7990.3721 8015.6826 L
-7990.0239 8015.6826 L
-7990.0239 8016.1426 L
-7997.9736 8016.1426 L
-7998.4082 8016.4375 -7999.2192 8016.4521 -7999.9897 8016.1426 C
-8003.8564 8016.1426 L
-8004.1162 8016.4609 -8005.1807 8016.5693 -8005.6846 8016.1426 C
-8006.8232 8016.1426 L
-8007.0439 8016.3994 -8007.3174 8016.6387 -8007.6782 8016.8975 C
-7990.0264 8016.8975 L
-7990.0264 8017.3809 L
-8008.8394 8017.3809 L
-8009.1982 8017.5615 -8010.2417 8017.8389 -8011.3774 8017.3809 C
-8021.6406 8017.3809 L
-8021.6406 8027.6494 L
-8021.1826 8028.7861 -8021.4614 8029.8281 -8021.6455 8030.1895 C
-8021.6455 8049 L
-8022.1279 8049 L
-8022.1279 8031.3477 L
-8022.3838 8031.709 -8022.6235 8031.9824 -8022.8794 8032.2031 C
-8022.8794 8033.3418 L
-8022.4536 8033.8457 -8022.5615 8034.9082 -8022.8794 8035.1689 C
-8022.8794 8039.0361 L
-8022.5698 8039.8076 -8022.5854 8040.6182 -8022.8833 8041.0518 C
-8022.8833 8048.998 L
-8023.3394 8048.998 L
-8023.3394 8048.6543 L
-8024.5435 8048.6543 L
-8024.5435 8048.998 L
-8025.0039 8048.998 L
-8025.0039 8046.0879 L
-8025.4287 8046.1738 -8026.0186 8045.0898 -8026.3955 8044.752 C
-8026.3955 8048.9951 L
-8027.1113 8048.9951 L
-8027.1113 8044.2891 L
-8027.5552 8044.0654 -8028.0376 8043.9189 -8028.5298 8043.8555 C
-8028.5298 8048.9951 L
-8029.6138 8048.9951 L
-8029.6138 8043.8496 L
-8030.1143 8043.9248 -8030.5767 8044.085 -8031.0391 8044.29 C
-8031.0391 8048.9951 L
-8032.6958 8048.9951 L
-8032.6958 8045.2041 L
-8033.1362 8045.4824 -8033.5728 8045.7324 -8034.0854 8045.8555 C
-8034.0854 8048.9951 L
-8035.1689 8048.9951 L
-8035.1689 8045.9893 L
-8035.5552 8046.1289 -8036.3486 8045.8945 -8036.6543 8045.543 C
-8036.6543 8048.9951 L
-8037.3794 8048.9951 L
-8037.3794 8044.9014 L
-8037.4634 8044.209 -8037.1382 8043.8457 -8037.0015 8043.7227 C
-8030.3359 8038.6885 -8034.5713 8032.1309 -8038.9658 8028.2959 C
-8038.9658 8031.5244 L
-8038.6919 8031.2344 -8038.48 8030.8555 -8038.1558 8029.625 C
-8038.0127 8030.4414 -8038.4526 8031.4082 -8038.7246 8031.8711 C
-8035.9575 8031.8828 L
-8035.6831 8032.3047 L
-8039.0103 8032.3066 L
-8039.3066 8032.7168 -8039.6455 8033.084 -8039.98 8033.4512 C
-8034.9951 8033.6475 L
-8034.7817 8033.9814 L
-8040.3774 8033.8984 L
-8040.7202 8034.2998 -8041.0361 8034.7266 -8041.2681 8035.2314 C
-8034.3535 8035.3926 L
-8034.3169 8035.6113 L
-8041.4546 8035.7227 L
-8041.5742 8036.1094 -8041.6465 8036.5439 -8041.6514 8037.0449 C
-8034.0688 8036.8262 L
-8034.0688 8036.9951 L
-8041.6362 8037.543 L
-8041.6113 8037.9746 -8041.5615 8038.3545 -8041.4888 8038.6895 C
-8034.0142 8038.0781 L
-8033.9995 8038.3145 L
-8041.3599 8039.1777 L
-8041.2314 8039.585 -8041.0654 8039.916 -8040.8755 8040.1973 C
-8034.2485 8039.7354 L
-8034.3945 8039.9932 L
-8040.5034 8040.6572 L
-8040.0215 8041.168 -8039.4521 8041.502 -8038.9238 8041.9336 C
-8034.9946 8041.2139 L
-8035.3135 8041.6768 L
-8038.4878 8042.334 L
-8037.4409 8043.2373 -8037.4814 8044.9297 -8037.6914 8044.7637 c
-8037.8657 8044.627 -8037.9985 8043.8281 -8037.9897 8043.8486 c
-8038.2656 8043.2637 -8038.6035 8042.8438 -8038.9697 8042.502 C
-8038.9697 8049 L
-8039.4536 8049 L
-8039.4536 8042.085 L
-8040.6582 8041.1377 -8041.9551 8040.5674 -8042.1167 8037.4111 c
-8042.25 8034.8311 -8040.5562 8033.7656 -8039.4497 8032.2871 C
-8039.4497 8027.7441 L
-8040.5767 8026.418 -8041.5225 8024.9912 -8041.9614 8023.1455 C
-8042.8809 8018.3662 -8039.7568 8012.8545 -8034.7959 8012.4863 C
-8034.7183 8012.6133 L
-8039.1494 8013.5352 -8041.8442 8018.6641 -8040.9814 8023.1455 C
-8040.0635 8027.0029 -8036.9395 8029.0234 -8034.5503 8032.1475 C
-8032.8975 8034.5361 -8032.3457 8037.1094 -8033.0806 8039.8652 c
-8033.8545 8042.6133 -8036.25 8043.5977 -8036.5649 8044.5303 c
-8036.8506 8045.375 -8035.6689 8045.7002 -8034.6968 8045.6348 C
-8032.5454 8045.4395 -8031.1602 8042.4922 -8027.3184 8043.7559 c
-8026.2222 8044.1162 -8025.5913 8044.9375 -8025.3042 8045.5469 c
-8025.1104 8045.957 -8023.7241 8045.4395 -8024.9165 8043.2207 C
-8027.8774 8043.0879 -8027.4521 8041.0645 -8027.2026 8041.2109 c
-8025.5015 8042.209 -8024.1826 8040.3047 -8025.1055 8039.2959 c
-8027.2129 8036.9902 -8028.8481 8037.2861 -8030.9248 8033.3174 c
-8033.2095 8028.9521 -8034.2695 8023.0723 -8031.7959 8018.9082 C
-8031.7954 8018.1387 L
-8032.0479 8017.5439 -8032.0249 8017.085 -8032.2134 8016.168 c
-8032.3818 8015.3535 -8032.6689 8015.085 -8032.9575 8014.9121 C
-8033.1304 8014.7969 -8033.5015 8014.9053 -8033.5054 8015.1445 c
-8033.52 8015.7461 -8032.7842 8015.5225 -8032.8271 8015.584 c
-8033.1895 8016.0869 -8033.7329 8015.7295 -8033.8345 8015.377 c
-8033.9648 8014.9287 -8033.6606 8014.5762 -8033.3145 8014.4902 C
-8032.6655 8014.3594 -8032.1968 8014.9277 -8031.9575 8015.457 c
-8031.4365 8016.6074 -8031.4746 8018.252 -8030.2607 8018.8574 c
-8029.4385 8019.2471 -8028.5537 8018.9277 -8027.7271 8018.6328 c
-8024.8296 8017.6016 -8021.3096 8014.082 -8020.2783 8011.1836 c
-8019.9834 8010.3574 -8019.6641 8009.4727 -8020.0537 8008.6494 c
-8020.6606 8007.4375 -8022.3042 8007.4746 -8023.4546 8006.9541 c
-8023.9834 8006.7148 -8024.5513 8006.2461 -8024.4214 8005.5967 C
-8024.3345 8005.25 -8023.9824 8004.9473 -8023.5327 8005.0762 c
-8023.1826 8005.1797 -8022.8242 8005.7227 -8023.3281 8006.084 c
-8023.3882 8006.127 -8023.1655 8005.3906 -8023.7681 8005.4053 c
-8024.0054 8005.4111 -8024.1143 8005.7813 -8023.9995 8005.9541 C
-8023.8257 8006.2422 -8023.5591 8006.5293 -8022.7422 8006.6973 c
-8021.7085 8006.9102 -8021.2578 8006.8535 -8020.5386 8007.2266 C
-8020.1167 8007.2266 L
-8015.9546 8004.7529 -8010.0674 8005.8008 -8005.7095 8008.0977 c
-8005.0527 8008.4551 -8004.4834 8008.8008 -8003.9126 8009.1475 c
-8002.5488 8009.9766 -8000.5542 8012.8857 Y
-8000.1782 8013.332 -7999.9521 8013.7979 -7999.5225 8014.0625 c
-7998.3569 8014.7783 -7996.8184 8013.5215 -7997.8154 8011.8193 c
-7997.9614 8011.5703 -7995.9385 8011.1455 -7995.8057 8014.1064 C
-7993.5874 8015.2988 -7993.0698 8013.9121 -7993.4795 8013.7178 c
-7994.0889 8013.4316 -7994.9087 8012.7998 -7995.2705 8011.7041 c
-7996.5342 8007.8623 -7993.3599 8006.0234 -7993.4463 8004.3262 C
-7993.3008 8003.5322 -7993.6514 8002.1719 -7994.4961 8002.459 c
-7995.4282 8002.7725 -7996.4126 8005.168 -7999.1606 8005.9414 c
-8001.9175 8006.6768 -8004.4897 8006.125 -8006.8774 8004.4717 C
-8010.0034 8002.084 -8012.0234 7998.959 -8015.8818 7998.041 C
-8020.3623 7997.1777 -8025.4902 7999.873 -8026.4126 8004.3037 C
-8026.5391 8004.2266 L
-8026.1729 7999.2656 -8020.6592 7996.1426 -8015.8818 7997.0615 C
-8014.0361 7997.502 -8012.6104 7998.4453 -8011.2822 7999.5723 C
-8006.7393 7999.5723 L
-8005.2607 7998.4668 -8004.1943 7996.7725 -8001.6143 7996.9053 c
-7998.4585 7997.0664 -7997.8882 7998.3633 -7996.9409 7999.5723 C
-7990.0264 7999.5723 L
-7990.0264 8000.0566 L
f
0 D
-8019.1362 8009.4121 m
-8011.5166 8009.4121 L
-8012.5635 8008.8301 -8013.5435 8008.3184 -8014.8057 8007.9873 C
-8019.6079 8007.9873 L
-8019.2998 8008.3809 -8019.1055 8008.8701 -8019.1362 8009.4121 C
f
-8020.0591 8011.9111 m
-8008.5254 8011.9111 L
-8008.6338 8011.6201 -8009.0063 8010.9404 -8009.8042 8010.4922 C
-8019.4321 8010.4922 L
-8019.6118 8010.9727 -8019.8232 8011.4463 -8020.0591 8011.9111 C
f
-8008.8096 8014.0225 m
-8008.3174 8013.4395 -8008.2568 8013.2207 -8008.3857 8012.6309 C
-8020.4521 8012.6309 L
-8020.7295 8013.1074 -8021.0322 8013.5723 -8021.3599 8014.0225 C
-8013.2568 8014.0225 L
-8012.9111 8013.2041 -8012.1665 8013.3711 -8011.8218 8014.0225 C
-8008.8096 8014.0225 L
f
-8010.1201 8014.4824 m
-8010.1201 8014.8242 L
-8009.5664 8014.7861 -8009.4995 8014.752 -8009.1982 8014.4824 C
-8010.1201 8014.4824 L
f
-8011.4863 8014.4824 m
-8011.3311 8014.6719 -8011.0264 8014.8154 -8010.8257 8014.8457 C
-8010.8257 8014.4824 L
-8011.4863 8014.4824 L
f
-8014.3535 8014.4824 m
-8014.3535 8015.6826 L
-8013.6465 8015.6826 L
-8013.6465 8014.4824 L
-8014.3535 8014.4824 L
f
-8015.7622 8014.4824 m
-8015.7622 8015.6826 L
-8015.0576 8015.6826 L
-8015.0576 8014.4824 L
-8015.7622 8014.4824 L
f
-8017.1729 8014.4824 m
-8017.1729 8015.6826 L
-8016.4678 8015.6826 L
-8016.4678 8014.4824 L
-8017.1729 8014.4824 L
f
-8018.5835 8014.4824 m
-8018.5835 8015.6826 L
-8017.8774 8015.6826 L
-8017.8774 8014.4824 L
-8018.5835 8014.4824 L
f
-8019.9946 8014.4824 m
-8019.9946 8015.6826 L
-8019.2886 8015.6826 L
-8019.2886 8014.4824 L
-8019.9946 8014.4824 L
f
-8025 8025.7695 m
-8025 8017.6504 L
-8025.4497 8017.9756 -8025.9146 8018.2754 -8026.3911 8018.5449 C
-8026.3911 8030.6406 L
-8025.8018 8030.7695 -8025.5825 8030.709 -8025 8030.2158 C
-8025 8027.2041 L
-8025.6514 8026.8613 -8025.8169 8026.1152 -8025 8025.7695 C
f
-8024.5391 8025.3799 m
-8023.3394 8025.3799 L
-8023.3394 8024.6748 L
-8024.5391 8024.6748 L
-8024.5391 8025.3799 L
f
-8023.3394 8023.9688 m
-8023.3394 8023.2637 L
-8024.5391 8023.2637 L
-8024.5391 8023.9688 L
-8023.3394 8023.9688 L
f
-8023.3394 8022.5586 m
-8023.3394 8021.8535 L
-8024.5391 8021.8535 L
-8024.5391 8022.5586 L
-8023.3394 8022.5586 L
f
-8023.3394 8021.1484 m
-8023.3394 8020.4434 L
-8024.5391 8020.4434 L
-8024.5391 8021.1484 L
-8023.3394 8021.1484 L
f
-8023.3394 8019.7373 m
-8023.3394 8019.0313 L
-8024.5391 8019.0313 L
-8024.5391 8019.7373 L
-8023.3394 8019.7373 L
f
-8023.3394 8018.3262 m
-8023.3394 8017.6201 L
-8024.5391 8017.6201 L
-8024.5391 8018.3262 L
-8023.3394 8018.3262 L
f
-8023.3394 8016.918 m
-8023.3394 8016.2725 L
-8023.5728 8016.4941 -8023.8135 8016.709 -8024.0591 8016.918 C
-8023.3394 8016.918 L
f
-8021.4058 8015.6826 m
-8020.6992 8015.6826 L
-8020.6992 8014.4824 L
-8021.4058 8014.4824 L
-8021.4058 8015.6826 L
f
-8022.7495 8015.6826 m
-8022.1094 8015.6826 L
-8022.1094 8014.9746 L
-8022.3159 8015.2158 -8022.5288 8015.4521 -8022.7495 8015.6826 C
f
-8028.5298 8019.5273 m
-8028.5298 8029.2227 L
-8028.0815 8030.0186 -8027.4014 8030.3926 -8027.1113 8030.502 C
-8027.1113 8018.9258 L
-8027.5762 8019.1563 -8028.0488 8019.3564 -8028.5298 8019.5273 C
f
-8031.0352 8019.209 m
-8031.0352 8024.2207 L
-8030.7041 8025.4844 -8030.1929 8026.4629 -8029.6094 8027.5098 C
-8029.6094 8019.7725 L
-8030.1606 8019.7705 -8030.6494 8019.5439 -8031.0352 8019.209 C
f
-8023.3394 8047.2441 m
-8024.5391 8047.2441 L
-8024.5391 8047.9482 L
-8023.3394 8047.9482 L
-8023.3394 8047.2441 L
f
-8023.3394 8045.834 m
-8024.3896 8045.834 L
-8024.4375 8045.8838 -8024.4878 8045.9297 -8024.5391 8045.9678 C
-8024.5391 8046.5381 L
-8023.3394 8046.5381 L
-8023.3394 8045.834 L
f
-8023.3394 8044.4209 m
-8024.0039 8044.4209 L
-8023.9702 8044.6475 -8023.9595 8044.9121 -8024.0137 8045.1279 C
-8023.3394 8045.1279 L
-8023.3394 8044.4209 L
f
-8023.3394 8043.0117 m
-8024.5015 8043.0117 L
-8024.3872 8043.2461 -8024.2798 8043.4814 -8024.1919 8043.7168 C
-8023.3394 8043.7168 L
-8023.3394 8043.0117 L
f
-8023.3394 8041.9033 m
-8023.4614 8042.0625 -8023.5938 8042.2197 -8023.6753 8042.3066 C
-8023.3394 8042.3066 L
-8023.3394 8041.9033 L
f
-8023.4399 8026.4395 m
-8023.6968 8026.2891 -8025.0845 8025.8135 -8025.0737 8026.5381 c
-8025.0674 8026.9502 -8024.4512 8027.2412 -8024.2495 8027.4473 c
-8023.6338 8028.0703 -8023.1885 8029.5254 -8024.2974 8030.4238 c
-8026.6328 8032.3145 -8028.1865 8030.5879 Y
-8032.1118 8026.7324 -8032.1104 8021.1113 Y
-8033.2295 8025.334 -8031.9663 8030.3936 -8030.4048 8033.1426 c
-8027.8818 8037.584 -8026.9575 8036.0566 -8024.6113 8038.9482 c
-8023.8047 8039.9434 -8024.1294 8042.3818 -8026.9546 8041.75 c
-8027.2026 8041.6934 -8026.7759 8042.2949 -8026.2681 8042.5498 c
-8024.1104 8043.6406 -8022.8618 8041.1631 -8023.1338 8039.8594 c
-8023.4761 8038.2109 -8024.0986 8037.3662 -8026.1616 8036.2246 C
-8025.8311 8036.2373 -8024.2134 8036.541 -8023.2295 8035.0088 c
-8023.0195 8034.6826 -8022.8745 8033.7578 -8023.3042 8033.877 c
-8023.3906 8033.9023 -8023.6416 8034.1973 -8023.9414 8034.3613 c
-8025.9321 8035.3945 -8026.7075 8033.0137 Y
-8024.4165 8032.8418 -8023.7515 8032.7637 -8022.2559 8030.7637 c
-8022.0542 8030.4941 -8021.1162 8027.8047 -8023.4399 8026.4395 c
f
-8024.5391 8033.1367 m
-8024.5391 8034.0225 L
-8024.2993 8033.998 -8023.9302 8033.957 -8023.3394 8033.4033 C
-8023.3394 8033.1367 L
-8024.5391 8033.1367 L
f
-8025.9946 8033.2305 m
-8025.8042 8033.7031 -8025.4185 8033.9473 -8025 8034.0127 C
-8025 8033.1709 L
-8025.3857 8033.2354 -8025.9946 8033.2305 Y
f
-8023.3394 8036.666 m
-8023.3394 8035.959 L
-8023.6382 8035.959 L
-8023.9136 8036.1475 -8024.2246 8036.293 -8024.5391 8036.3818 C
-8024.5391 8036.666 L
-8023.3394 8036.666 L
f
-8023.9897 8037.3682 m
-8023.7935 8037.5342 -8023.5576 8037.7813 -8023.3394 8038.1084 C
-8023.3394 8037.3682 L
-8023.9897 8037.3682 L
f
-8025.2495 8036.4746 m
-8025.1914 8036.5273 -8025.1025 8036.5967 -8025 8036.6719 C
-8025 8036.4668 L
-8025.0835 8036.4746 -8025.1675 8036.4785 -8025.2495 8036.4746 C
f
-8024.5391 8028.9063 m
-8024.5391 8029.8262 L
-8024.2715 8029.5273 -8024.2358 8029.46 -8024.1982 8028.9063 C
-8024.5391 8028.9063 L
f
-8024.1758 8028.2012 m
-8024.2065 8028.002 -8024.3506 8027.6943 -8024.5391 8027.54 C
-8024.5391 8028.2012 L
-8024.1758 8028.2012 L
f
-8012.1865 8016.8975 m
-8012.4233 8016.6943 -8012.6401 8016.4463 -8012.8271 8016.1426 C
-8022.8794 8016.1426 L
-8022.8794 8026.1992 L
-8022.5762 8026.3857 -8022.3271 8026.6025 -8022.1255 8026.8408 C
-8022.1265 8016.8975 L
-8012.1865 8016.8975 L
f
-8005.6226 8015.6826 m
-8005.0698 8015.0928 -8005.0298 8014.7227 -8005.0034 8014.4824 C
-8005.8887 8014.4824 L
-8005.8887 8015.6826 L
-8005.6226 8015.6826 L
f
-8005.8564 8014.0225 m
-8005.0127 8014.0225 L
-8005.0791 8013.6045 -8005.3232 8013.2188 -8005.7959 8013.0273 C
-8005.7915 8013.6367 -8005.8564 8014.0225 V
f
-8002.3623 8014.4824 m
-8002.6455 8014.4824 L
-8002.7334 8014.7979 -8002.8799 8015.1084 -8003.0674 8015.3838 C
-8003.0674 8015.6826 L
-8002.3623 8015.6826 L
-8002.3623 8014.4824 L
f
-8002.3545 8014.0225 m
-8002.4302 8013.9199 -8002.4995 8013.8311 -8002.5518 8013.7734 C
-8002.5479 8013.8555 -8002.5518 8013.9395 -8002.5601 8014.0225 C
-8002.3545 8014.0225 L
f
-8000.9185 8015.6826 m
-8001.2446 8015.4648 -8001.4912 8015.2305 -8001.6577 8015.0332 C
-8001.6577 8015.6826 L
-8000.9185 8015.6826 L
f
-7996.7202 8015.3477 m
-7996.8066 8015.4287 -7996.9639 8015.5615 -7997.1226 8015.6826 C
-7996.7202 8015.6826 L
-7996.7202 8015.3477 L
f
-7996.4751 8012.7549 m
-7996.7329 8012.2461 -7997.0913 8011.8945 -7997.2778 8012.0684 c
-7997.4248 8012.2041 -7996.4424 8013.9434 -7997.9009 8014.7725 c
-7998.7158 8015.2354 -7999.8721 8014.873 -8000.2842 8014.3066 c
-8002.5615 8011.1836 -8002.4746 8010.5586 -8005.8848 8008.6172 c
-8008.6318 8007.0537 -8013.6943 8005.793 -8017.9155 8006.9121 C
-8012.2935 8006.9102 -8008.4385 8010.8359 V
-8006.7119 8012.3906 -8008.6025 8014.7246 v
-8009.5015 8015.834 -8010.9551 8015.3887 -8011.5791 8014.7734 c
-8011.7842 8014.5703 -8012.0752 8013.9551 -8012.4873 8013.9482 c
-8013.2134 8013.9385 -8012.7378 8015.3242 -8012.5874 8015.582 c
-8011.2217 8017.9063 -8008.5322 8016.9678 -8008.2622 8016.7656 c
-8006.2622 8015.2705 -8006.1846 8014.6064 -8006.0127 8012.3145 C
-8003.6328 8013.0898 -8004.6655 8015.0801 v
-8004.8286 8015.3809 -8005.1245 8015.6318 -8005.1489 8015.7178 c
-8005.2695 8016.1475 -8004.3423 8016.0029 -8004.0176 8015.7949 c
-8002.4858 8014.8086 -8002.7881 8013.1914 -8002.8018 8012.8613 C
-8001.6602 8014.9248 -8000.8154 8015.5469 -7999.1675 8015.8887 c
-7997.8633 8016.1602 -7995.3857 8014.9121 -7996.4751 8012.7549 c
f
-7995.3096 8014.8301 m
-7995.5454 8014.7422 -7995.7817 8014.6357 -7996.0142 8014.5215 C
-7996.0142 8015.6826 L
-7995.3096 8015.6826 L
-7995.3096 8014.8301 L
f
-7993.8994 8015.0088 m
-7994.1143 8015.0625 -7994.3794 8015.0518 -7994.6055 8015.0186 C
-7994.6055 8015.6826 L
-7993.8994 8015.6826 L
-7993.8994 8015.0088 L
f
-7991.7822 8015.6826 m
-7991.0767 8015.6826 L
-7991.0767 8014.4824 L
-7991.7822 8014.4824 L
-7991.7822 8015.6826 L
f
-7993.1934 8015.6826 m
-7992.4878 8015.6826 L
-7992.4878 8014.4824 L
-7993.0586 8014.4824 L
-7993.0967 8014.5342 -7993.1426 8014.585 -7993.1934 8014.6328 C
-7993.1934 8015.6826 L
f
*U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed 3)0 A
u
u
0 J 0 j 1 w 4 M []0 d0 XR
-4176.5 4176.291 m
-4077.5696 4176.291 L
-4077.5696 4159.9272 L
-4176.5 4159.9272 L
-4176.5 4176.291 L
n
u
u
0 O
0 0 0 1 k
-4080.0071 4165.6094 m
-4079.7832 4165.5537 -4079.5879 4165.8643 -4079.6721 4166.0039 C
-4079.2161 4165.6274 -4079.2063 4166.0557 -4079.1472 4165.3262 C
-4078.8545 4164.9683 -4078.5422 4165.4639 -4078.8752 4165.7598 C
-4078.0313 4165.3135 L
-4078.5359 4165.1997 L
-4078.3984 4164.5933 -4077.7295 4165.3809 -4077.5696 4164.6743 C
-4078.4832 4164.7334 L
-4078.4375 4164.5313 L
-4078.6455 4164.749 -4079.0496 4164.6582 -4079.1904 4164.5732 C
-4079.1682 4164.4736 -4079.1824 4164.3115 -4079.0212 4164.2935 C
-4080.1243 4164.2471 -4079.3184 4165.3545 -4080.2336 4165.5557 C
-4080.1763 4165.541 -4080.1052 4165.5493 -4080.0071 4165.6094 C
f
-4080.9441 4164.125 m
-4081.3289 4164.8853 L
-4081.9744 4164.6895 L
-4081.9817 4164.9517 -4082.4519 4165.1641 -4082.1335 4165.3955 C
-4082.0713 4165.3545 -4081.9482 4165.2759 -4081.8489 4165.2998 C
-4081.9209 4165.8672 -4082.7073 4165.583 -4082.5176 4166.1572 C
-4082.0071 4166.0068 -4081.9287 4166.1318 -4081.6145 4165.6709 C
-4081.1465 4165.7236 -4080.8057 4165.8545 -4080.5872 4166.0615 C
-4080.4482 4165.9751 -4080.4287 4165.6274 -4080.2522 4165.5576 C
-4080.2913 4165.5664 -4080.3271 4165.5752 -4080.3721 4165.5796 C
-4080.3911 4164.7261 L
-4080.5383 4164.9063 -4080.6775 4164.8213 -4080.8408 4164.8389 C
-4080.0852 4163.8423 L
-4080.3289 4163.0435 -4081.0713 4163.5127 -4081.3679 4163.1807 C
-4081 4163.8984 -4081.6609 4163.5376 -4080.9441 4164.125 C
f
-4080.2522 4165.5576 m
-4080.2473 4165.5576 -4080.2393 4165.5566 -4080.2336 4165.5557 C
-4080.2393 4165.5566 -4080.2473 4165.5566 -4080.2522 4165.5576 C
f
-4136.707 4170.5225 m
-4136.8682 4170.5376 -4136.915 4170.7393 -4136.9385 4170.8408 C
-4135.1299 4170.8247 L
-4135.1865 4170.6006 -4135.707 4170.3232 -4135.3594 4170.1895 C
-4135.5146 4169.9414 -4135.9873 4170.1533 -4136.0557 4170.4561 C
-4135.9248 4170.1143 L
-4136.3418 4170.5518 -4136.626 4169.6919 -4136.3545 4169.4336 C
-4136.3896 4169.4385 L
-4137.5439 4171.123 L
-4137.1201 4171.2212 -4137.2178 4170.5435 -4136.707 4170.5225 C
f
-4173.8564 4169.665 m
-4173.6221 4169.5869 -4173.5938 4169.5059 -4173.6201 4169.4229 C
-4173.7041 4169.4854 -4173.7842 4169.5576 -4173.8564 4169.665 C
f
-4137.8135 4171.5181 m
-4138.1753 4172.0454 L
-4138.0303 4171.9033 -4137.9033 4171.7139 -4137.8135 4171.5181 C
f
-4135.3086 4163.499 m
-4135.3081 4163.4712 -4135.3042 4163.4463 -4135.3135 4163.4087 C
-4135.4761 4163.6782 L
-4135.4736 4163.6782 -4135.4727 4163.6782 -4135.4717 4163.6782 C
-4135.4121 4163.6187 -4135.3584 4163.5591 -4135.3086 4163.499 C
f
-4146.0215 4173.499 m
-4146.0601 4173.5127 -4146.0938 4173.5181 -4146.1396 4173.5356 C
-4146.0967 4173.5313 -4146.0576 4173.5176 -4146.0215 4173.499 C
f
-4130.4087 4160.4854 m
-4131.2129 4160.9927 L
-4131.1055 4160.7524 -4131.4937 4160.8247 -4131.3242 4160.5449 C
-4131.3857 4160.583 -4131.6729 4160.6782 -4131.5947 4160.8013 C
-4131.4307 4160.7856 L
-4131.8545 4161.4854 -4131.5977 4161.7544 -4132.3008 4162.2871 C
-4131.8643 4162.7017 -4131.6729 4162.3223 -4131.4414 4162.0039 C
-4131.3633 4161.9551 -4131.2979 4161.9336 -4131.2314 4161.9072 C
-4130.5625 4160.9292 L
-4130.4087 4160.4854 L
f
-4162.6504 4165.6934 m
-4162.6416 4165.6392 L
-4162.6494 4165.6582 -4162.6514 4165.6763 -4162.6504 4165.6934 C
f
-4162.6064 4165.415 m
-4162.6416 4165.6392 L
-4162.5986 4165.5269 -4162.4326 4165.4199 -4162.6064 4165.415 C
f
-4137.6807 4171.0654 m
-4137.6919 4171.1953 -4137.7383 4171.3545 -4137.8135 4171.5181 C
-4137.5439 4171.123 L
-4137.582 4171.1152 -4137.6328 4171.0879 -4137.6807 4171.0654 C
f
-4137.0674 4169.5376 m
-4136.3896 4169.4385 L
-4136.1396 4169.0752 L
-4136.3994 4169.2124 -4136.7021 4169.3062 -4137.0674 4169.5376 C
f
-4144.9512 4173.9102 m
-4146.3545 4174.0176 -4144.6064 4173.0869 -4145.251 4172.8887 C
-4145.6406 4172.9854 -4145.7783 4173.3765 -4146.0215 4173.499 C
-4144.9082 4173.165 -4146.1719 4174.7856 -4145.0498 4174.5791 C
-4145.209 4175.2856 -4145.8594 4175.3496 -4146.2402 4175.1582 C
-4146.6709 4174.4771 -4145.8633 4174.6592 -4145.7656 4173.9912 C
-4146.2158 4174.1021 -4146.1367 4174.2261 -4146.3281 4174.6064 C
-4147.0352 4174.4478 -4147.791 4175.4429 -4148.2139 4174.499 C
-4148.7256 4174.6494 -4148.6919 4174.9751 -4148.9863 4175.334 C
-4149.0449 4176.063 -4148.2246 4175.7168 -4148.0352 4176.291 C
-4148.0742 4176.2295 -4148.1514 4176.1064 -4148.1289 4176.0039 C
-4147.6865 4176.1572 L
-4148.1064 4175.9033 -4147.6279 4175.4287 -4147.4033 4175.3716 C
-4147.2402 4175.3564 -4146.915 4175.3232 -4146.96 4175.5254 C
-4147.207 4175.6816 L
-4146.8887 4175.9126 -4146.5049 4175.1504 -4146.1689 4175.5454 C
-4146.1514 4175.709 -4146.2783 4175.7856 -4146.2979 4175.8877 C
-4145.9209 4175.3896 -4145.5576 4175.4185 -4145 4175.0664 C
-4145.3232 4175.7896 L
-4144.877 4174.9893 -4143.8672 4175.2168 -4143.167 4175.6392 C
-4143.2451 4175.5166 -4143.3848 4175.4307 -4143.3008 4175.291 C
-4142.8896 4175.1182 -4142.5791 4175.6143 -4142.7695 4175.9951 C
-4142.3682 4175.3955 -4141.2393 4176.5 -4140.6919 4175.7207 C
-4138.1753 4172.0454 L
-4138.2695 4172.1377 -4138.3701 4172.2124 -4138.4746 4172.2437 C
-4138.7031 4171.6094 -4138.8262 4171.6865 -4138.4258 4171.0879 C
-4138.8193 4171.4238 -4138.6689 4171.9336 -4139.2598 4171.96 C
-4139.0283 4171.6406 -4138.9697 4170.9121 -4139.5361 4170.8369 C
-4140.9521 4171.4712 -4141.8906 4173.2759 -4143.2129 4174.1982 C
-4143.2617 4173.709 -4144.2998 4173.8462 -4144.8047 4173.7314 C
-4144.6123 4173.2061 -4144.2373 4173.0566 -4143.8486 4172.9502 C
-4144.0928 4172.917 -4144.5127 4172.9033 -4144.8242 4172.8799 C
-4144.9512 4173.9102 L
f
-4141.6631 4172.2661 m
-4141.6982 4172.2227 -4141.7354 4172.1982 -4141.7725 4172.1753 C
-4141.7529 4172.2158 -4141.7197 4172.2471 -4141.6631 4172.2661 C
f
-4143.7305 4172.9648 m
-4143.7256 4172.9473 -4143.7275 4172.9326 -4143.7256 4172.9126 C
-4143.7666 4172.9238 -4143.8071 4172.9385 -4143.8486 4172.9502 C
-4143.8071 4172.9541 -4143.7598 4172.96 -4143.7305 4172.9648 C
f
-4138.0127 4169.9604 m
-4137.9287 4169.8213 -4137.8662 4169.7822 -4137.7822 4169.6416 C
-4137.834 4169.6895 -4137.8994 4169.7271 -4137.9619 4169.7695 C
-4138.0215 4169.8354 -4138.0498 4169.9014 -4138.0127 4169.9604 C
f
-4137.7295 4170.8213 m
-4137.7744 4171.0225 L
-4137.7383 4171.0449 -4137.7129 4171.0493 -4137.6807 4171.0654 C
-4137.6709 4170.957 -4137.6816 4170.8662 -4137.7295 4170.8213 C
f
-4150.3135 4169.4873 m
-4150.4482 4169.5933 L
-4150.3672 4169.5854 -4150.332 4169.542 -4150.3135 4169.4873 C
f
-4146.5146 4173.0796 m
-4146.0264 4173.0313 -4146.4561 4172.3496 -4145.7656 4172.3462 C
-4145.9683 4172.3013 L
-4145.4727 4171.9893 -4144.6025 4172.1328 -4144.0137 4172.1064 C
-4144.0801 4172.3984 -4143.6567 4172.4604 -4143.7256 4172.9126 C
-4143.3232 4172.8062 -4142.9248 4172.7061 -4142.7178 4172.2393 C
-4142.4683 4172.3926 -4142.0898 4171.9824 -4141.7725 4172.1753 C
-4141.9063 4171.9019 -4141.3213 4171.2515 -4142.0928 4171.5854 C
-4142.0303 4171.5479 -4142.0693 4171.4854 -4142.0078 4171.4473 C
-4142.5049 4171.0664 -4142.7041 4171.7124 -4143.1318 4171.7212 C
-4143.3877 4171.4517 -4142.7139 4171.2856 -4142.9551 4171.1782 C
-4143.4893 4171.4292 -4144.6318 4170.8535 -4144.5967 4171.8677 C
-4144.9854 4171.9395 -4145.0391 4171.7158 -4145.1553 4171.5303 C
-4145.7705 4172.6108 -4147.4385 4171.0664 -4147.4326 4172.4478 C
-4147.208 4172.3936 -4146.8423 4172.4229 -4146.5127 4172.1274 C
-4146.5146 4173.0796 L
f
-4138.832 4170.0313 m
-4138.8623 4170.0254 -4138.9023 4170.0303 -4138.9272 4170.0181 C
-4138.8994 4170.0254 -4138.8643 4170.0303 -4138.832 4170.0313 C
f
*u
1 D
-4132.6738 4174.0356 m
-4132.8779 4174.9395 L
-4134.04 4175.1553 -4134.46 4174.9014 -4135.4761 4174.9375 C
-4135.5537 4174.8135 -4135.4307 4174.7349 -4135.3682 4174.6953 C
-4136.082 4174.7998 -4137.1514 4174.6104 -4137.6709 4175.0254 C
-4137.8984 4175.0181 -4138.4951 4174.7314 -4138.2695 4174.4648 C
-4138.3799 4174.5454 -4138.5063 4174.623 -4138.6338 4174.5942 C
-4138.667 4174.2695 -4138.3486 4174.5015 -4138.3418 4174.2349 C
-4138.4424 4174.2134 -4138.4814 4174.1504 -4138.5049 4174.2524 C
-4138.335 4173.9736 -4138.6807 4173.1509 -4137.8896 4173.1719 C
-4137.583 4173.9307 -4138.4385 4173.2598 -4138.2578 4174.0967 C
-4137.9951 4174.1021 -4138.0254 4173.7783 -4138.0029 4173.6763 C
-4137.6689 4173.6953 -4137.6777 4173.9053 -4137.6953 4174.0967 C
-4137.5674 4173.8369 -4137.1465 4174.1982 -4136.9697 4173.8037 C
-4136.3193 4173.7393 -4137.0049 4174.4326 -4136.5801 4174.4229 C
-4136.335 4173.5752 L
-4135.6289 4173.7349 L
-4134.6064 4173.4375 -4135.7754 4172.2705 -4134.6064 4171.791 C
-4134.7598 4172.2334 -4134.291 4172.9766 -4133.7471 4173.1533 C
-4134.0728 4173.1846 -4134.6743 4173.7373 -4135.0947 4173.4854 C
-4134.502 4174.1494 -4135.9097 4173.5654 -4135.6025 4174.3252 C
-4135.3096 4173.9648 -4134.8213 4173.917 -4134.4409 4174.1108 C
-4134.5654 4174.1895 L
-4134.1611 4174.2793 -4133.8545 4173.3926 -4133.2959 4173.7314 C
-4133.0186 4173.7041 -4133.0703 4173.9429 -4133.1191 4174.1416 C
-4132.8843 4174.0142 -4132.6743 4173.8486 -4132.6738 4174.0356 C
f
0 D
-4133.2783 4174.2134 m
-4133.6494 4174.1294 L
-4133.5615 4174.2695 -4133.4229 4174.2646 -4133.2783 4174.2134 C
f
*U
-4086.1377 4164.2349 m
-4086.1008 4164.2573 -4086.0583 4164.2803 -4086.0249 4164.3037 C
-4086.0496 4164.2646 -4086.0923 4164.2471 -4086.1377 4164.2349 C
f
-4119.0967 4163.9102 m
-4118.8818 4163.9385 L
-4118.9658 4163.9092 -4119.0342 4163.9053 -4119.0967 4163.9102 C
f
-4114.2695 4161.1104 m
-4113.9551 4160.9126 L
-4114.0791 4160.9253 -4114.1763 4161.0039 -4114.2695 4161.1104 C
f
-4088.7024 4164.1768 m
-4088.7129 4164.1709 L
-4088.7305 4164.1846 -4088.7439 4164.2041 -4088.7625 4164.2158 C
-4088.7024 4164.1768 L
f
-4104.5869 4163.0933 m
-4104.5391 4163.165 -4104.4854 4163.23 -4104.4121 4163.2803 C
-4104.4209 4163.1963 -4104.4863 4163.1353 -4104.5869 4163.0933 C
f
-4114.3271 4161.1475 m
-4114.3193 4161.1553 -4114.3145 4161.1572 -4114.3081 4161.1631 C
-4114.2959 4161.1455 -4114.2822 4161.1265 -4114.2695 4161.1104 C
-4114.3271 4161.1475 L
f
-4121.2231 4161.4385 m
-4121.2695 4161.4648 -4121.3115 4161.4854 -4121.3608 4161.5225 C
-4121.2959 4161.5059 -4121.2559 4161.4741 -4121.2231 4161.4385 C
f
-4120.9199 4163.8408 m
-4120.9697 4163.8623 -4121.0166 4163.8887 -4121.0537 4163.9253 C
-4120.9199 4163.8408 L
f
-4128.3574 4162.1934 m
-4128.6475 4162.3145 L
-4128.5049 4162.3013 -4128.4199 4162.2544 -4128.3574 4162.1934 C
f
-4121.6865 4163.2856 m
-4121.7031 4163.3252 -4121.7197 4163.3633 -4121.7314 4163.4014 C
-4121.6914 4163.375 -4121.6719 4163.3252 -4121.6865 4163.2856 C
f
-4084.2976 4166.7617 m
-4084.3042 4166.7617 -4084.3113 4166.7646 -4084.3152 4166.7646 C
-4084.3225 4166.8633 L
-4084.2976 4166.7617 L
f
-4083.5935 4165.5269 m
-4083.5105 4165.5015 -4083.4241 4165.479 -4083.3391 4165.457 C
-4083.4336 4165.4517 -4083.5256 4165.4785 -4083.5935 4165.5269 C
f
-4100.3809 4164.457 m
-4100.3042 4164.5796 -4100.124 4164.7261 -4100.208 4164.8662 C
-4100.0615 4164.6895 -4100.0713 4164.2603 -4100.3809 4164.457 C
f
-4085.7092 4172.0664 m
-4085.6631 4171.9517 -4085.6057 4171.8643 -4085.5481 4171.7783 C
-4085.6553 4171.9019 -4085.7493 4172.0039 -4085.7092 4172.0664 C
f
-4085.5481 4171.7783 m
-4085.4951 4171.7173 -4085.4385 4171.6533 -4085.3911 4171.5869 C
-4085.4463 4171.6416 -4085.4993 4171.7061 -4085.5481 4171.7783 C
f
-4102.3311 4171.4912 m
-4102.3506 4171.4336 -4102.3799 4171.3853 -4102.4199 4171.3701 C
-4102.4082 4171.4854 -4102.376 4171.5103 -4102.3311 4171.4912 C
f
-4083.1335 4165.5928 m
-4083.0879 4165.3911 -4081.9817 4164.9517 -4082.9121 4164.8486 C
-4082.8762 4164.2192 -4082.3152 4164.5576 -4082.0671 4164.4019 C
-4082.2473 4164.2544 -4081.9775 4163.998 -4082.0322 4163.7734 C
-4082.1553 4163.8496 -4082.3015 4164.0303 -4082.5049 4163.9854 C
-4082.5984 4163.6982 -4082.2898 4163.5024 -4082.0488 4163.6104 C
-4082.3457 4163.2783 -4081.6721 4163.1118 -4082.0923 4162.8574 C
-4082.9905 4163.0791 -4083.6252 4163.3076 -4084.2568 4164.2261 C
-4083.7449 4164.0752 -4083.1721 4163.8877 -4082.7522 4164.1406 C
-4082.9287 4164.6846 L
-4083.4033 4164.2061 -4083.6963 4164.563 -4084.1631 4164.5127 C
-4083.1145 4164.8013 L
-4082.6233 4165.2544 -4082.9519 4165.3584 -4083.3391 4165.457 C
-4083.2439 4165.4639 -4083.1577 4165.4966 -4083.1335 4165.5928 C
f
-4083.8401 4170.3662 m
-4083.8225 4170.3809 L
-4083.8071 4170.3623 -4083.7881 4170.3496 -4083.7783 4170.3267 C
-4083.8401 4170.3662 L
f
-4128.3042 4173.2017 m
-4128.3945 4173.4077 L
-4128.3193 4173.3145 -4128.2959 4173.2515 -4128.3042 4173.2017 C
f
-4084.4656 4167.7314 m
-4084.4648 4167.7314 L
-4084.4719 4167.7373 -4084.4736 4167.7373 -4084.4656 4167.7314 C
f
-4126.0635 4173.2437 m
-4126.0664 4173.2583 -4126.0693 4173.2744 -4126.0752 4173.291 C
-4126.0674 4173.2744 -4126.0674 4173.2583 -4126.0635 4173.2437 C
f
-4125.4639 4161.5142 m
-4125.4683 4161.4893 -4125.4697 4161.4648 -4125.4795 4161.4404 C
-4125.5273 4161.4712 -4125.5039 4161.4966 -4125.4639 4161.5142 C
f
-4126.0615 4173.1934 m
-4126.0615 4173.21 -4126.0601 4173.2261 -4126.0635 4173.2437 C
-4126.0615 4173.2261 -4126.0576 4173.209 -4126.0615 4173.1934 C
f
-4115.1641 4171.1963 m
-4115.1982 4171.1021 -4115.2529 4171.0127 V
-4115.2734 4171.063 -4115.2529 4171.1221 -4115.1641 4171.1963 C
f
-4117.3154 4170.3911 m
-4117.3154 4170.3911 L
-4117.3291 4170.3711 -4117.3369 4170.3535 -4117.3545 4170.3311 C
-4117.3154 4170.3911 L
f
-4100.8896 4162.0068 m
-4100.9961 4161.999 -4101.0762 4162.0127 -4101.1436 4162.0356 C
-4101.0654 4162.0493 -4100.9814 4162.0479 -4100.8896 4162.0068 C
f
-4126.0752 4173.291 m
-4126.0977 4173.3486 -4126.1299 4173.4077 -4126.1826 4173.4814 c
-4126.124 4173.4033 -4126.0938 4173.3433 -4126.0752 4173.291 C
f
-4111.8843 4168.4478 m
-4111.9072 4168.4692 -4111.9287 4168.4893 -4111.9502 4168.5078 C
-4111.9375 4168.5181 -4111.9238 4168.5225 -4111.9111 4168.5352 C
-4111.8843 4168.4478 L
f
-4110.7617 4168.8486 m
-4110.7998 4168.9102 -4110.8174 4168.9741 -4110.8389 4169.0303 C
-4110.4385 4168.8037 -4109.7021 4169.0493 -4109.6152 4168.4712 C
-4109.751 4168.4854 -4110.4561 4168.1455 -4110.3359 4167.8062 C
-4110.6152 4167.9512 -4111.0283 4167.5454 -4111.1787 4167.6406 C
-4110.7197 4167.957 -4111.1289 4168.1289 -4111.4385 4168.3232 C
-4111.7197 4168.1553 -4111.3857 4167.8584 -4111.6279 4167.7515 C
-4112.2793 4167.8145 L
-4111.7119 4167.8916 L
-4111.8843 4168.4478 L
-4111.8633 4168.4292 -4111.8486 4168.417 -4111.8262 4168.3955 C
-4110.8662 4168.1353 -4111.7451 4169.21 -4110.7617 4168.8486 C
f
-4110.8389 4169.0303 m
-4110.8994 4169.0654 -4110.9521 4169.1079 -4110.9932 4169.167 C
-4110.9023 4169.1582 -4110.8672 4169.1016 -4110.8389 4169.0303 C
f
-4106.917 4169.9478 m
-4106.8682 4169.9292 -4106.8145 4169.9033 -4106.7471 4169.8599 c
-4106.7793 4169.8809 -4106.8535 4169.9077 -4106.917 4169.9478 C
f
-4135.6582 4169.167 m
-4135.6416 4169.3311 -4135.082 4169.6685 -4135.0923 4169.2407 C
-4135.0923 4169.2407 L
-4135.2583 4169.1982 -4135.4258 4169.1533 -4135.5938 4169.1064 C
-4135.6582 4169.167 L
f
-4096.2334 4167.4604 m
-4096.2959 4167.4478 -4096.3584 4167.4429 -4096.4209 4167.4502 C
-4096.4346 4167.4712 -4096.4473 4167.4951 -4096.457 4167.5166 C
-4096.4189 4167.5796 -4096.2959 4167.5015 -4096.2334 4167.4604 C
f
-4110.1631 4167.605 m
-4110.2656 4167.6709 -4110.3115 4167.7383 -4110.3359 4167.8062 C
-4110.2695 4167.7725 -4110.208 4167.7173 -4110.1631 4167.605 C
f
-4096.1982 4168.4785 m
-4096.1191 4168.6006 -4096.002 4168.7871 -4095.9856 4168.9502 C
-4095.8232 4168.9541 -4095.7092 4168.7295 -4095.5439 4168.6494 C
-4095.7305 4168.7119 -4095.9463 4168.6685 -4096.1982 4168.4785 C
f
-4095.5305 4168.6416 m
-4095.5352 4168.6455 -4095.5398 4168.6475 -4095.5439 4168.6494 C
-4095.5393 4168.6494 -4095.5352 4168.644 -4095.5305 4168.6416 C
f
*u
1 D
-4135.9912 4168.9854 m
-4136.0391 4169.0181 -4136.0889 4169.0479 -4136.1396 4169.0752 C
-4136.0625 4168.9604 L
-4136.1914 4168.9185 -4136.3193 4168.8774 -4136.4473 4168.8311 C
-4136.4937 4168.8584 -4136.5439 4168.8843 -4136.6055 4168.8984 C
-4136.5811 4168.8843 -4136.5615 4168.8389 -4136.5498 4168.792 C
-4136.5913 4168.7764 -4136.6318 4168.7593 -4136.6729 4168.7422 C
-4136.9795 4169.1851 -4137.7417 4169.5088 -4137.9619 4169.7695 C
-4138.2529 4169.959 -4138.6089 4170.0664 -4138.832 4170.0313 C
-4138.625 4170.041 -4138.3506 4169.9517 -4138.4326 4169.707 C
-4138.8535 4169.4517 -4139.0576 4168.7173 -4139.7832 4169.3486 C
-4139.3574 4169.3389 L
-4140.3145 4170.2896 L
-4140.6494 4169.8955 -4139.8369 4169.8145 -4139.7041 4169.4727 C
-4140.4482 4169.9414 -4141.0674 4168.6895 -4141.4121 4169.5127 C
-4141.4609 4169.0244 -4141.542 4168.21 -4142.0303 4168.2583 C
-4141.6787 4168.8145 -4142.3232 4168.6157 -4142.0342 4169.2119 C
-4142.2031 4169.4912 -4142.5791 4169.0356 -4142.6074 4169.4014 C
-4142.5615 4169.1992 L
-4143.3955 4168.4263 -4143.668 4169.6377 -4144.0249 4170.0356 C
-4145.0234 4170.2349 -4145.4814 4169.9185 -4146.2959 4170.0015 C
-4146.3281 4169.6743 -4146.5498 4168.7744 -4146.876 4168.8086 C
-4147.0283 4169.2515 -4147.7646 4169.4561 -4147.8398 4170.0225 C
-4147.2559 4170.2598 -4147.3623 4169.5479 -4147.0127 4169.415 C
-4146.7217 4170.0093 -4146.9863 4170.0024 -4146.5889 4170.3584 C
-4146.9097 4170.1274 -4148.0381 4170.6685 -4148.3896 4170.1104 C
-4148.2656 4170.0313 L
-4148.8262 4169.6934 -4148.9336 4168.291 -4149.8682 4169.1396 C
-4150.3135 4169.4873 L
-4150.292 4169.4307 -4150.29 4169.3643 -4150.2783 4169.3135 C
-4151.0078 4169.2544 -4150.8086 4168.6094 -4151.6143 4169.1182 c
-4151.5522 4169.0791 -4151.5913 4169.0166 -4151.5283 4168.9785 C
-4151.9873 4168.6597 -4152.4502 4169.2998 -4152.7979 4169.4336 C
-4153.0098 4168.9604 -4152.7471 4168.9683 -4152.6162 4168.6265 C
-4153.4238 4168.4429 -4154.2959 4169.2544 -4154.7979 4169.8311 C
-4155.3184 4169.5537 L
-4155.0098 4169.3584 -4154.6318 4168.8599 -4154.7266 4168.5742 C
-4155.0127 4168.6685 -4154.957 4168.8926 -4155.3623 4168.8013 C
-4155.293 4168.499 -4155.123 4168.2173 -4154.9326 4167.8369 C
-4155.7705 4167.3311 -4155.1201 4168.9092 -4155.7061 4167.9814 C
-4155.9697 4167.9751 -4156.1221 4168.417 -4156.1514 4168.7822 C
-4156.6279 4168.3037 L
-4156.6807 4168.7695 -4157.2695 4168.7959 -4157.6553 4168.8662 C
-4157.7021 4169.0664 -4157.3447 4169.3623 -4157.1982 4169.1816 C
-4157.2275 4169.5479 -4157.6377 4169.7192 -4157.9014 4169.7124 C
-4157.998 4168.7373 -4159.6299 4169.8535 -4159.3174 4168.7041 C
-4160.5029 4169.021 -4162.1689 4169.1201 -4162.9512 4169.5269 C
-4163.209 4169.2573 -4163.7354 4169.2437 -4163.4199 4168.7856 C
-4164.374 4168.7822 -4164.8662 4169.7832 -4165.8135 4169.5166 C
-4165.8921 4169.394 -4165.3857 4169.5078 -4165.4189 4169.1816 C
-4166.0381 4169.5732 -4166.5459 4168.7695 -4167.5063 4169.0303 C
-4167.3447 4169.0127 -4167.2979 4168.8115 -4167.2754 4168.71 C
-4167.2583 4168.8716 -4167.6689 4169.0454 -4167.917 4169.2017 C
-4168.0566 4169.1182 -4167.7314 4169.0854 -4167.8096 4168.9604 C
-4169.665 4168.4873 -4171.0791 4169.8135 -4172.9248 4169.7695 c
-4172.3975 4169.7822 -4172.1982 4169.1353 -4172.1929 4168.8716 C
-4172.709 4168.8599 L
-4172.9082 4169.1816 -4173.2959 4169.1816 -4173.6201 4169.4229 C
-4173.6602 4169.3013 -4173.8174 4169.1709 -4173.6567 4169.0181 C
-4174.6768 4168.3643 -4175.25 4170.1982 -4176.5 4169.8623 C
-4174.9863 4168.5591 L
-4175.3608 4168.105 L
-4174.6953 4167.5127 L
-4175.0928 4167.1553 -4175.4385 4167.9814 -4175.4863 4167.4912 C
-4175.4023 4167.3535 -4175.2002 4167.3975 -4175.1934 4167.1328 C
-4175.5752 4166.9414 -4175.6055 4167.3062 -4175.8921 4167.4014 C
-4175.1362 4166.4053 -4173.6543 4166.4209 -4172.8564 4166.1768 C
-4172.7314 4166.0977 -4172.9639 4166.417 -4172.9863 4166.5181 C
-4172.6611 4166.4854 -4172.4658 4166.7959 -4172.0557 4166.623 C
-4171.8018 4166.2017 -4172.25 4166.3135 -4172.4521 4166.2695 C
-4172.4238 4165.9033 -4172.3223 4165.9253 -4172.0977 4165.8701 C
-4172.0488 4166.3584 -4170.8633 4166.0435 -4170.5732 4166.6392 C
-4169.3721 4166.4854 -4170.7656 4165.375 -4169.5928 4165.5869 C
-4169.2422 4166.1455 L
-4168.5615 4165.7139 -4167.6807 4165.3311 -4166.9102 4165.4502 C
-4167.0728 4165.4683 L
-4167.1807 4165.707 -4167.002 4165.8545 -4166.9229 4165.9766 C
-4166.3408 4166.2158 -4165.8174 4165.5376 -4165.4648 4166.0967 C
-4164.8008 4165.5024 -4163.6934 4165.063 -4162.9346 4164.7568 C
-4162.7295 4165.4932 -4163.9248 4165.3809 -4164.2407 4165.8413 C
-4163.5498 4165.8389 L
-4163.9766 4165.8486 -4164.1455 4166.1289 -4164.4014 4166.5479 C
-4163.7959 4166.6846 -4163.5967 4166.04 -4163.0225 4165.8535 C
-4163.0674 4166.0537 -4162.9902 4166.1768 -4162.7256 4166.1816 C
-4162.6504 4165.6934 L
-4162.6455 4165.7334 -4162.6162 4165.7705 -4162.5342 4165.8013 C
-4161.5127 4165.5024 L
-4161.7295 4165.2935 -4161.7402 4164.8677 -4162.0039 4164.8623 C
-4161.9097 4165.1475 -4162.1338 4165.2041 -4162.3975 4165.1963 C
-4162.166 4164.8774 -4162.6553 4164.9272 -4162.6494 4164.6631 C
-4162.1201 4164.6763 -4161.4697 4164.6104 -4161.1221 4164.4766 C
-4161.0098 4164.9272 L
-4160.5049 4165.041 -4159.9717 4164.7896 -4159.6299 4164.9209 C
-4159.7373 4165.1597 L
-4159.1318 4165.2979 -4158.5361 4165.0078 -4157.998 4165.4473 C
-4157.458 4164.9326 -4156.7783 4164.5039 -4156.3369 4163.9648 C
-4156.1006 4163.3843 -4154.752 4164.6953 -4154.1436 4163.8774 C
-4154.1025 4163.9395 -4154.5615 4164.3145 -4154.7695 4164.5342 C
-4154.3643 4164.624 -4154.042 4163.9014 -4153.915 4164.5132 C
-4154.8242 4164.3076 -4153.8662 4165.0015 -4154.2759 4165.1753 C
-4153.8506 4165.1641 -4153.4014 4165.0537 -4153.1929 4164.8354 C
-4153.8818 4164.8398 -4152.9482 4163.9893 -4153.6455 4164.2559 C
-4153.1055 4163.7412 -4152.3682 4163.5356 -4151.7241 4163.7349 C
-4151.7305 4163.999 -4151.6514 4164.1221 -4151.4111 4164.2314 C
-4151.2178 4163.8486 L
-4150.916 4163.9185 -4151.7998 4164.3013 -4151.1934 4164.4385 C
-4150.5693 4163.7832 -4149.3145 4164.8096 -4149.041 4163.5977 C
-4148.5654 4164.0767 -4149.9463 4164.083 -4149.2295 4164.6685 C
-4149.6465 4165.1064 -4150.2217 4164.605 -4150.3594 4165.21 C
-4149.9502 4165.0376 -4150.21 4165.7212 -4149.9463 4165.7271 C
-4149.4902 4165.3545 L
-4149.5913 4165.3311 L
-4148.8262 4164.7603 -4147.6143 4165.0342 -4146.6377 4164.9375 C
-4145.8105 4164.3281 -4145.2407 4163.4478 -4144.248 4163.5142 C
-4144.541 4163.8716 -4143.4238 4163.8584 -4144.0488 4164.5132 C
-4143.5898 4164.8286 -4143.1362 4164.4551 -4143.127 4164.1909 C
-4143.5313 4164.1006 -4143.2695 4164.1064 -4143.6094 4163.9766 C
-4143.3799 4163.6563 -4142.8506 4163.6709 -4142.6328 4163.8799 C
-4142.7334 4163.8564 -4142.6953 4163.9185 -4142.7178 4164.0181 C
-4142.2354 4164.2334 -4142.4863 4163.6997 -4142.1377 4163.5664 C
-4142.0273 4164.0142 -4141.3682 4163.6865 -4141.0498 4163.9185 C
-4140.5879 4163.2793 L
-4140.8418 4163.6992 -4140.1455 4163.4326 -4140.0728 4163.8188 C
-4139.7417 4163.5225 -4139.4639 4163.0024 -4138.96 4163.1157 C
-4139.168 4163.3354 -4138.5 4163.4326 -4138.4912 4163.8584 C
-4137.6279 4164.2661 -4137.0615 4162.6963 -4136.2441 4163.3062 C
-4136.2695 4163.4063 -4136.4346 4163.6865 -4136.1953 4163.7935 C
-4136.0068 4163.6743 -4135.6777 4163.7246 -4135.4761 4163.6782 C
-4135.4824 4163.6904 L
-4135.4785 4163.6865 -4135.4761 4163.6816 -4135.4717 4163.6782 C
-4135.373 4163.6553 -4135.3115 4163.6021 -4135.3086 4163.499 C
-4134.9639 4163.082 -4134.7861 4162.6553 -4134.1079 4162.3013 C
-4134.1577 4161.8135 -4134.7305 4162.0024 -4134.9785 4162.1597 C
-4135.1929 4162.6416 L
-4135.3975 4161.9053 -4135.8047 4162.7695 -4135.9609 4162.521 C
-4135.5537 4161.6582 -4134.3818 4161.8701 -4133.6787 4161.3398 C
-4134.1074 4160.6597 -4135.04 4160.5537 -4135.8535 4160.6353 C
-4135.4951 4160.9287 L
-4135.9209 4160.9385 L
-4135.5088 4161.457 L
-4135.9121 4161.3662 -4136.2607 4161.499 -4136.625 4161.4692 C
-4136.1982 4161.46 -4136.0322 4162.1328 -4136.2734 4162.0264 C
-4136.749 4161.5479 -4136.7695 4162.3389 -4137.1328 4162.3096 C
-4136.9307 4162.3545 -4136.667 4162.3623 -4136.8369 4162.6416 C
-4137.5537 4162.0557 -4137.7471 4162.4375 -4138.3994 4161.8115 C
-4138.3184 4162.625 -4139.2139 4161.8926 -4139.3115 4162.5591 C
-4139.0088 4162.6274 L
-4139.6504 4163.1187 L
-4140.2422 4162.4561 -4139.126 4162.4429 -4140.0273 4161.9741 C
-4140.8584 4161.8926 -4140.8369 4162.7471 -4141.4902 4162.8101 C
-4141.2754 4162.3286 -4140.7568 4161.915 -4140.2295 4161.9287 C
-4140.5488 4161.6963 L
-4140.3799 4161.417 -4139.6504 4161.4756 -4139.2861 4161.5044 C
-4139.8877 4162.0576 -4139.0049 4161.6743 -4138.7314 4162.1064 C
-4138.6807 4161.6406 -4139.0674 4161.7139 -4138.6113 4161.3398 C
-4139.0381 4161.3486 -4139.1006 4161.3877 -4139.6445 4161.2119 C
-4138.4697 4161.4238 -4138.5879 4159.5933 -4137.5625 4159.9854 C
-4138.0352 4160.1963 -4137.3975 4160.6582 -4137.3408 4160.8843 C
-4137.1182 4160.8281 -4136.667 4160.7173 -4136.4814 4160.6006 C
-4136.6494 4159.9272 L
-4136.0522 4159.6353 -4135.8447 4161.0625 -4135.1553 4160.3677 C
-4135.0654 4159.9648 -4135.7617 4160.2314 -4135.6377 4160.1533 C
-4134.6943 4159.73 -4134.3545 4160.8145 -4133.5166 4161.3223 C
-4133.4697 4161.1201 -4133.4795 4160.6934 -4133.1865 4160.3369 C
-4133.2783 4160.7412 -4133.0615 4160.9478 -4133.3911 4161.2437 C
-4133.1113 4161.415 -4132.7793 4161.1182 -4132.5322 4160.9604 C
-4133.1152 4160.7236 -4132.2939 4160.3799 -4132.1865 4160.1377 C
-4131.8843 4160.2061 -4132.2783 4160.541 -4132.4639 4160.6582 C
-4132.2217 4160.7661 -4131.9336 4161.3623 -4131.7959 4160.7568 C
-4131.7861 4161.1816 -4132.4736 4161.8774 -4132.9229 4161.9873 C
-4132.6201 4162.0557 L
-4132.8291 4162.2734 -4132.8682 4162.2119 -4133.1689 4162.1455 C
-4132.874 4162.4756 -4132.9033 4162.8398 -4132.9717 4163.1431 C
-4133.0107 4163.0811 -4132.9502 4163.042 -4132.9873 4162.9814 C
-4133.2295 4162.873 -4133.415 4162.9893 -4133.3594 4163.2158 C
-4133.5771 4163.7876 -4133.0234 4163.5732 -4132.8594 4163.8584 C
-4132.7354 4163.8213 -4132.6113 4163.7822 -4132.4893 4163.7437 C
-4131.2314 4161.9072 L
-4130.6934 4161.6934 -4130.4521 4162.1328 -4130.0479 4162.4102 C
-4129.9375 4161.9185 L
-4129.4697 4161.9692 -4129.0283 4162.125 -4129.3281 4162.7471 C
-4129.3447 4162.583 -4129.4063 4162.6221 -4129.5078 4162.5977 C
-4129.5215 4162.665 -4129.5449 4162.7124 -4129.5742 4162.7515 C
-4129.584 4162.7803 -4129.5898 4162.8086 -4129.5977 4162.8369 C
-4129.0967 4162.6782 -4128.7842 4162.5752 -4128.7549 4162.5566 C
-4129.6055 4163.2695 -4128.7979 4163.4478 -4128.9399 4164.3188 C
-4128.0811 4164.0352 L
-4128.6016 4163.7593 -4128.0903 4163.6094 -4127.9053 4163.4912 C
-4127.8545 4163.9814 -4127.2139 4163.4873 -4126.9121 4163.5557 C
-4126.9346 4163.6563 L
-4126.6553 4163.8262 -4126.166 4163.7783 -4125.8184 4163.6455 C
-4125.834 4163.4814 -4125.3877 4162.6807 -4125.1738 4162.1982 C
-4125.7705 4162.0142 -4125.416 4161.8184 -4125.4639 4161.5142 C
-4125.4023 4161.542 -4125.291 4161.5479 -4125.2783 4161.4854 C
-4125.1929 4161.3462 -4125.3945 4161.2998 -4125.4111 4161.1377 C
-4126.0459 4161.3662 -4126.6982 4161.4307 -4126.957 4162.1143 C
-4126.7627 4162.4238 -4126.625 4161.8184 -4126.4072 4162.0254 C
-4126.7217 4162.4854 -4127.127 4162.394 -4127.6543 4162.3809 C
-4127.8271 4161.9712 L
-4128.3574 4162.1934 L
-4128.1362 4161.9766 -4128.2695 4161.5479 -4127.7129 4161.4648 C
-4127.7842 4161.0791 -4128.2646 4161.5537 -4128.6055 4161.4238 C
-4128.7803 4161.9683 L
-4128.7129 4161.665 -4129.4424 4161.6064 -4128.9238 4161.1924 C
-4128.0811 4160.7471 L
-4128.3154 4160.375 L
-4127.6025 4160.2705 L
-4127.7705 4160.5518 L
-4126.625 4160.1753 -4127.4326 4161.6353 -4126.2803 4160.9927 C
-4125.9189 4160.333 -4125.5313 4160.2622 -4124.8247 4160.4229 C
-4125.3359 4160.5703 -4124.877 4160.8877 -4125.0693 4161.2695 C
-4124.5479 4161.5449 -4124.3721 4161.0015 -4124.1016 4160.7437 C
-4123.9688 4161.0923 -4123.874 4161.3774 -4124.3398 4161.3262 C
-4124.3984 4162.0557 -4123.7275 4161.1997 -4123.6846 4161.9512 C
-4122.1416 4161.9287 -4122.4482 4159.5254 -4120.6445 4160.4639 C
-4120.7119 4160.7661 L
-4119.5664 4160.3896 -4118.9053 4160.7515 -4117.8447 4160.5127 C
-4117.0098 4161.2832 L
-4117.1963 4161.4014 -4117.6982 4161.9771 -4117.4639 4162.3486 C
-4117.8701 4161.5688 -4118.3018 4161.8413 -4118.7393 4161.4238 C
-4118.7842 4161.6265 -4118.6055 4161.7725 -4118.5283 4161.8975 C
-4118.792 4161.8896 -4118.9248 4161.541 -4119.2734 4161.6763 C
-4119.2568 4161.8369 -4118.876 4162.0303 -4119.1631 4162.125 C
-4119.6377 4161.6455 L
-4120.2725 4161.874 -4119.9502 4162.7935 -4120.6963 4162.5732 C
-4120.5576 4162.1455 -4120.2744 4161.5264 -4119.9854 4161.4238 C
-4120.3262 4161.3311 -4119.5313 4161.165 -4119.8423 4160.9092 C
-4120.333 4161.5435 -4120.5703 4161.041 -4121.2231 4161.4385 C
-4121.1465 4161.3496 -4121.126 4161.2256 -4120.9658 4161.1865 C
-4121.9131 4160.9185 L
-4121.6787 4161.2896 -4122.6953 4161.3262 -4122.6074 4161.8774 C
-4121.5977 4162.105 -4121.8945 4161.7725 -4120.7441 4162.0854 C
-4121.0693 4162.21 -4121.4893 4162.7705 -4121.6865 4163.2856 C
-4121.6963 4163.2646 -4121.7129 4163.2471 -4121.748 4163.2373 C
-4121.9238 4163.7822 -4121.7451 4163.9287 -4121.748 4164.8809 C
-4121.2231 4164.2041 -4120.8721 4164.7617 -4120.2529 4164.3716 C
-4120.1362 4163.8496 -4120.6123 4163.7061 -4120.9199 4163.8408 C
-4120.374 4163.4951 L
-4120.4814 4163.7349 L
-4119.0967 4163.9102 L
-4119.3594 4163.9385 -4119.4482 4164.2407 -4119.585 4164.4688 C
-4119.4063 4164.4893 -4119.2295 4164.6274 -4119.041 4164.7783 C
-4119.0811 4164.2803 -4119.0557 4163.9287 -4118.8818 4163.9385 C
-4117.9902 4164.0566 -4117.4951 4164.5039 -4117.166 4165.0728 C
-4117.1318 4165.0615 -4117.0938 4165.0493 -4117.0625 4165.0376 C
-4117.2119 4164.5269 -4116.4297 4164.1201 -4116.1533 4163.5977 C
-4116.167 4164.1265 -4115.6943 4163.915 -4115.4375 4164.1846 C
-4115.3008 4163.5791 -4115.4834 4162.7432 -4115.7959 4162.248 C
-4116.3984 4162.8013 -4116.1338 4162.8062 -4116.418 4163.5923 C
-4117.3848 4164.1157 L
-4117.1689 4163.6328 L
-4117.6514 4163.4199 -4118.1143 4164.0576 -4118.0791 4163.4292 C
-4117.8242 4163.0103 -4117.4033 4163.2646 -4117.1504 4162.8438 C
-4117.4697 4162.6143 L
-4116.9063 4161.9966 -4117.1807 4163.209 -4116.499 4162.7783 C
-4116.75 4162.2437 -4116.4375 4162.7393 -4116.1455 4162.3809 C
-4116.3799 4162.0093 -4117.3457 4162.5342 -4117.1406 4161.6265 C
-4116.7861 4161.2295 -4115.9482 4162.6904 -4115.4795 4161.7876 C
-4115.502 4161.8896 L
-4114.8105 4162.0078 -4114.5674 4161.4893 -4114.3081 4161.1631 C
-4114.0137 4161.457 -4113.6074 4161.0435 -4113.2881 4161.0103 C
-4113.2959 4161.2744 L
-4112.8457 4161.1641 L
-4113.0601 4161.6455 -4113.373 4161.1509 -4113.7598 4161.2212 C
-4113.7119 4161.7119 L
-4114.1577 4161.1294 -4114.4551 4162.0142 -4114.8008 4162.4375 C
-4114.2979 4162.0127 -4113.3799 4162.5576 -4113.2617 4161.5977 C
-4112.9502 4162.0942 L
-4112.8018 4161.915 L
-4112.5693 4162.2871 -4112.8066 4162.8701 -4113.2559 4162.9814 C
-4113.334 4162.8574 -4113.373 4162.7959 -4113.3496 4162.6934 C
-4113.5586 4162.9126 -4113.75 4163.2935 -4114.2549 4163.1807 C
-4113.9854 4162.9209 L
-4114.6143 4162.8853 -4115.1865 4163.0752 -4115.4014 4163.5576 C
-4114.4937 4163.7622 -4113.6006 4163.8057 -4112.748 4163.7832 C
-4112.4971 4162.6743 -4112.1982 4162.0518 -4112.0703 4161.021 C
-4111.498 4160.8311 -4110.7217 4160.6895 -4110.2246 4161.0664 C
-4110.2705 4161.2695 L
-4110.0283 4161.375 -4109.8047 4161.3188 -4109.6182 4161.2017 C
-4109.3623 4161.4727 -4109.7939 4161.7471 -4109.6152 4161.8936 C
-4108.7959 4161.5479 L
-4108.8467 4162.0142 -4109.5361 4162.0166 -4109.8633 4162.0493 C
-4109.8018 4162.0103 -4109.6768 4161.9326 -4109.7168 4161.8701 C
-4110.0977 4161.6782 -4110.8071 4162.4727 -4110.9736 4161.7979 C
-4111.1592 4161.915 -4110.5967 4161.2998 -4111.2246 4161.2646 C
-4111.6455 4161.0103 -4111.7822 4161.6157 -4111.8262 4161.8184 C
-4111.833 4162.083 -4111.166 4162.1807 -4111.3975 4162.499 C
-4111.0703 4162.4648 -4110.9399 4162.125 -4110.5215 4162.3799 C
-4110.8457 4162.4121 -4111.2861 4162.9478 -4111.459 4162.5376 C
-4112.1006 4163.0303 -4112.0088 4164.2705 -4111.7061 4164.3389 C
-4111.7783 4163.9502 -4110.5361 4163.8599 -4111.377 4163.3535 C
-4110.999 4162.8535 -4110.3086 4162.8496 -4109.8145 4162.5376 C
-4109.8369 4162.6377 L
-4109.2231 4162.5127 L
-4109.3096 4162.6509 -4109.4951 4162.7695 -4109.501 4163.0313 C
-4108.6514 4162.3232 L
-4109.1299 4162.7998 -4108.3545 4162.6543 -4108.1367 4162.8643 C
-4108.0459 4162.46 -4107.7139 4162.1641 -4108.0322 4161.9326 C
-4108.3906 4161.6392 -4108.2407 4162.1509 -4108.5664 4162.1816 C
-4108.1055 4161.5449 L
-4108.0654 4161.6064 L
-4107.7881 4161.0854 L
-4107.1602 4161.1221 -4108.0625 4162.2979 -4107.2578 4161.7876 C
-4107.3623 4161.0767 L
-4106.4307 4161.1816 -4105.2334 4161.9814 -4104.5752 4161.6533 C
-4104.7568 4162.0576 -4104.8369 4162.708 -4104.5869 4163.0933 C
-4104.8711 4162.9712 -4105.4414 4162.9966 -4105.8486 4163.063 C
-4105.9272 4162.9385 -4105.3398 4162.2227 -4104.8975 4162.3765 C
-4105.1123 4161.2119 -4106.0107 4163.0791 -4106.0625 4161.8984 C
-4107.1895 4161.4873 -4106.9033 4163.0356 -4107.8604 4162.3433 C
-4107.873 4162.8701 -4108.1318 4162.6006 -4108.1826 4163.0654 C
-4107.8994 4163.9253 -4106.9033 4163.0356 -4106.2822 4163.3369 C
-4106.3433 4163.375 -4106.4658 4163.4541 -4106.4893 4163.5537 C
-4106.0459 4163.708 -4105.8623 4163.5908 -4105.5522 4163.3955 C
-4105.5913 4163.333 L
-4105.0498 4162.8184 -4105.2559 4163.7261 -4104.9375 4163.958 C
-4104.8135 4163.8799 -4104.3701 4164.0313 -4104.4414 4163.6455 C
-4103.8643 4164.1465 L
-4103.8921 4163.5576 L
-4103.5664 4163.5225 -4103.4951 4163.9121 -4103.2002 4163.5537 C
-4103.1865 4163.0269 L
-4103.9951 4162.8438 L
-4103.585 4162.6719 -4103.8809 4162.3398 -4103.4307 4162.2295 C
-4103.9336 4162.8057 -4103.0742 4162.5215 -4103.0249 4163.0103 C
-4102.6934 4162.7139 L
-4102.7783 4162.8545 L
-4102.5186 4163.125 -4102.4688 4162.6582 -4102.165 4162.7271 C
-4102.5234 4162.4336 -4102.7578 4162.063 -4103.2139 4162.4375 C
-4102.8818 4162.1416 -4102.2231 4161.8135 -4102.0615 4161.7959 C
-4101.7129 4161.5752 -4101.4697 4161.9766 -4101.1436 4162.0356 C
-4101.7695 4162.2471 -4100.9238 4163.6328 -4102.1787 4163.2544 C
-4102.1553 4163.1533 -4102.0537 4163.1763 -4102.0146 4163.2383 C
-4102.1816 4162.5654 -4102.7666 4163.2803 -4103.0381 4163.5376 C
-4102.9683 4163.9253 -4103.2529 4164.021 -4102.7705 4164.2349 C
-4102.9287 4163.9873 -4102.3643 4163.3716 -4101.9053 4163.6895 C
-4101.9863 4164.5181 L
-4101.3184 4164.6157 L
-4101.3809 4164.6553 L
-4101.1299 4165.1895 -4100.668 4164.5518 -4100.208 4164.8662 C
-4099.876 4164.5703 -4098.6025 4164.8057 -4099.1504 4163.9385 C
-4098.7373 4164.457 -4098.375 4163.7959 -4097.9248 4163.6846 C
-4098.4863 4163.3462 L
-4097.8223 4162.7524 -4098.0137 4163.1353 -4097.4824 4162.1924 C
-4097.4287 4162.4185 -4097.3105 4162.605 -4097.418 4162.8438 C
-4096.5264 4162.8877 -4095.2527 4163.1221 -4094.7295 4162.4429 C
-4094.1008 4162.479 -4094.0022 4163.4561 -4093.1201 4163.0728 C
-4092.9343 4162.9561 -4093.2649 4162.2979 -4092.6809 4162.5356 C
-4092.6416 4162.5977 -4093.2432 4163.1504 -4092.5928 4163.0854 C
-4092.1296 4162.4473 -4091.5049 4163.4375 -4090.9023 4162.8843 C
-4090.5842 4163.1143 -4090.0322 4163.0269 -4090.1472 4163.5313 C
-4090.6511 4163.417 -4091.3643 4163.5225 -4091.4729 4163.7646 C
-4091.4033 4163.46 -4091.8313 4163.4692 -4091.46 4163.2349 C
-4092.2217 4162.8535 -4091.9543 4163.5479 -4092.6377 4163.2871 C
-4092.6848 4163.4893 -4092.2864 4163.8457 -4092.1399 4163.665 C
-4092.1367 4164.3545 -4093.4873 4163.998 -4092.8799 4164.8247 C
-4092.1497 4164.8843 -4091.9329 4163.4473 -4091.3 4164.1729 C
-4091.5537 4164.5923 -4091.9504 4164.2373 -4092.2727 4164.9604 C
-4091.7527 4165.2383 L
-4091.3752 4164.7393 L
-4091.3977 4164.8413 L
-4090.4792 4165.4727 -4090.5481 4164.1318 -4089.7263 4163.7856 C
-4090.2024 4163.3076 -4089.6162 4162.5908 -4089.9744 4162.2979 C
-4089.4248 4162.21 -4089.0212 4162.3013 -4089.0176 4162.9912 C
-4090.0457 4163.5537 -4089.0759 4163.7207 -4090.0264 4164.4077 C
-4089.8704 4164.6553 -4090.2527 4165.417 -4089.6863 4165.4932 C
-4089.0481 4165.0015 -4089.8772 4164.9185 -4089.2407 4164.6909 C
-4089.2031 4164.7524 -4089.1641 4164.8145 -4089.1863 4164.916 C
-4088.8936 4164.5576 -4088.8447 4165.0454 -4088.4905 4164.6494 C
-4088.5745 4164.7876 L
-4088.1377 4165.2061 -4088.0967 4164.3135 -4087.7207 4164.7695 C
-4087.8711 4164.2573 -4087.4683 4164.3496 -4087.2351 4164.0303 C
-4087.6162 4163.8369 -4087.8225 4163.1021 -4088.5745 4163.1431 C
-4088.6653 4163.5479 -4088.6104 4163.7725 -4088.9192 4163.9683 C
-4088.4304 4163.9185 L
-4088.5359 4163.9854 -4088.6162 4164.0894 -4088.7129 4164.1709 C
-4089.1824 4163.9604 L
-4088.5872 4163.6719 -4088.8601 4163.2393 -4088.6072 4162.8184 C
-4088.0625 4162.9951 -4088.1577 4162.707 -4087.8152 4162.8389 C
-4087.8496 4163.4326 -4086.7649 4163.8535 -4086.1377 4164.2349 C
-4086.2351 4164.2119 -4086.3608 4164.2271 -4086.4287 4164.2119 C
-4086.8843 4164.5869 -4086.1152 4164.707 -4086.0984 4164.8701 C
-4085.7664 4164.5732 L
-4085.8289 4164.6143 -4085.9153 4164.7524 -4085.7737 4164.8369 C
-4085.3242 4164.7261 -4085.3503 4164.1377 -4084.9016 4164.0264 C
-4084.8679 4164.3535 -4085.2473 4164.8496 -4084.9683 4165.021 C
-4084.8721 4165.3062 -4084.5657 4166.0654 -4083.9695 4165.7764 C
-4083.9272 4165.6509 -4083.7727 4165.5811 -4083.5935 4165.5269 C
-4083.6184 4165.5449 -4083.6497 4165.5576 -4083.6609 4165.5811 C
-4083.2649 4165.9375 L
-4083.6023 4166.4951 -4083.9473 4165.6743 -4084.2864 4166.2344 C
-4084.3152 4166.7646 L
-4084.5791 4166.7661 -4084.9375 4166.9956 -4085.1023 4167.2705 C
-4084.7 4167.3604 -4084.6152 4167.2212 -4084.1653 4167.1108 C
-4084.1023 4167.4463 -4084.4192 4167.6953 -4084.4648 4167.7314 C
-4084.3977 4167.4292 L
-4084.9343 4166.9902 -4085.2 4167.9375 -4085.8679 4167.8389 C
-4085.9688 4167.8174 -4085.9072 4167.7783 -4085.8848 4167.6772 C
-4086.4255 4168.1909 -4086.9561 4167.4873 -4087.4817 4168.165 C
-4087.3103 4167.8853 L
-4087.6682 4168.1108 -4088.3679 4168.6328 -4089.0671 4169.1377 C
-4089.0728 4169.3438 L
-4088.9951 4169.4683 -4089.2576 4169.4604 -4089.3984 4169.3774 C
-4089.3977 4169.374 L
-4089.7483 4169.6265 -4090.0852 4169.8584 -4090.3608 4170.0313 C
-4090.2727 4170.1592 -4090.1599 4170.2661 -4090.0305 4170.2959 C
-4089.9209 4170.0537 -4089.2783 4170.2524 -4089.3665 4169.7017 C
-4089.0696 4170.0342 -4088.5913 4169.5576 -4088.3733 4169.7661 C
-4088.7705 4169.4126 -4088.0967 4169.2471 -4088.0271 4168.9429 C
-4087.8936 4169.291 -4087.4385 4168.917 -4087.4905 4169.3843 C
-4087.4121 4169.5059 -4087.6855 4169.0742 -4087.8545 4169.3545 C
-4088.2705 4169.7896 -4087.0928 4169.7373 -4087.6111 4170.1509 C
-4086.9519 4169.8232 -4086.0833 4169.9648 -4085.4033 4169.5352 C
-4085.7839 4169.3438 L
-4085.4817 4169.4126 -4084.7664 4169.3086 -4084.7129 4169.5342 C
-4084.9375 4169.5889 -4085.2 4169.583 -4085.4873 4169.6768 C
-4085.5012 4170.2041 -4084.7969 4169.6729 -4084.7649 4169.999 C
-4083.9304 4169.1265 L
-4084.2959 4169.0967 L
-4084.0657 4168.7764 -4083.3015 4169.1631 -4082.7351 4169.2373 C
-4083.0601 4169.959 -4083.5896 4169.2559 -4084.1855 4169.5454 C
-4084.6184 4169.8188 -4083.9182 4170.2422 -4084.3279 4170.415 C
-4084.2217 4170.583 -4083.9543 4170.563 -4083.8225 4170.3809 C
-4083.6609 4170.5127 L
-4084.0264 4171.1685 -4084.8457 4171.0225 -4085.3911 4171.5869 C
-4085.3433 4171.5166 -4085.3015 4171.4424 -4085.2864 4171.3662 C
-4085.7063 4171.1118 -4086.1328 4171.1221 -4086.5422 4171.2959 C
-4086.3257 4171.5024 -4086.24 4171.3623 -4086.1162 4171.2856 C
-4086.1008 4171.4478 -4086.4873 4171.5181 -4086.6335 4171.6982 C
-4086.2527 4171.8896 -4086.5625 4172.0854 -4086.3215 4172.1934 C
-4086.5696 4172.3496 -4086.7705 4172.3037 -4087.0728 4172.2349 C
-4087.2295 4171.9873 -4086.9431 4171.8936 -4086.9751 4171.5688 C
-4087.2864 4171.7646 -4087.4287 4170.9873 -4087.8843 4171.3623 C
-4087.2783 4171.499 -4088.0439 4172.0688 -4088.2527 4172.2876 C
-4088.1511 4172.3101 L
-4088.3433 4172.6909 -4088.5063 4172.707 -4088.6392 4172.3584 C
-4088.3911 4172.2017 -4088.1511 4172.3101 -4088.2217 4171.9229 C
-4088.3855 4171.9395 -4088.5488 4171.9561 -4088.7344 4172.0728 C
-4088.5657 4171.7935 L
-4089.3799 4171.874 L
-4089.5088 4172.2158 -4089.7241 4172.6982 -4089.8369 4173.2017 C
-4090.0322 4172.8926 -4090.3042 4173.1504 -4090.4895 4173.2695 C
-4090.4033 4173.1274 L
-4090.7625 4172.8354 -4091.5615 4173.0791 -4091.6289 4173.3809 C
-4091.8855 4173.1118 -4089.8152 4171.457 -4091.6289 4171.7373 C
-4092.3184 4171.7393 -4092.0583 4172.7017 -4092.4519 4173.0356 C
-4092.4297 4172.9375 -4092.4688 4172.874 V
-4092.7705 4172.8037 -4092.8008 4173.1709 -4093.0488 4173.3262 C
-4092.8679 4173.4727 -4092.6057 4173.479 -4092.5212 4173.3398 C
-4092.6121 4173.7432 -4093.1497 4173.3037 -4093.3809 4173.6221 C
-4093.0808 4173 -4093.9641 4173.3848 -4093.7312 4173.0654 C
-4094.3313 4172.665 -4094.9729 4173.1572 -4095.2881 4173.6157 C
-4095.6953 4172.8354 -4096.002 4173.7192 -4096.6631 4173.3584 C
-4096.5615 4173.3809 -4096.377 4173.2646 -4096.2354 4173.3486 C
-4095.8584 4172.8535 -4096.9199 4173.0889 -4096.3398 4172.6353 C
-4096.4639 4172.7139 -4096.3486 4172.8984 -4096.2217 4172.8213 C
-4095.9993 4172.7656 -4095.7898 4172.5479 -4095.8457 4172.3223 C
-4096.3843 4171.8843 L
-4096.1963 4171.7646 L
-4097.0137 4171.1582 L
-4097.0361 4171.2573 -4096.959 4171.3809 -4096.9199 4171.4429 C
-4097.8682 4171.1768 -4098.9521 4171.5142 -4099.7822 4171.4336 C
-4099.9385 4172.8311 -4101.8271 4172.0313 -4102.498 4172.8896 C
-4102.3184 4172.4893 -4102.2197 4171.7822 -4102.3311 4171.4912 C
-4102.1816 4171.4326 -4101.875 4170.8677 -4101.5361 4170.9854 C
-4101.4814 4171.21 -4101.0625 4171.4639 -4101.332 4171.7207 C
-4100.3945 4171.5615 -4101.459 4171.1079 -4101.1826 4170.5879 C
-4102.2217 4170.7236 -4102.8311 4171.542 -4103.4873 4171.8711 C
-4103.5039 4171.7061 L
-4103.999 4172.0181 L
-4103.5947 4172.1108 -4103.6143 4172.9033 -4104.1362 4172.6265 C
-4104.0728 4172.5869 L
-4104.3701 4172.2544 -4104.9893 4172.6455 -4105.4541 4172.5942 C
-4105.7695 4173.0518 L
-4106.2354 4173 -4106.2549 4172.1475 -4106.4063 4171.6367 C
-4107.1362 4171.5767 -4107.5576 4172.2759 -4108.0762 4172.6909 C
-4108.3105 4172.3188 -4109.4033 4172.2314 -4108.8242 4171.7803 C
-4109.4824 4172.1079 -4109.3496 4174.1006 -4110.4785 4172.9966 C
-4110.1855 4172.6377 L
-4111.2646 4172.7124 -4112.8042 4173.4263 -4113.3018 4173.0488 C
-4112.9033 4171.7598 -4114.6494 4171.7373 -4114.8418 4170.4736 c
-4114.7881 4170.7622 -4115.1934 4170.8584 -4115.2529 4171.0127 C
-4115.3418 4170.8643 -4115.4893 4170.7207 -4115.6465 4170.9814 C
-4115.2256 4171.2349 -4115.9424 4172.2935 -4115.1377 4171.7832 C
-4115.5449 4172.6494 -4116.0693 4173.3262 -4116.9619 4173.2832 C
-4116.9482 4172.7559 L
-4116.2422 4172.916 L
-4116.3135 4172.5269 -4115.9502 4172.5566 -4115.8018 4172.3774 C
-4117.1143 4172.0811 -4115.6299 4171.1431 -4116.9717 4171.2119 C
-4117.1016 4171.5537 -4117.0176 4171.4126 -4117.3662 4171.5479 C
-4117.2021 4171.5303 -4117.1729 4171.167 -4117.4375 4171.1597 C
-4117.6914 4171.5811 L
-4118.1602 4170.7017 -4116.915 4171.0088 -4117.3154 4170.3911 C
-4116.7969 4169.9771 -4115.8994 4169.7559 -4116.0664 4169.083 C
-4116.9131 4168.8389 -4116.8281 4170.3433 -4117.7129 4170.0376 C
-4117.8071 4169.7515 L
-4118.1182 4169.9463 -4118.1689 4170.4102 -4118.3389 4170.6904 C
-4118.3545 4170.5269 -4118.4336 4170.4053 -4118.6338 4170.3584 C
-4119.1592 4171.0356 -4119.5078 4171.1685 -4119.9932 4171.9077 C
-4118.7021 4171.3535 -4118.8896 4172.4229 -4117.5576 4171.9287 C
-4117.7666 4172.1475 -4118.7041 4172.3076 -4118.7617 4173.0356 C
-4118.749 4172.5078 L
-4119.1826 4172.7822 -4119.6152 4173.0537 -4120.1592 4172.8799 C
-4119.8271 4172.583 L
-4120.5479 4172.9502 -4121.0254 4171.7822 -4121.5947 4172.6597 C
-4121.3936 4172.707 -4121.2305 4172.6909 -4121.1064 4172.6108 c
-4121.4775 4172.8462 -4121.9434 4172.7935 -4122.3467 4172.7041 C
-4123.1807 4173.5752 L
-4123.1738 4173.3135 -4123.7021 4173.2979 -4123.4473 4172.8799 C
-4124.0479 4172.4785 -4124.3311 4173.2646 -4124.6787 4173.3955 C
-4125.2939 4172.8354 -4124.1455 4173.1455 -4124.085 4172.417 C
-4124.9326 4172.1729 -4125.8311 4172.3936 -4126.3096 4172.8677 C
-4126.1367 4172.9741 -4126.0527 4173.0654 -4126.0615 4173.1934 C
-4126.0869 4173.0269 -4126.4287 4173.0703 -4126.6191 4173.0654 C
-4126.75 4173.4077 L
-4127.0674 4173.1763 -4127.0225 4172.9741 -4126.7529 4172.7158 C
-4127.0557 4172.6494 -4127.417 4173.3086 -4127.7295 4172.8145 C
-4127.2119 4172.4014 -4126.5522 4172.7617 -4126.2822 4172.5044 C
-4127.3643 4172.8423 -4127.3711 4171.4604 -4128.7422 4171.8955 C
-4128.7593 4171.7314 -4128.5273 4171.4126 -4128.791 4171.4077 C
-4129.4033 4171.5342 -4128.9512 4172.1143 -4129.1426 4172.4951 C
-4128.6709 4172.2822 -4128.4521 4172.4912 -4128.1787 4172.9238 C
-4128.3042 4173.2017 L
-4128.3232 4173.0576 -4128.6191 4173.0493 -4128.7061 4172.9102 C
-4128.7822 4173.4771 L
-4128.7471 4172.8496 -4129.2207 4172.3716 -4129.5928 4172.6064 C
-4129.2168 4173.0615 -4129.3184 4173.0376 -4129.2158 4173.7524 C
-4129.7393 4174.4292 -4129.8066 4173.0869 -4130.3926 4173.8037 C
-4130.3486 4173.6021 -4129.8369 4173.4517 -4130.2793 4173.2979 C
-4130.6455 4173.2705 -4130.5967 4173.7593 -4130.8423 4173.915 C
-4130.5654 4173.3926 -4130.6367 4173.0044 -4130.3369 4172.3843 C
-4129.6865 4172.3184 -4130.0742 4172.3911 -4129.4385 4172.1631 C
-4129.9766 4171.7212 L
-4129.4258 4171.6353 -4129.5762 4171.123 -4129.5303 4170.9229 C
-4130.4717 4170.3911 -4130.2402 4171.7168 -4130.8457 4171.5796 C
-4131.1377 4171.9385 -4130.2783 4171.6553 -4130.7354 4172.0303 C
-4131.3018 4171.9541 -4130.8643 4172.3716 -4131.5 4172.5977 C
-4131.3936 4172.3584 L
-4131.5879 4172.0479 -4131.7803 4172.4307 -4132.0049 4172.4829 C
-4132.252 4172.6416 -4131.7246 4174.2998 -4132.7417 4174.3354 C
-4132.6919 4174.1895 -4132.6738 4174.0967 -4132.6738 4174.0356 C
-4131.6816 4169.6455 L
-4132.7119 4169.6563 -4133.8994 4169.5342 -4135.0923 4169.2393 C
-4135.373 4168.3809 -4134.2407 4168.5313 -4134.3135 4168.1455 C
-4133.7695 4168.3213 L
-4133.7998 4168.6851 -4134.9097 4168.4336 -4134.418 4169.0767 C
-4133.457 4168.8145 -4133.0215 4169.2334 -4132.1094 4168.4829 C
-4132.3926 4167.623 -4133.3105 4168.6353 -4133.9033 4167.9712 C
-4133.6543 4168.0269 -4133.4443 4167.9326 -4133.2402 4167.8096 C
-4133.7969 4167.6997 -4134.3926 4167.5811 -4135.0264 4167.4478 C
-4135.1689 4167.6563 L
-4134.7417 4167.7524 -4134.4463 4167.8262 -4134.4082 4167.8574 C
-4134.9746 4167.7822 -4135.4521 4168.2583 -4135.4893 4168.8877 C
-4135.3887 4168.9102 L
-4135.5938 4169.1064 L
-4135.7266 4169.0664 -4135.8594 4169.0269 -4135.9912 4168.9854 C
f
-4172.6934 4168.8369 m
-4172.6592 4168.7764 -4172.6318 4168.7061 -4172.6123 4168.6182 c
-4172.6328 4168.71 -4172.6094 4168.7695 -4172.6934 4168.8369 C
f
0 D
-4124.9033 4166.875 m
-4125.6582 4166.7832 -4126.4199 4166.6118 -4127.1455 4166.5356 C
-4125.8359 4167.7793 -4124.915 4168.7207 -4127.1006 4168.6963 C
-4127.2441 4168.7856 L
-4126.958 4168.9385 -4126.4658 4168.957 -4126.002 4168.8672 C
-4125.627 4168.4263 -4124.417 4166.8062 -4124.4307 4166.6631 C
-4124.5635 4166.3145 -4124.7568 4166.6953 -4124.998 4166.5889 C
-4124.9033 4166.875 L
f
-4124.3662 4168.958 m
-4123.9385 4169.0967 -4124.0361 4168.8213 -4123.9697 4168.5732 C
-4124.1201 4168.605 -4124.2705 4168.6377 -4124.4189 4168.667 C
-4124.3623 4168.7295 -4124.334 4168.8174 -4124.3662 4168.958 C
f
1 D
-4123.9951 4168.3252 m
-4124.043 4168.3188 -4124.084 4168.3076 -4124.1055 4168.2744 C
-4123.9951 4168.3252 L
f
0 D
-4132.3193 4168.0103 m
-4132.2998 4168.0044 -4132.293 4167.999 -4132.2754 4167.9951 C
-4132.376 4167.9751 -4132.4775 4167.957 -4132.583 4167.9375 C
-4132.542 4167.9771 -4132.4639 4168.0078 -4132.3193 4168.0103 C
f
-4131.4502 4168.6182 m
-4131.3486 4168.1641 L
-4131.4434 4168.1475 -4131.5391 4168.1294 -4131.6377 4168.1118 C
-4131.6055 4168.3174 -4131.5713 4168.4966 -4131.4502 4168.6182 C
f
-4128.6582 4170.1118 m
-4128.4824 4169.5664 -4127.8926 4169.542 -4127.8564 4168.9126 C
-4127.8193 4168.7515 -4127.9434 4168.6895 -4128.082 4168.6377 C
-4128.2373 4168.623 -4128.4033 4168.6055 -4128.5791 4168.5854 C
-4128.585 4168.6768 -4128.6201 4168.7622 -4128.6787 4168.8438 C
-4128.5049 4168.9229 -4128.3887 4169.0791 -4128.459 4169.4648 C
-4128.9053 4168.623 -4128.8594 4170.0654 -4129.3418 4169.8496 C
-4129.4951 4170.2935 -4128.8047 4170.2896 -4128.6582 4170.1118 C
f
1 D
-4091.5752 4168.4727 m
-4091.5615 4168.5269 -4091.5144 4168.6685 -4091.4482 4168.8438 C
-4091.7881 4169.1553 L
-4092.3943 4169.0181 -4092.8799 4168.1143 -4093.4255 4168.8916 C
-4093.6809 4168.6963 -4093.8176 4168.2832 -4093.9482 4167.9429 C
-4093.8232 4167.9683 -4093.7063 4168.0015 -4093.6089 4168.0537 C
-4092.0791 4166.915 -4092.8113 4169.2544 -4091.5752 4168.4727 C
f
0 D
-4098.5449 4167.3643 m
-4098.4824 4167.3252 -4098.46 4167.2227 Y
-4099.8145 4168.3774 -4100.9297 4168.7119 -4101.6602 4168.667 C
-4101.5186 4169.125 -4100.8633 4169.479 -4100.5522 4169.6685 C
-4100.8281 4170.1904 L
-4101 4169.7803 L
-4101.4785 4170.2544 L
-4101.3447 4170.605 -4100.958 4170.5313 -4100.7002 4170.8013 C
-4100.6777 4170.7017 -4099.8506 4170.0933 -4099.6191 4169.7725 C
-4100.2803 4169.4121 L
-4100.1016 4169.5576 -4099.2246 4169.4375 -4098.877 4169.3037 C
-4098.8701 4169.042 -4099.4697 4168.6392 -4099.5449 4169.207 C
-4099.6162 4168.8188 -4098.9258 4168.8145 -4099.3623 4168.3984 C
-4098.8447 4167.9854 -4098.0215 4168.3311 -4097.6392 4168.5225 C
-4097.5742 4169.1753 L
-4097.1553 4169.4287 -4097.291 4168.3896 -4096.793 4168.7661 C
-4097.4053 4168.8936 -4096.6895 4169.4814 -4097.1768 4169.5303 C
-4097.0215 4169.7764 -4097.1738 4170.2192 -4096.6855 4170.1709 C
-4096.2793 4169.3076 -4096.1709 4170.7119 -4095.7871 4169.9502 C
-4095.5305 4170.2192 -4096.0635 4170.4692 -4095.5583 4170.5854 C
-4094.9792 4170.1318 -4095.0127 4169.8062 -4094.9768 4169.1782 C
-4095.5183 4169.0024 -4095.5852 4169.9951 -4096.0283 4169.8423 C
-4095.1472 4168.7661 L
-4095.3096 4168.6143 -4095.4297 4168.5977 -4095.5305 4168.6416 C
-4095.3535 4168.5791 -4095.2031 4168.4199 -4095.0745 4168.1997 c
-4095.0012 4168.0767 -4094.9336 4167.9712 -4094.8711 4167.8809 C
-4095.3704 4167.875 -4095.8137 4167.8599 -4095.8921 4167.5923 C
-4095.8232 4167.2876 L
-4096 4167.0078 -4096.2881 4167.2271 -4096.4209 4167.4502 C
-4096.8682 4167.4829 -4097.3145 4167.9077 -4097.4121 4167.5132 C
-4097.2422 4167.2344 L
-4097.792 4167.3223 -4097.8535 4167.3604 -4098.5449 4167.3643 C
f
-4116.5625 4166.6709 m
-4116.2295 4167.7876 -4115.8623 4168.7744 -4114.3081 4168.5791 C
-4114.4307 4168.6563 L
-4113.6475 4169.3574 -4112.9033 4167.7295 -4111.9502 4168.5078 C
-4112.4131 4168.9287 -4112.3877 4168.8896 -4112.8984 4169.8535 C
-4112.4023 4169.5376 L
-4112.54 4170.1455 -4112.0449 4169.8311 -4111.6807 4169.8599 C
-4112.002 4170.583 L
-4112.2207 4170.375 -4112.7871 4170.2998 -4112.7705 4170.4648 C
-4112.6465 4170.3848 -4113.5186 4169.5518 -4113.9922 4169.7622 C
-4113.9434 4170.2524 -4112.9434 4170.0537 -4113.3896 4170.8545 C
-4112.9961 4170.5181 -4112.9473 4171.0068 -4112.5361 4170.8354 C
-4112.9307 4171.1709 -4112.6338 4171.5024 -4112.9272 4171.8599 C
-4112.2529 4171.6934 L
-4112.2354 4171.8564 -4113.2354 4172.0557 -4112.6826 4172.6582 C
-4112.4121 4172.4014 -4111.6904 4172.7236 -4111.6777 4172.1963 C
-4111.6611 4172.3584 L
-4111.1553 4172.4727 -4111.4385 4171.6118 -4110.8174 4171.9126 C
-4110.8105 4171.6475 -4110.9287 4171.4639 -4111.1514 4171.5181 C
-4111.3389 4171.6353 -4111.3682 4171.999 -4111.7549 4172.0728 C
-4111.9287 4171.6597 -4111.2881 4172.124 -4111.5566 4171.4263 c
-4111.6904 4171.0791 -4112.5791 4171.7261 -4112.2959 4170.9424 C
-4111.791 4171.0557 L
-4111.7783 4170.5269 -4111.4131 4170.5576 -4111.4229 4170.1318 C
-4111.1143 4169.9375 -4110.8232 4170.5313 -4110.5078 4170.0728 C
-4110.377 4169.7314 -4110.6055 4169.0967 -4110.084 4169.373 C
-4109.6768 4170.1543 -4108.4761 4170.0024 -4108.0264 4169.8896 C
-4107.6328 4169.5537 L
-4107.666 4169.2295 -4108.3848 4169.5977 -4108.1318 4169.1768 C
-4107.5186 4169.0493 L
-4107.5654 4169.2524 L
-4107.3623 4169.2979 -4107.1543 4169.0796 -4106.9688 4168.9639 C
-4107.1602 4169.3438 -4107.6025 4169.1909 -4107.5146 4169.7412 C
-4107.2266 4169.8496 -4107.1826 4170.0537 -4106.917 4169.9478 C
-4106.9751 4169.9873 -4107.0249 4170.041 -4107.0176 4170.1182 C
-4106.4346 4170.3564 -4106.4541 4169.5024 -4106.3081 4169.3232 c
-4105.7217 4168.6084 -4106.8994 4168.6597 -4106.8242 4168.0933 C
-4105.1123 4167.791 L
-4105.2583 4167.9692 -4105.4053 4168.1475 -4105.3506 4168.373 C
-4104.9307 4168.6274 -4105.3408 4168.7998 -4104.751 4168.7734 C
-4104.793 4168.0215 -4104.0088 4168.3047 -4103.5923 4167.8701 C
-4103.3975 4168.1782 -4103.3574 4168.2393 -4103.7832 4168.249 C
-4103.7344 4168.7373 -4103.1631 4168.5493 -4102.96 4168.5942 C
-4102.8423 4168.4727 -4102.6416 4168.4019 -4102.5146 4168.2935 C
-4102.6846 4168.0493 -4102.6123 4167.7437 -4102.2432 4167.5356 C
-4102.2217 4167.4336 L
-4102.8262 4167.2998 -4103.7666 4166.7661 -4104.1455 4167.2661 C
-4104.0381 4167.0244 L
-4104.7383 4166.6021 -4105.5615 4167.9014 -4105.8843 4166.979 C
-4105.8545 4166.6143 -4106.0249 4166.8955 -4106.0127 4166.3677 C
-4106.5283 4166.7803 L
-4106.4209 4166.541 L
-4107.2979 4166.6597 L
-4107.2744 4166.5615 L
-4107.6914 4167.0391 -4108.0176 4167.4287 -4108.2783 4167.7471 C
-4108.2793 4167.9771 -4108.252 4168.0479 -4108.3911 4168.2173 C
-4108.5303 4168.3311 -4108.6362 4168.3486 -4108.7305 4168.3184 C
-4108.7314 4168.3188 -4108.7314 4168.3188 -4108.7314 4168.3213 C
-4108.7314 4168.3188 -4108.7314 4168.3188 -4108.7314 4168.3184 C
-4108.9463 4168.2515 -4109.0898 4167.9209 -4109.3545 4167.7856 C
-4108.5391 4167.7295 L
-4108.4727 4167.3389 -4108.542 4166.9336 -4108.9414 4166.6597 C
-4108.7783 4166.6455 -4108.71 4166.3408 -4108.9121 4166.2959 C
-4108.9346 4166.3975 -4109.4463 4166.5454 -4109.251 4166.8564 C
-4110.0254 4166.999 -4111.2793 4165.9736 -4112.4551 4166.7158 C
-4111.6104 4166.2695 -4113.1318 4166.1924 -4112.1943 4166.0313 C
-4112.8486 4165.4072 -4112.7578 4166.6475 -4113.4248 4166.5493 C
-4113.4814 4166.3252 -4113.0615 4166.5791 -4112.9082 4166.1353 C
-4114.0176 4165.8853 -4114.7803 4167.1455 -4115.8535 4166.9561 C
-4115.8994 4166.4688 L
-4116.1025 4166.5313 -4116.3281 4166.6006 -4116.5625 4166.6709 C
f
-4118.6855 4167.2783 m
-4118.8921 4167.333 -4119.1016 4167.3896 -4119.3145 4167.4463 C
-4119.2939 4167.4541 -4119.2744 4167.4541 -4119.2529 4167.4604 C
-4119.873 4167.8535 L
-4119.4922 4168.0435 -4119.2407 4168.5791 -4119.7744 4168.8286 C
-4119.7295 4168.6274 -4119.8857 4168.3799 -4119.7002 4168.2622 C
-4120.0576 4167.9692 -4120.8423 4167.6865 -4120.6377 4168.4229 C
-4119.9502 4167.7271 -4120.4775 4169.3604 -4119.9375 4168.8438 C
-4120.2275 4169.3232 -4120.5146 4169.1079 -4120.7881 4169.3223 C
-4120.5029 4168.9209 -4120.8545 4168.4126 -4121.2822 4168.2212 C
-4121.4688 4168.3398 -4121.9727 4168.2261 -4122.2822 4168.4209 C
-4122.1719 4168.8711 -4122.4414 4169.1289 -4121.9375 4169.2422 C
-4122.1221 4169.3604 -4122.4087 4169.4541 -4122.7295 4169.2227 C
-4122.6025 4169.1455 -4122.3799 4169.0894 -4122.3955 4168.9272 C
-4122.6025 4168.5127 -4122.8447 4168.5313 -4122.9785 4168.3545 C
-4123.085 4168.3799 -4123.1929 4168.4019 -4123.2979 4168.4263 C
-4123.2666 4168.4648 -4123.2393 4168.5166 -4123.2197 4168.5811 C
-4123.5742 4168.9785 L
-4123.1025 4168.7661 -4123.3564 4169.1865 -4123.3623 4169.4502 c
-4123.3496 4168.9229 -4123.666 4169.3809 -4123.8281 4169.3984 C
-4123.4766 4169.9561 L
-4123.6465 4170.2349 -4124.0762 4169.5537 -4123.9873 4170.105 C
-4123.2422 4170.3262 -4122.9561 4170.2314 -4122.2822 4170.0654 C
-4122.5557 4169.6328 L
-4121.7959 4169.3267 -4122.0869 4170.375 -4121.2344 4170.3545 C
-4120.8799 4169.959 -4119.9521 4170.3267 -4119.9346 4169.5352 C
-4120.041 4169.7764 -4119.4033 4170.2393 -4119.1113 4169.8809 C
-4118.7881 4169.1572 -4117.8115 4169.0596 -4118.1074 4168.7295 C
-4118.3711 4168.7207 -4118.7266 4169.1182 -4118.9385 4168.6475 C
-4118.4268 4168.4966 L
-4118.7627 4168.1021 L
-4118.5889 4168.2437 -4118.6055 4167.8584 -4118.6855 4167.2783 C
f
1 D
-4130.1455 4162.8389 m
-4130.1514 4162.8354 -4130.1582 4162.833 -4130.165 4162.8286 C
-4130.1577 4162.8311 -4130.1504 4162.8311 -4130.1436 4162.8311 C
-4130.1455 4162.8389 L
f
*U
0 D
-4083.9968 4166.8311 m
-4083.8496 4166.6509 -4083.4856 4166.6807 -4083.5569 4166.2935 C
-4083.5481 4166.7192 -4084.2073 4166.3584 -4083.9968 4166.8311 C
f
-4083.5615 4167.248 m
-4083.5359 4167.1465 -4083.5537 4166.9829 -4083.3904 4166.9683 C
-4083.8401 4167.0767 L
-4083.5615 4167.248 L
f
-4083.1052 4170.1597 m
-4082.8733 4169.8423 -4082.7263 4169.6631 -4082.3623 4169.6919 C
-4082.2256 4170.7314 -4082.9583 4169.9824 -4083.1233 4170.9517 C
-4082.4561 4171.0493 -4082.2512 4170.1416 -4081.7024 4170.0537 C
-4081.9744 4169.6201 -4083.0852 4169.3701 -4083.1052 4170.1597 C
f
-4083.4016 4171.4736 m
-4083.0305 4171.2393 L
-4083.0671 4171.1782 L
-4083.4385 4171.4126 L
-4083.4016 4171.4736 L
f
-4091.4385 4162.4429 m
-4091.4719 4162.1182 -4091.7031 4162.4385 -4091.8271 4162.5166 C
-4091.7263 4162.5376 -4091.5852 4162.623 -4091.4385 4162.4429 C
f
-4164.3506 4162.105 m
-4167.1807 4162.4185 L
-4166.3662 4162.3369 -4165.6143 4162.2959 -4164.3506 4162.105 C
f
-4100.8311 4164.5664 m
-4100.0713 4164.2603 -4099.7334 4163.6997 -4098.959 4163.5576 C
-4099.9775 4162.9033 -4100.3042 4164.5796 -4101.1592 4163.9092 C
-4100.8311 4164.5664 L
f
-4100.5635 4161.9751 m
-4100.4375 4162.5869 -4101.1494 4162.6919 -4101.0391 4163.1406 C
-4100.5273 4162.9912 -4100.8008 4162.5576 -4100.3359 4162.6104 C
-4100.5635 4161.9751 L
f
-4097.1191 4172.0889 m
-4097.3496 4172.4072 L
-4097.1641 4172.291 L
-4097.1191 4172.0889 L
f
-4104.0273 4162.5181 m
-4103.9434 4162.3799 L
-4104.3242 4162.1865 L
-4104.0273 4162.5181 L
f
-4103.8594 4162.2393 m
-4103.9434 4162.3799 L
-4103.9434 4162.3799 L
-4103.8594 4162.2393 L
f
-4097.415 4173.4014 m
-4097.0728 4173.5313 L
-4096.9033 4173.2515 L
-4097.415 4173.4014 L
f
-4100.4385 4170.1187 m
-4100.1318 4169.9229 L
-4100.1929 4169.9604 -4100.6123 4169.709 -4100.4385 4170.1187 C
f
-4106.3545 4162.2583 m
-4106.7275 4162.4932 L
-4106.6895 4162.5537 L
-4106.3174 4162.3188 L
-4106.3545 4162.2583 L
f
-4102.8369 4171.8057 m
-4102.625 4172.2759 -4103.4482 4171.9326 -4103.0127 4172.3486 C
-4102.625 4172.2759 -4102.7822 4172.0303 -4102.8369 4171.8057 C
f
-4107.335 4168.6157 m
-4107.3857 4168.6157 -4107.4385 4168.6328 -4107.4893 4168.6851 C
-4107.4287 4168.665 -4107.3779 4168.6406 -4107.335 4168.6157 C
f
-4107.335 4168.6157 m
-4107.1729 4168.6157 -4107.0107 4168.7959 -4106.8994 4168.6597 C
-4107.1016 4168.4473 -4107.1753 4168.5269 -4107.335 4168.6157 C
f
-4109.1953 4168.7256 m
-4109.0479 4168.7593 L
-4109.1982 4168.9912 -4109.127 4168.957 -4108.9932 4168.7705 C
-4108.8369 4168.7544 -4108.8457 4168.6055 -4108.8271 4168.5039 C
-4108.7959 4168.4473 -4108.7646 4168.3853 -4108.7314 4168.3213 C
-4108.7793 4168.3809 -4108.8223 4168.4404 -4108.8594 4168.4912 C
-4109.1006 4168.4873 -4109.248 4168.5103 -4109.1953 4168.7256 C
f
-4116.1055 4160.7998 m
-4115.5615 4160.9751 -4115.4209 4161.0596 -4115.4502 4161.4248 C
-4114.9346 4161.541 -4115.0146 4160.9126 -4114.7031 4160.7661 C
-4115.2871 4160.8369 -4115.4063 4160.6685 -4116.1055 4160.7998 C
f
-4114.7031 4160.7661 m
-4114.6377 4160.7593 -4114.5752 4160.7515 -4114.499 4160.7373 C
-4114.584 4160.7261 -4114.6475 4160.7412 -4114.7031 4160.7661 C
f
-4107.0215 4172.7173 m
-4107.3594 4173.2759 L
-4107.2354 4173.1982 L
-4107.0215 4172.7173 L
f
-4116.9121 4160.6157 m
-4116.8115 4160.6392 -4116.6494 4160.623 -4116.5703 4160.748 C
-4116.541 4160.3809 -4117.0127 4160.5933 -4116.9121 4160.6157 c
f
-4114.8154 4167.7744 m
-4114.7598 4167.998 -4114.4121 4167.8643 -4114.2705 4167.9502 C
-4114.4736 4167.9033 -4114.6392 4167.23 -4114.8154 4167.7744 C
f
-4118.4717 4162.1221 m
-4118.3711 4162.1455 -4118.2158 4162.3911 -4118.2832 4162.6934 C
-4118.1367 4162.5142 -4117.9385 4161.8701 -4118.4717 4162.1221 C
f
-4115.8086 4167.709 m
-4115.7314 4167.833 L
-4115.3594 4167.5977 L
-4115.8086 4167.709 L
f
-4114.4814 4173.1006 m
-4114.0635 4172.665 -4115.1455 4172.0493 -4114.4248 4171.6807 C
-4115.3545 4171.2246 -4114.3535 4172.2979 -4115.0391 4172.2271 C
-4114.6377 4172.374 -4114.4409 4172.9253 -4114.4814 4173.1006 C
f
-4115.0391 4172.2271 m
-4115.0977 4172.2041 -4115.1611 4172.1909 -4115.2295 4172.1895 C
-4115.1533 4172.21 -4115.0923 4172.2212 -4115.0391 4172.2271 C
f
-4120.9287 4169.4692 m
-4120.8682 4169.4238 -4120.8262 4169.374 -4120.7881 4169.3223 C
-4120.8359 4169.3584 -4120.8818 4169.4033 -4120.9287 4169.4692 C
f
-4117.2295 4172.5869 m
-4116.6025 4171.9326 L
-4117.0215 4172.3677 -4118.0752 4172.3413 -4118.0098 4172.9927 C
-4117.668 4173.125 -4117.2578 4172.9517 -4117.0889 4172.6709 C
-4117.2295 4172.5869 L
f
-4124.4287 4160.7764 m
-4124.1577 4160.5181 L
-4124.4961 4160.4424 L
-4124.3994 4160.54 -4124.5742 4161.0181 -4124.4287 4160.7764 C
f
-4124.5615 4160.4287 m
-4124.4961 4160.4424 L
-4124.5107 4160.4263 -4124.5313 4160.4199 -4124.5615 4160.4287 C
f
-4119.7422 4169.1543 m
-4119.54 4169.1997 -4119.3779 4169.1816 -4119.1929 4169.0664 C
-4119.2695 4168.9429 -4119.7744 4168.8286 -4119.7422 4169.1543 C
f
-4126.3369 4161.7236 m
-4125.8896 4161.6118 L
-4126.3779 4161.6597 L
-4126.3369 4161.7236 L
f
-4128.4238 4160.6157 m
-4128.501 4160.4932 L
-4128.8721 4160.7271 L
-4128.7939 4160.8496 L
-4128.4238 4160.6157 L
f
-4125.6943 4173.4326 m
-4125.3911 4173.5024 -4125.1543 4172.917 -4125.2334 4172.7935 C
-4125.8213 4172.8188 L
-4125.6719 4173.3311 -4125.6582 4172.8037 -4125.3174 4172.9336 C
-4125.6943 4173.4326 L
f
-4143.915 4161.5732 m
-4143.7842 4161.2314 -4143.1406 4161.4292 -4143.1074 4161.7544 C
-4143.1934 4161.8955 -4143.542 4162.0303 -4143.3232 4162.2373 C
-4142.8145 4161.3975 L
-4142.1377 4161.9209 -4143.3291 4162.5015 -4143.6631 4162.7979 C
-4142.9736 4162.9063 -4142.7695 4162.3545 -4142.0361 4162.3574 C
-4142.252 4162.2822 -4142.3887 4162.0728 -4142.5029 4161.8926 C
-4142.5283 4161.3013 -4141.8447 4161.563 -4141.3564 4161.5166 C
-4141.667 4161.2598 -4141.4873 4161.0435 -4141.2607 4160.8115 C
-4141.2197 4160.7935 -4141.1929 4160.7593 -4141.1738 4160.7192 C
-4141.1475 4160.6919 -4141.1221 4160.665 -4141.0967 4160.6367 C
-4141.1553 4160.6377 L
-4141.1514 4160.5713 -4141.1641 4160.4912 -4141.2061 4160.3809 C
-4141.6162 4160.5537 -4141.9297 4160.0596 -4142.1934 4160.0518 C
-4141.9326 4161.0132 -4143.0923 4160.2744 -4143.4238 4160.5703 C
-4143.8071 4160.665 L
-4143.9502 4160.667 L
-4143.9795 4160.5615 -4143.9385 4160.4292 -4143.7197 4160.2393 C
-4143.9023 4160.4287 -4144.5107 4160.3623 -4144.4541 4160.6709 C
-4145.8423 4160.6846 L
-4145.8857 4160.6455 -4145.9287 4160.5967 -4145.9609 4160.5269 C
-4146.0088 4160.5879 -4146.0166 4160.6377 -4146.0107 4160.6865 C
-4152.0576 4160.748 L
-4151.7593 4160.8232 -4151.501 4161.0435 -4151.1934 4161.1494 C
-4151.6553 4161.7876 -4150.6895 4161.2646 -4150.8247 4161.8677 C
-4151.0322 4162.0869 -4151.3359 4162.0181 -4151.5166 4161.8716 C
-4151.584 4162.1763 -4151.3262 4162.4463 -4151.3564 4162.8101 C
-4150.5938 4163.1934 -4150.4766 4161.7349 -4149.7314 4161.957 C
-4149.7607 4162.3223 -4149.9912 4162.6416 -4149.5029 4162.5923 C
-4149.627 4162.6709 L
-4148.8457 4162.2622 -4149.0186 4163.4966 -4148.5264 4162.4951 C
-4148.5391 4163.0225 L
-4148.1846 4162.625 -4147.4951 4162.6221 -4147.1064 4162.5493 C
-4147.1299 4162.6509 L
-4146.0391 4162.0479 -4146.5176 4162.5225 -4145.293 4162.2705 C
-4145.8564 4162.8853 L
-4145.4346 4163.1396 -4145.3389 4162.4712 -4145.0361 4162.54 C
-4145.0576 4162.6416 -4144.9873 4163.0269 -4145.2734 4163.123 C
-4143.7881 4162.1851 L
-4143.4336 4161.7876 -4143.8604 4161.7979 -4143.915 4161.5732 C
f
-4142.0361 4162.3574 m
-4141.957 4162.3853 -4141.8682 4162.3975 -4141.7627 4162.3774 C
-4141.8643 4162.3604 -4141.9521 4162.3574 -4142.0361 4162.3574 C
f
-4152.4824 4160.7524 m
-4152.0576 4160.748 L
-4152.1895 4160.7158 -4152.3262 4160.7061 -4152.4824 4160.7524 C
f
-4139.9063 4161.2061 m
-4140.1641 4160.9336 -4139.7139 4160.8247 -4139.6689 4160.6221 C
-4140.5913 4160.6318 L
-4140.5869 4160.8354 -4140.6787 4161.0625 -4140.6602 4161.248 C
-4139.9063 4161.2061 L
f
-4140.8584 4160.249 m
-4140.8896 4160.3896 -4140.9873 4160.5166 -4141.0967 4160.6367 C
-4140.5913 4160.6318 L
-4140.5947 4160.479 -4140.6514 4160.3408 -4140.8584 4160.249 C
f
-4140.7607 4171.0894 m
-4140.9238 4171.1079 L
-4141.1709 4171.2646 L
-4140.7607 4171.0894 L
f
-4143.3154 4170.1963 m
-4143.1201 4170.5044 -4142.75 4170.2705 -4142.626 4170.1924 C
-4143.0527 4170.2017 -4142.8682 4170.0854 -4143.3154 4170.1963 C
f
-4142.7881 4173.4966 m
-4143.1992 4173.6709 L
-4143.1611 4173.7314 L
-4142.7881 4173.4966 L
f
-4155.6221 4162.8281 m
-4155.6895 4162.8398 -4155.7549 4162.8486 -4155.8232 4162.8623 C
-4155.7314 4162.8643 -4155.6709 4162.8496 -4155.6221 4162.8281 C
f
-4152.0947 4162.3252 m
-4153.0752 4161.7334 -4151.4521 4161.833 -4151.7598 4161.0752 C
-4152.2939 4161.3262 L
-4152.248 4161.123 L
-4152.8994 4161.1895 L
-4152.7656 4161.5376 -4152.665 4161.5591 -4152.6943 4161.9248 C
-4153.5635 4161.7822 -4152.9683 4161.4912 -4153.6055 4161.0303 C
-4154.5771 4161.0967 L
-4154.498 4160.9873 L
-4154.5801 4160.9951 -4154.6162 4161.041 -4154.6445 4161.1006 C
-4157.917 4161.3281 L
-4158.5127 4161.6182 -4157.5879 4161.9854 -4158.0273 4162.5225 C
-4157.3369 4162.521 -4156.3115 4162.9102 -4156.2529 4162.1816 C
-4156.2759 4162.2822 -4156.3213 4162.4829 -4156.1816 4162.5688 C
-4155.7822 4161.9692 L
-4156.1631 4161.7783 L
-4155.7617 4161.1807 -4154.4658 4161.3135 -4154.2314 4161.6846 C
-4154.9683 4161.8887 -4154.5986 4162.6084 -4155.625 4162.2173 C
-4155.5791 4162.4019 -4155.3911 4162.7271 -4155.6221 4162.8281 C
-4154.4189 4162.6157 -4153.3408 4162.9478 -4152.0947 4162.3252 C
f
-4164.1631 4162.6763 m
-4164.1533 4162.6104 L
-4164.1753 4162.6455 -4164.1826 4162.6719 -4164.1631 4162.6763 C
f
-4163.7593 4162.7661 m
-4163.1729 4162.0518 L
-4164.0869 4162.1094 L
-4164.1533 4162.6104 L
-4164.0728 4162.4829 -4163.752 4162.2295 -4163.6279 4162.4253 C
-4163.7593 4162.7661 L
f
-4162.4922 4161.6201 m
-4162.9639 4161.833 -4162.9385 4162.4229 -4162.6807 4162.6919 C
-4163.1143 4162.9648 -4162.9097 4162.0576 -4163.208 4162.6807 C
-4163.1982 4163.1064 -4162.6641 4162.8564 -4162.541 4162.7783 C
-4162.4922 4161.6201 L
f
-4159.0078 4161.9307 m
-4159.1406 4162.1753 L
-4158.8135 4162.2393 L
-4159.0078 4161.9307 L
f
-4159.1406 4162.1753 m
-4159.4658 4162.1094 L
-4159.4434 4162.291 -4159.4209 4162.4683 -4159.3682 4162.5923 C
-4159.1406 4162.1753 L
f
-4160.3174 4161.9395 m
-4160.4551 4161.8955 -4160.6074 4161.8623 -4160.792 4161.8462 C
-4160.3174 4161.9395 L
f
-4159.9463 4162.0894 m
-4159.957 4162.0127 L
-4160.3174 4161.9395 L
-4160.1846 4161.9854 -4160.0654 4162.0356 -4159.9463 4162.0894 C
f
-4159.4658 4162.1094 m
-4159.5186 4161.6963 -4159.5801 4161.2622 -4160.0498 4161.3774 C
-4159.957 4162.0127 L
-4159.4658 4162.1094 L
f
-4145.7783 4172.874 m
-4146.1494 4173.1079 L
-4146.1104 4173.1719 L
-4145.7393 4172.9375 L
-4145.7783 4172.874 L
f
-4147.9209 4172.4966 m
-4148.0127 4172.5688 -4148.082 4172.6455 -4148.1455 4172.7236 C
-4148.0488 4172.6782 -4147.9717 4172.6094 -4147.9209 4172.4966 C
f
-4149.5137 4175.3188 m
-4149.9502 4174.9033 -4148.9111 4174.7695 -4149.7197 4174.5854 C
-4149.791 4174.1982 -4149.4121 4173.6992 -4149.0313 4173.8916 C
-4149.0615 4174.2559 -4149.4023 4174.125 -4149.168 4174.4966 C
-4148.915 4174.0752 -4148.8193 4174.3623 -4148.9072 4173.8135 C
-4148.4814 4173.4712 -4148.4346 4173.0811 -4148.1455 4172.7236 C
-4148.6602 4172.9648 -4149.7402 4172.4019 -4150.3926 4173.1064 C
-4150.7529 4173.7661 -4150.5342 4174.667 -4150.5361 4175.6201 C
-4150.4814 4175.8438 -4149.5488 4175.9502 -4149.5137 4175.3188 C
f
-4148.8262 4176.2705 m
-4148.624 4176.3174 -4148.5625 4176.2793 -4148.4385 4176.1997 C
-4148.4717 4175.874 -4148.6631 4176.2559 -4148.8262 4176.2705 C
f
-4153.4717 4169.0942 m
-4153.5107 4169.2295 -4153.876 4169.3975 -4153.7979 4169.6318 C
-4153.2432 4169.4604 L
-4153.373 4169.4385 -4153.4189 4169.2725 -4153.4717 4169.0942 C
f
-4153 4169.3877 m
-4153.2432 4169.4604 L
-4153.1826 4169.4727 -4153.1074 4169.4541 -4153 4169.3877 C
f
-4153.498 4169.0093 m
-4153.4893 4169.0376 -4153.4814 4169.0664 -4153.4717 4169.0942 C
-4153.4639 4169.0654 -4153.4658 4169.0356 -4153.498 4169.0093 C
f
-4161.6631 4161.7017 m
-4161.6553 4161.4404 -4161.9023 4161.5967 -4162.0264 4161.6743 C
-4161.9258 4161.6963 -4161.7842 4161.7822 -4161.6631 4161.7017 C
f
-4170.9639 4162.7314 m
-4171.1826 4162.5225 L
-4171.1055 4162.6475 -4171.0654 4162.709 -4170.9639 4162.7314 C
f
-4174.3281 4169.8765 m
-4174.334 4169.9272 -4174.3506 4169.9692 -4174.3721 4170.0093 C
-4174.3506 4169.9771 -4174.335 4169.9336 -4174.3281 4169.8765 c
f
-4174.3721 4170.0093 m
-4174.5215 4170.2271 -4174.9814 4169.8887 -4175.1475 4170.2192 C
-4175.126 4170.1187 L
-4175.4346 4170.3145 L
-4175.1455 4170.2856 -4174.5391 4170.3267 -4174.3721 4170.0093 C
f
U
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 40)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8046.4521 8047.5977 m
-7654.6909 8047.5977 L
-7654.6909 7955.9082 L
-8046.4521 7955.9082 L
-8046.4521 8047.5977 L
n
0 O
0 0 0 1 k
1 XR
-7659.3535 7989.9209 m
-7661.1113 7989.9209 -7780.7817 7992.0918 -7856.6519 7993.4717 C
-7877.4663 7992.5352 -7898.2529 7991.2227 -7919.0547 7989.502 C
-7921.5327 7989.1514 -7924.3472 7988.7949 -7925.8584 7988.6006 c
-7926.7114 7988.4863 -7927.5732 7988.3857 -7928.4375 7988.293 C
-7927.9829 7988.0605 -7927.54 7987.7998 -7927.1167 7987.4941 C
-7926.25 7986.7324 -7925.3955 7985.832 -7924.8735 7984.4541 C
-7924.8979 7984.1689 -7924.6997 7983.8193 -7924.6523 7983.5293 c
-7924.5532 7982.9121 -7924.6382 7982.1631 -7924.7319 7981.627 c
-7924.7939 7981.2725 -7924.9551 7981.0254 -7925.0259 7980.7314 c
-7925.0488 7980.6348 -7924.9785 7980.5762 -7925.0059 7980.502 c
-7925.1396 7980.1484 -7925.5313 7979.5518 -7925.7539 7979.2266 c
-7925.8579 7979.0762 -7925.9873 7978.9775 -7926.1035 7978.8193 c
-7926.1196 7978.7969 -7926.0669 7978.7354 -7926.0928 7978.7061 c
-7926.6484 7978.0664 -7927.4312 7977.541 -7928.3955 7977.0762 c
-7928.4546 7977.0508 -7928.4639 7977.1445 -7928.5366 7977.0869 C
-7928.8213 7976.9658 -7929.1143 7976.8535 -7929.3945 7976.791 c
-7930.8965 7976.4629 -7932.7163 7976.8477 -7933.8027 7977.6328 c
-7934.7998 7978.3555 -7935.5308 7979.8623 -7935.4678 7981.0742 c
-7935.4126 7982.1094 -7934.6665 7983.2578 -7933.4458 7984.0352 c
-7932.3604 7984.7295 -7931.0479 7984.9834 -7930.2373 7984.3594 C
-7930.6499 7984.2295 -7930.9688 7984.0332 -7931.0811 7983.7529 C
-7931.0908 7983.4766 -7931.0967 7983.1992 -7930.8755 7982.8594 C
-7930.4517 7982.4863 -7929.7925 7982.248 -7929.1235 7982.7158 c
-7928.1846 7983.3701 -7928.0728 7984.7891 -7929.0342 7985.5361 C
-7929.3086 7985.6406 -7929.5586 7985.8789 -7929.75 7985.9834 c
-7930.1826 7986.2188 -7930.5586 7986.3857 -7930.9751 7986.543 c
-7932.0938 7986.959 -7933.4839 7987.418 -7934.5327 7987.5977 c
-7934.7114 7987.6289 -7934.8989 7987.6475 -7935.0806 7987.6738 C
-7938.4038 7987.3789 -7941.54 7987.0693 -7944.1416 7986.5264 C
-7944.1138 7986.5234 -7944.0908 7986.5244 -7944.0586 7986.5205 c
-7943.2378 7986.4199 -7942.6309 7986.2529 -7941.9043 7986.0137 c
-7941.6328 7985.9238 -7941.3184 7985.9121 -7941.0825 7985.8154 c
-7940.9985 7985.7852 -7940.9409 7985.6602 -7940.8472 7985.6133 c
-7940.5371 7985.4609 -7940.2129 7985.3662 -7939.8999 7985.1602 c
-7938.9097 7984.5059 -7937.8774 7983.3359 -7937.7617 7981.8682 C
-7937.9463 7980.8262 -7938.3643 7979.8525 -7939.5938 7979.0781 c
-7939.7217 7978.9961 -7939.8662 7978.96 -7939.9995 7978.8828 C
-7941.8516 7978.2168 -7943.5913 7979.3135 -7943.8066 7981.2061 C
-7943.7119 7981.375 -7943.6499 7981.5527 -7943.6616 7981.752 C
-7943.2939 7982.4492 -7941.9033 7983.0557 -7941.3057 7982.6143 C
-7941.6133 7982.5566 -7941.7495 7982.5254 -7941.8638 7982.2637 C
-7941.8892 7981.6074 -7941.0679 7981.4336 -7940.6528 7982.0176 C
-7940.4966 7982.7021 -7940.7676 7983.2529 -7941.2939 7983.8105 c
-7941.5068 7984.0361 -7941.7837 7984.1689 -7942.0566 7984.3545 c
-7942.4199 7984.6016 -7942.7495 7984.8828 -7943.1118 7985.0332 c
-7943.4385 7985.1689 -7943.8115 7985.2012 -7944.1445 7985.2891 c
-7944.2349 7985.3105 -7944.2969 7985.3613 -7944.3706 7985.3789 c
-7944.6274 7985.4336 -7944.8359 7985.5146 -7945.0879 7985.5469 c
-7945.4209 7985.585 -7945.7739 7985.5488 -7946.1528 7985.585 c
-7946.3398 7985.6055 -7946.5195 7985.6953 -7946.7144 7985.7109 c
-7946.8413 7985.7207 -7946.9722 7985.7207 -7947.1025 7985.7227 C
-7949.8135 7984.8213 -7952.0957 7983.6094 -7953.9814 7981.2793 c
-7957.6704 7976.7227 -7952.0415 7972.5566 -7950.9902 7976.5977 C
-7952.9668 7978.0361 -7956.5874 7981.1201 -7948.8892 7981.2471 C
-7940.6045 7979.7549 -7947.6982 7964.4922 -7957.6509 7968.5576 c
-7966.0151 7971.9746 -7962.1328 7980.6387 -7956.4658 7984.293 c
-7947.9902 7989.7559 -7938.5376 7990.4922 -7928.7012 7990.584 C
-7939.3862 7995.0488 -7953.9243 7992.4033 -7961.9897 7984.3809 c
-7966.1011 7980.293 -7970.0435 7973.9912 -7968.8193 7967.8896 c
-7967.5742 7961.6816 -7961.1616 7967.4238 -7966.0957 7967.4424 C
-7965.8896 7973.0059 -7952.6387 7966.9648 -7958.9307 7958.8281 c
-7964.6011 7951.4922 -7974.5698 7959.5225 -7976.3242 7965.9482 c
-7982.0239 7986.8359 -7952.3545 7992.7129 -7938.3813 7993.4238 C
-7950.1143 7996.7754 -7966.3892 7994.2734 -7977.5547 7989.7852 c
-7981.9663 7988.0098 -7986.9707 7984.8926 -7989.5479 7980.7773 c
-7993.4619 7974.5264 -7986.4268 7970.2842 -7985.8955 7972.4033 c
-7985.4697 7974.0957 -7991.3765 7974.623 -7986.8267 7977.6992 c
-7982.8091 7980.418 -7979.2759 7974.209 -7978.4619 7971.0781 c
-7974.6782 7956.5322 -7996.0601 7958.4609 -7998.3667 7972.1982 c
-8003.5103 8002.8271 -7957.3071 7996.457 -7941.4902 7995.5928 C
-7941.7124 7995.7617 -7941.9331 7995.9189 -7942.1543 7996.082 C
-7947.4346 7997.585 -7952.6416 7999.7861 -7957.46 8002.5469 C
-7971.9546 8004.2813 -7984.7495 7993.8906 -8000.5913 7988.6152 c
-8009.5635 7985.6289 -8020.0933 7989.9277 -8028.2778 7985.3145 c
-8032.6235 7982.8545 -8035.6982 7980.2656 -8037.2959 7975.0518 C
-8038.9092 7966.1104 -8029.2979 7964.9717 -8031.1396 7969.6416 C
-8032.8428 7969.9688 -8032.1772 7968.834 -8033.3354 7968.8418 C
-8037.2861 7972.5479 -8029.0244 7977.7314 -8025.1606 7974.4316 c
-8018.4497 7968.7031 -8023.2563 7960.332 -8030.0864 7958.0557 C
-8048.5703 7958.25 -8049 7980.8613 -8043.0474 7993.3594 c
-8027.2217 8026.585 -7993.1445 8014.582 -7965.5376 8007.5479 C
-7969.2817 8010.0732 -7971.8975 8013.6426 -7974.5747 8017.2158 c
-7979.2197 8023.416 -7981.6694 8032.8545 -7973.0024 8036.8613 C
-7972.1616 8040.9834 -7970.6392 8044.8857 -7966.5669 8046.7695 c
-7961.7471 8049 -7956.8457 8046.5586 -7955.5508 8041.4512 C
-7955.4766 8038.6729 -7956.1968 8036.8262 -7958.5938 8035.3887 c
-7960.1733 8034.4414 -7965.5176 8034.5313 -7962.8574 8037.5342 C
-7960.9663 8036.041 -7961.1323 8038.4873 -7962.0112 8039.6006 C
-7964.8823 8039.5693 -7965.5771 8037.4873 -7965.5156 8034.5186 c
-7965.5151 8034.4961 -7965.5142 8034.4697 -7965.5146 8034.4434 C
-7965.3574 8027.1367 -7964.1343 8021.3242 -7962.0718 8016.7285 C
-7962.0713 8016.7305 -7962.0708 8016.7314 -7962.0698 8016.7324 c
-7961.8242 8017.2158 -7961.4819 8017.5 -7961.2485 8017.8945 c
-7961.1729 8018.0234 -7961.2495 8018.1387 -7961.1753 8018.2334 c
-7960.8262 8018.6855 -7959.9971 8019.3701 -7959.5313 8019.7402 c
-7959.3135 8019.9121 -7959.0835 8019.998 -7958.8477 8020.1729 c
-7958.8125 8020.1973 -7958.8613 8020.3105 -7958.8115 8020.3418 c
-7957.7256 8021.0176 -7956.3638 8021.4277 -7954.7661 8021.6709 C
-7954.6699 8021.6816 -7954.6978 8021.543 -7954.5669 8021.5938 C
-7954.1035 8021.6406 -7953.6309 8021.6738 -7953.1982 8021.6387 c
-7950.8862 8021.4453 -7948.4316 8020.084 -7947.2129 8018.4668 c
-7946.0942 8016.9854 -7945.7095 8014.4854 -7946.3379 8012.7646 c
-7946.8774 8011.2949 -7948.4629 8009.9697 -7950.5684 8009.3906 c
-7952.4419 8008.873 -7954.4492 8009.084 -7955.3408 8010.3477 C
-7954.6875 8010.3535 -7954.1406 8010.4941 -7953.8545 8010.8477 C
-7953.7178 8011.2422 -7953.5859 8011.6387 -7953.7539 8012.2266 C
-7954.2002 8012.9541 -7955.0469 8013.5898 -7956.2178 8013.2129 c
-7957.4604 8012.8135 -7958.2119 8011.5781 -7958.0532 8010.3486 C
-7952.7505 8004.2031 -7945.0386 8001.6465 -7936.2539 8001.0537 C
-7936.2886 8001.0684 -7936.3218 8001.0801 -7936.3604 8001.0977 c
-7937.5015 8001.6064 -7938.3027 8002.1143 -7939.2437 8002.7832 c
-7939.5957 8003.0332 -7940.0439 8003.1914 -7940.3428 8003.4316 c
-7940.4492 8003.5166 -7940.4766 8003.7227 -7940.5913 8003.8301 c
-7940.9707 8004.1895 -7941.3975 8004.4688 -7941.7563 8004.9063 c
-7942.8945 8006.2891 -7943.8662 8008.4346 -7943.3809 8010.6016 C
-7942.6523 8012.0234 -7941.6162 8013.2441 -7939.4995 8013.8145 c
-7939.2788 8013.875 -7939.0542 8013.8633 -7938.8276 8013.918 C
-7935.8613 8014.0537 -7933.8369 8011.7021 -7934.3667 8008.875 C
-7934.5781 8008.6738 -7934.7471 8008.4434 -7934.8184 8008.1514 C
-7935.6582 8007.3105 -7937.9336 8007.0508 -7938.5996 8007.9521 C
-7938.1309 8007.9004 -7937.9199 8007.8848 -7937.6387 8008.2109 C
-7937.3105 8009.1475 -7938.4189 8009.7617 -7939.2759 8009.1045 C
-7939.8052 8008.1865 -7939.6587 8007.2695 -7939.1479 8006.2314 c
-7938.9409 8005.8105 -7938.5991 8005.5 -7938.2881 8005.1104 c
-7937.8735 8004.5938 -7937.5239 8004.041 -7937.0669 8003.6621 c
-7936.6563 8003.3232 -7936.1318 8003.1094 -7935.6899 8002.8369 c
-7935.5708 8002.7646 -7935.5039 8002.6641 -7935.4043 8002.6074 c
-7935.0596 8002.4121 -7934.7935 8002.2031 -7934.4438 8002.0469 c
-7933.9819 8001.8418 -7933.4561 8001.7373 -7932.9253 8001.5146 c
-7932.6636 8001.4063 -7932.4443 8001.1953 -7932.1709 8001.085 c
-7932.0063 8001.0215 -7931.8311 8000.9688 -7931.6592 8000.9141 C
-7930.2695 8000.918 -7928.8613 8000.957 -7927.4375 8001.0342 c
-7925.7285 8001.0801 -7923.4653 8001.0938 -7921.5728 8001.166 C
-7889.4688 7997.6533 -7856.98 7996.7305 -7824.4746 7996.2822 C
-7751.0664 7997.6152 -7660.8774 7999.248 -7659.3535 7999.248 c
-7656.7773 7999.248 -7654.6909 7997.1602 -7654.6909 7994.584 c
-7654.6909 7992.0078 -7656.7773 7989.9209 -7659.3535 7989.9209 c
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -
( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -
(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -
(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -
( 15 pt. Round/ Adobe ArtOnPath Brush Tool/ Chalk - Scribble/ A) -
(dobe ArtOnPath Brush Tool/ Floral Stem/ Adobe PatternOnPath Br) -
(ush Tool/ Decorative Border/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(15 pt. Round)
(1 15 15 100 100 15 15 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(2 pt. Oval)
(1 2 2 26 74 15 15 0 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(3 pt. Round)
(1 3 3 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Oval)
(1 5 5 10 90 -65 35 0 1 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(7 pt. Round)
(1 7 7 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Chalk - Scribble)
(1 / Unnamed 3/ / / / / 5 0 0 0 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Floral Stem)
(1 / Unnamed Brush Pat 40/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Decorative Border)
(1 / New Pattern 1/ / New Pattern 2/ / / 5 0 0.00392157 0.00392) -
(157 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 k
(White)
Pc
0 0 0 1 k
(Black)
Pc
0 1 1 0 k
(CMYK Red)
Pc
0 0 1 0 k
(CMYK Yellow)
Pc
1 0 1 0 k
(CMYK Green)
Pc
1 0 0 0 k
(CMYK Cyan)
Pc
1 1 0 0 k
(CMYK Blue)
Pc
0 1 0 0 k
(CMYK Magenta)
Pc
0.15 1 0.9 0.1 k
(C=15 M=100 Y=90 K=10)
Pc
0 0.9 0.85 0 k
(C=0 M=90 Y=85 K=0)
Pc
0 0.8 0.95 0 k
(C=0 M=80 Y=95 K=0)
Pc
0 0.5 1 0 k
(C=0 M=50 Y=100 K=0)
Pc
0 0.35 0.85 0 k
(C=0 M=35 Y=85 K=0)
Pc
0.05 0 0.9 0 k
(C=5 M=0 Y=90 K=0)
Pc
0.2 0 1 0 k
(C=20 M=0 Y=100 K=0)
Pc
0.5 0 1 0 k
(C=50 M=0 Y=100 K=0)
Pc
0.75 0 1 0 k
(C=75 M=0 Y=100 K=0)
Pc
0.85 0.1 1 0.1 k
(C=85 M=10 Y=100 K=10)
Pc
0.9 0.3 0.95 0.3 k
(C=90 M=30 Y=95 K=30)
Pc
0.75 0 0.75 0 k
(C=75 M=0 Y=75 K=0)
Pc
0.8 0.1 0.45 0 k
(C=80 M=10 Y=45 K=0)
Pc
0.7 0.15 0 0 k
(C=70 M=15 Y=0 K=0)
Pc
0.85 0.5 0 0 k
(C=85 M=50 Y=0 K=0)
Pc
1 0.95 0.05 0 k
(C=100 M=95 Y=5 K=0)
Pc
1 1 0.25 0.25 k
(C=100 M=100 Y=25 K=25)
Pc
0.75 1 0 0 k
(C=75 M=100 Y=0 K=0)
Pc
0.5 1 0 0 k
(C=50 M=100 Y=0 K=0)
Pc
0.35 1 0.35 0.1 k
(C=35 M=100 Y=35 K=10)
Pc
0.1 1 0.5 0 k
(C=10 M=100 Y=50 K=0)
Pc
0 0.95 0.2 0 k
(C=0 M=95 Y=20 K=0)
Pc
0.25 0.25 0.4 0 k
(C=25 M=25 Y=40 K=0)
Pc
0.4 0.45 0.5 0.05 k
(C=40 M=45 Y=50 K=5)
Pc
0.5 0.5 0.6 0.25 k
(C=50 M=50 Y=60 K=25)
Pc
0.55 0.6 0.65 0.4 k
(C=55 M=60 Y=65 K=40)
Pc
0.25 0.4 0.65 0 k
(C=25 M=40 Y=65 K=0)
Pc
0.3 0.5 0.75 0.1 k
(C=30 M=50 Y=75 K=10)
Pc
0.35 0.6 0.8 0.25 k
(C=35 M=60 Y=80 K=25)
Pc
0.4 0.65 0.9 0.35 k
(C=40 M=65 Y=90 K=35)
Pc
0.4 0.7 1 0.5 k
(C=40 M=70 Y=100 K=50)
Pc
0.5 0.7 0.8 0.7 k
(C=50 M=70 Y=80 K=70)
Pc
Bb
2 (Fade to Black) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Fade to Black)
Pc
Bb
0 0 0 0 Bh
2 (Super Soft Black Vignette) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Super Soft Black Vignette)
Pc
Bb
2 (Green, Yellow, Orange) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Green, Yellow, Orange)
Pc
Bb
0 0 0 0 Bh
2 (Purple Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Purple Radial)
Pc
(Laguna) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Laguna)
Pc
0 0 0 1 k
(C=0 M=0 Y=0 K=100)
Pc
0 0 0 0.899994 k
(C=0 M=0 Y=0 K=90)
Pc
0 0 0 0.799988 k
(C=0 M=0 Y=0 K=80)
Pc
0 0 0 0.699997 k
(C=0 M=0 Y=0 K=70)
Pc
0 0 0 0.599991 k
(C=0 M=0 Y=0 K=60)
Pc
0 0 0 0.5 k
(C=0 M=0 Y=0 K=50)
Pc
0 0 0 0.399994 k
(C=0 M=0 Y=0 K=40)
Pc
0 0 0 0.299988 k
(C=0 M=0 Y=0 K=30)
Pc
0 0 0 0.199997 k
(C=0 M=0 Y=0 K=20)
Pc
0 0 0 0.099991 k
(C=0 M=0 Y=0 K=10)
Pc
0 0 0 0.049988 k
(C=0 M=0 Y=0 K=5)
Pc
0 1 1 0 k
(C=0 M=100 Y=100 K=0)
Pc
0 0.75 1 0 k
(C=0 M=75 Y=100 K=0)
Pc
0 0.1 0.95 0 k
(C=0 M=10 Y=95 K=0)
Pc
0.85 0.1 1 0 k
(C=85 M=10 Y=100 K=0)
Pc
1 0.9 0 0 k
(C=100 M=90 Y=0 K=0)
Pc
0.6 0.9 0.000031 0.000031 k
(C=60 M=90 Y=0 K=0)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
*u
1 D
0 O
0.75 1 0 0 k
0 J 0 j 1 w 10 M []0 d0 XR
171.9912 -147.2988 m
160.9668 -147.2988 L
149.9668 -147.2988 140.9673 -138.2988 140.9673 -127.2988 C
140.9673 -110.6055 L
140.9673 -99.6055 131.9673 -90.6055 120.9673 -90.6055 C
109.9438 -90.6055 L
98.9438 -90.6055 89.9438 -99.6055 89.9438 -110.6055 C
89.9438 -172.6523 L
89.9438 -183.6523 98.9438 -192.6523 109.9438 -192.6523 C
143.8008 -192.6523 L
134.5776 -183.4297 L
133.0059 -181.8574 130.0278 -180.4795 128.2041 -180.4795 C
123.9521 -180.4795 L
123.9521 -176.4795 L
128.2041 -176.4795 L
131.0527 -176.4795 135.0947 -178.29 137.4058 -180.6016 C
149.457 -192.6523 L
155.1396 -192.6523 L
123.2393 -160.752 L
121.6675 -159.1797 118.3398 -157.8018 116.1177 -157.8018 C
106.9438 -157.8018 L
106.9438 -153.8018 L
116.1177 -153.8018 L
119.3857 -153.8018 123.7563 -155.6123 126.0674 -157.9238 C
160.7959 -192.6523 L
166.4775 -192.6523 L
126.0737 -152.248 L
123.7627 -149.9375 121.9521 -145.5664 121.9521 -142.2988 C
121.9521 -135.29 L
121.9521 -133.6357 120.6064 -132.29 118.9521 -132.29 C
104.1094 -132.29 L
104.1094 -128.29 L
118.9521 -128.29 L
122.812 -128.29 125.9521 -131.4302 125.9521 -135.29 C
125.9521 -142.2988 L
125.9521 -144.5215 127.3306 -147.8486 128.9019 -149.4199 C
172.127 -192.6455 L
173.8535 -192.6338 175.5215 -192.3848 177.1211 -191.957 C
134.5776 -149.4141 L
132.2666 -147.1025 130.4561 -142.7319 130.4561 -139.4639 C
130.4561 -123.9512 L
130.4561 -121.729 129.0776 -118.4014 127.5063 -116.8296 C
116.8687 -106.1924 L
119.6968 -103.3643 L
130.3345 -114.0015 L
132.6455 -116.3125 134.4561 -120.6831 134.4561 -123.9512 C
134.4561 -139.4639 L
134.4561 -141.686 135.8345 -145.0137 137.4058 -146.5859 C
181.1973 -190.377 L
187.5938 -187.0313 191.9912 -180.3359 191.9912 -172.6523 C
191.9912 -167.2988 L
191.9912 -156.2988 182.9912 -147.2988 171.9912 -147.2988 C
f
0 D
174.9834 -172.8096 m
170.2861 -172.8096 166.4795 -169.0029 166.4795 -164.3057 c
166.4795 -159.6094 170.2861 -155.8027 174.9834 -155.8027 c
179.6797 -155.8027 183.4873 -159.6094 183.4873 -164.3057 c
183.4873 -169.0029 179.6797 -172.8096 174.9834 -172.8096 c
f
*U
0 1 0 0 k
137.4058 -146.5859 m
135.8345 -145.0137 134.4561 -141.686 134.4561 -139.4639 C
134.4561 -123.9512 L
134.4561 -120.6831 132.6455 -116.3125 130.3345 -114.0015 C
125.5352 -109.2026 L
126.3237 -107.9126 126.7866 -106.4014 126.7866 -104.7783 c
126.7866 -100.082 122.9795 -96.2744 118.2827 -96.2744 c
113.5859 -96.2744 109.7788 -100.082 109.7788 -104.7783 c
109.7788 -109.4756 113.5859 -113.2822 118.2827 -113.2822 c
119.9058 -113.2822 121.417 -112.8193 122.707 -112.0308 C
127.5063 -116.8296 L
129.0776 -118.4014 130.4561 -121.729 130.4561 -123.9512 C
130.4561 -139.4639 L
130.4561 -142.7319 132.2666 -147.1025 134.5776 -149.4141 C
177.1211 -191.957 L
178.5469 -191.5742 179.9141 -191.0488 181.1973 -190.377 C
137.4058 -146.5859 L
f
1 0 0 0 k
128.9019 -149.4199 m
127.3306 -147.8486 125.9521 -144.5215 125.9521 -142.2988 C
125.9521 -135.29 L
125.9521 -131.4302 122.812 -128.29 118.9521 -128.29 C
112.3672 -128.29 L
111.4663 -124.5601 108.1162 -121.7861 104.1094 -121.7861 c
99.4126 -121.7861 95.6055 -125.5928 95.6055 -130.29 c
95.6055 -134.9873 99.4126 -138.7939 104.1094 -138.7939 c
108.1162 -138.7939 111.4663 -136.02 112.3672 -132.29 C
118.9521 -132.29 L
120.6064 -132.29 121.9521 -133.6357 121.9521 -135.29 C
121.9521 -142.2988 L
121.9521 -145.5664 123.7627 -149.9375 126.0737 -152.248 C
166.4775 -192.6523 L
171.9912 -192.6523 L
172.0371 -192.6523 172.0811 -192.6455 172.127 -192.6455 C
128.9019 -149.4199 L
f
0.75 0 0.75 0 k
126.0674 -157.9238 m
123.7563 -155.6123 119.3857 -153.8018 116.1177 -153.8018 C
112.3672 -153.8018 L
111.4668 -150.0723 108.1162 -147.2979 104.1094 -147.2979 c
99.4126 -147.2979 95.6055 -151.1045 95.6055 -155.8008 c
95.6055 -160.498 99.4126 -164.3047 104.1094 -164.3047 c
108.1157 -164.3047 111.4658 -161.5313 112.3667 -157.8018 C
116.1177 -157.8018 L
118.3398 -157.8018 121.6675 -159.1797 123.2393 -160.752 C
155.1396 -192.6523 L
160.7959 -192.6523 L
126.0674 -157.9238 L
f
0 0.5 1 0 k
137.4058 -180.6016 m
135.0947 -178.29 131.0527 -176.4795 128.2041 -176.4795 C
126.54 -176.4795 L
125.6396 -172.75 122.2891 -169.9766 118.2827 -169.9766 c
113.5859 -169.9766 109.7788 -173.7832 109.7788 -178.4795 c
109.7788 -183.1768 113.5859 -186.9834 118.2827 -186.9834 c
122.2896 -186.9834 125.6396 -184.209 126.5405 -180.4795 C
128.2041 -180.4795 L
130.0278 -180.4795 133.0059 -181.8574 134.5776 -183.4297 C
143.8008 -192.6523 L
149.457 -192.6523 L
137.4058 -180.6016 L
f
0 0 0 0.5 k
152.9258 -108.3218 m
152.585 -111.0508 154.5557 -113.2832 157.3057 -113.2832 c
175.6523 -113.2832 l
178.4023 -113.2832 180.373 -111.0508 180.0322 -108.3218 c
178.4375 -95.5679 l
178.0967 -92.8389 175.5674 -90.6064 172.8174 -90.6064 c
160.1406 -90.6064 l
157.3906 -90.6064 154.8613 -92.8389 154.5205 -95.5679 c
152.9258 -108.3218 l
f
0 0 0 0.899994 k
172.1484 -132.457 m
172.1484 -129.707 174.0625 -126.8193 176.4004 -126.0396 c
178.7383 -125.2598 180.6523 -122.7085 180.6523 -120.3701 c
180.6523 -118.0317 180.6523 -116.1182 Y
152.3057 -116.1182 L
152.3057 -118.0317 152.3057 -120.3701 v
152.3057 -122.7085 154.2188 -125.2598 156.5576 -126.0396 c
158.8965 -126.8193 160.8096 -129.707 160.8096 -132.457 C
160.8096 -144.4648 L
172.1484 -144.4648 L
172.1484 -132.457 L
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
