MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename=".OPfallbacks"
Content-Type: application/external-reference

.OPfallbacks

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename=".OPdummydefs"
Content-Type: application/external-reference

.OPdummydefs

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="node_type"
Content-Type: text/plain

Sop

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.init"
Content-Type: text/plain

type = mlops::sd_controlnet_conditioning::1.0
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 9.15069 -0.617615
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	image_to_points3 0 1 "input1"
}
inputs
{
0 	image_to_points3 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.inp"
Content-Type: text/plain

1
0 -4.9499657690228833 9.8002984824968511 2 0 __NO_OWNER_NETWORK_BOX__ "FROMOUTPUT"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.init"
Content-Type: text/plain

type = output
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -4.58347 3.34928
connectornextid 1
flags =  lock off model off template on footprint off xray off bypass off display on render on highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
0 	attribdelete1 1 1 "input1"
}
inputs
{
0 	attribdelete1 0 1
}
stat
{
  create -1
  modify -1
  author Paul@M16AMTA
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.parm"
Content-Type: text/plain

{
version 0.8
outputidx	[ 0	locks=0 ]	(	0	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.init"
Content-Type: text/plain

type = python
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -4.58347 6.43864
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	attribwrangle2 1 1 "input1"
}
inputs
{
0 	attribwrangle2 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.parm"
Content-Type: text/plain

{
version 0.8
python	[ 0	locks=0 ]	(	"import numpy
import mlops_utils
from controlnet_aux import OpenposeDetector, MLSDdetector, HEDdetector, CannyDetector, MidasDetector
from transformers import pipeline
from PIL import Image
from imp import reload
reload(mlops_utils)
import os
# Input Geometry
node = hou.pwd()
geo = node.geometry()
geo1 = node.geometry()

# Parameters
cache_only = node.parent().parm(\"cache_only\").evalAsInt()
model_type = node.parent().parm(\"conditioning\").evalAsString()

# Attributes
width = int(geo1.attribValue(\"image_dimension\")[0])
height = int(geo1.attribValue(\"image_dimension\")[1]) 
r = numpy.array(geo1.pointFloatAttribValues(\"r\"), dtype=numpy.float16).reshape(width, height) * 255
g = numpy.array(geo1.pointFloatAttribValues(\"g\"), dtype=numpy.float16).reshape(width, height) * 255
b = numpy.array(geo1.pointFloatAttribValues(\"b\"), dtype=numpy.float16).reshape(width, height) * 255
input_colors = numpy.stack((r,g,b), axis=0)
input_image = input_colors.astype('uint8')
cache = hou.text.expandString(os.path.join(\"$MLOPS/checkpoints/\", \"cache\"))


if model_type == \"cannydetector\":
    canny = CannyDetector()
    input_image = numpy.transpose(input_image, (1, 2, 0))
    image = canny(input_image, node.parent().parm(\"canny_low\").evalAsInt(), node.parent().parm(\"canny_high\").evalAsInt())
    image = image[:, :, None]
    image = numpy.concatenate([image, image, image], axis=2)
    image = image.reshape(-1, 3) / 255.0

elif model_type == \"hed\":
    # model_path = mlops_utils.ensure_huggingface_model_local(node.parent().parm(\"hed_path\").evalAsString(), \"$MLOPS_MODELS\", bool(cache_only))
    model_path = node.parent().parm(\"hed_path\").evalAsString()
    hed = HEDdetector.from_pretrained(model_path, cache_dir=cache)
    input_image = numpy.transpose(input_image, (1, 2, 0))
    pil = hed(input_image, scribble=True)
    image = numpy.asarray(pil)
    image = image / 255
    image = image.reshape(pil.size[0], pil.size[1], 3)
    image = image.reshape(-1, 3)

elif model_type == \"depth\":
    depth_estimator = pipeline('depth-estimation')
    input_colors = input_colors.astype(numpy.uint8)
    image = Image.fromarray(input_colors.transpose(1, 2, 0))
    image = depth_estimator(image)['depth']
    image = numpy.array(image)
    image = image[:, :, None]
    image = numpy.concatenate([image, image, image], axis=2)
    image = image.reshape(-1, 3) /255

elif model_type == \"mlsd\":
    # model_path = mlops_utils.ensure_huggingface_model_local(node.parent().parm(\"mlsd_path\").evalAsString(), \"$MLOPS_MODELS\", bool(cache_only))
    model_path = node.parent().parm(\"mlsd_path\").evalAsString()
    mlsd = MLSDdetector.from_pretrained(model_path, cache_dir=cache)
    input_image = numpy.transpose(input_image, (1, 2, 0))
    pil = mlsd(input_image)
    image = numpy.asarray(pil)
    image = image / 255
    image = image.reshape(pil.size[0], pil.size[1], 3)
    image = image.reshape(-1, 3)

elif model_type == \"openpose\":
    # model_path = mlops_utils.ensure_huggingface_model_local(node.parent().parm(\"openpose_path\").evalAsString(), \"$MLOPS_MODELS\", bool(cache_only))
    model_path = node.parent().parm(\"openpose_path\").evalAsString()
    apply_openpose = OpenposeDetector.from_pretrained(model_path, cache_dir=cache)
    input_image = numpy.transpose(input_image, (1, 2, 0))
    image = numpy.asarray(apply_openpose(input_image))
    image = image.astype(numpy.uint8) / 255
    image = image.reshape(-1, 3)

elif model_type == \"segment\":
    from transformers import AutoImageProcessor, UperNetForSemanticSegmentation
    import torch
    # model_path = mlops_utils.ensure_huggingface_model_local(node.parent().parm(\"segment_path\").evalAsString(), \"$MLOPS_MODELS\", bool(cache_only))
    model_path = node.parent().parm(\"segment_path\").evalAsString()
    image_processor = AutoImageProcessor.from_pretrained(model_path, local_files_only=bool(cache_only), cache_dir=cache)
    image_segmentor = UperNetForSemanticSegmentation.from_pretrained(model_path, local_files_only=bool(cache_only), cache_dir=cache)

    def ade_palette():
        return [[120, 120, 120], [180, 120, 120], [6, 230, 230], [80, 50, 50],
                [4, 200, 3], [120, 120, 80], [140, 140, 140], [204, 5, 255],
                [230, 230, 230], [4, 250, 7], [224, 5, 255], [235, 255, 7],
                [150, 5, 61], [120, 120, 70], [8, 255, 51], [255, 6, 82],
                [143, 255, 140], [204, 255, 4], [255, 51, 7], [204, 70, 3],
                [0, 102, 200], [61, 230, 250], [255, 6, 51], [11, 102, 255],
                [255, 7, 71], [255, 9, 224], [9, 7, 230], [220, 220, 220],
                [255, 9, 92], [112, 9, 255], [8, 255, 214], [7, 255, 224],
                [255, 184, 6], [10, 255, 71], [255, 41, 10], [7, 255, 255],
                [224, 255, 8], [102, 8, 255], [255, 61, 6], [255, 194, 7],
                [255, 122, 8], [0, 255, 20], [255, 8, 41], [255, 5, 153],
                [6, 51, 255], [235, 12, 255], [160, 150, 20], [0, 163, 255],
                [140, 140, 140], [250, 10, 15], [20, 255, 0], [31, 255, 0],
                [255, 31, 0], [255, 224, 0], [153, 255, 0], [0, 0, 255],
                [255, 71, 0], [0, 235, 255], [0, 173, 255], [31, 0, 255],
                [11, 200, 200], [255, 82, 0], [0, 255, 245], [0, 61, 255],
                [0, 255, 112], [0, 255, 133], [255, 0, 0], [255, 163, 0],
                [255, 102, 0], [194, 255, 0], [0, 143, 255], [51, 255, 0],
                [0, 82, 255], [0, 255, 41], [0, 255, 173], [10, 0, 255],
                [173, 255, 0], [0, 255, 153], [255, 92, 0], [255, 0, 255],
                [255, 0, 245], [255, 0, 102], [255, 173, 0], [255, 0, 20],
                [255, 184, 184], [0, 31, 255], [0, 255, 61], [0, 71, 255],
                [255, 0, 204], [0, 255, 194], [0, 255, 82], [0, 10, 255],
                [0, 112, 255], [51, 0, 255], [0, 194, 255], [0, 122, 255],
                [0, 255, 163], [255, 153, 0], [0, 255, 10], [255, 112, 0],
                [143, 255, 0], [82, 0, 255], [163, 255, 0], [255, 235, 0],
                [8, 184, 170], [133, 0, 255], [0, 255, 92], [184, 0, 255],
                [255, 0, 31], [0, 184, 255], [0, 214, 255], [255, 0, 112],
                [92, 255, 0], [0, 224, 255], [112, 224, 255], [70, 184, 160],
                [163, 0, 255], [153, 0, 255], [71, 255, 0], [255, 0, 163],
                [255, 204, 0], [255, 0, 143], [0, 255, 235], [133, 255, 0],
                [255, 0, 235], [245, 0, 255], [255, 0, 122], [255, 245, 0],
                [10, 190, 212], [214, 255, 0], [0, 204, 255], [20, 0, 255],
                [255, 255, 0], [0, 153, 255], [0, 41, 255], [0, 255, 204],
                [41, 0, 255], [41, 255, 0], [173, 0, 255], [0, 245, 255],
                [71, 0, 255], [122, 0, 255], [0, 255, 184], [0, 92, 255],
                [184, 255, 0], [0, 133, 255], [255, 214, 0], [25, 194, 194],
                [102, 255, 0], [92, 0, 255]]

    input_image = numpy.transpose(input_image, (1, 2, 0))
    input_image = Image.fromarray(input_image)
    pixel_values = image_processor(input_image, return_tensors=\"pt\").pixel_values
    with torch.no_grad():
        outputs = image_segmentor(pixel_values)
    seg = image_processor.post_process_semantic_segmentation(outputs, target_sizes=[input_image.size[::-1]])[0]
    color_seg = numpy.zeros((seg.shape[0], seg.shape[1], 3), dtype=numpy.uint8)
    palette = numpy.array(ade_palette())
    for label, color in enumerate(palette):
        color_seg[seg == label, :] = color
    color_seg = color_seg.astype(numpy.uint8) / 255
    image = color_seg.reshape(-1, 3)

# Export
r = tuple(map(float, [c[0] for c in image]))
geo.setPointFloatAttribValues(\"r\", r)
g = tuple(map(float, [c[1] for c in image]))
geo.setPointFloatAttribValues(\"g\", g)
b = tuple(map(float, [c[2] for c in image]))
geo.setPointFloatAttribValues(\"b\", b)"	)
maintainstate	[ 0	locks=0 ]	(	"off"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribwrangle2.init"
Content-Type: text/plain

type = attribwrangle
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribwrangle2.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -5.14014 7.6938
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	resize_image1 1 1 "input1"
}
inputs
{
0 	resize_image1 0 1
}
stat
{
  create -1
  modify -1
  author Paul@M16AMTA
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribwrangle2.parm"
Content-Type: text/plain

{
version 0.8
folder0	[ 0	locks=0 ]	(	0	0	)
group	[ 0	locks=0 ]	(	""	)
grouptype	[ 0	locks=0 ]	(	"guess"	)
class	[ 0	locks=0 ]	(	"point"	)
vex_numcount	[ 0	locks=0 ]	(	10	)
vex_threadjobsize	[ 0	locks=0 ]	(	1024	)
snippet	[ 0	locks=0 ]	(	"// vector mask = point(1, \"Cd\", @ptnum);
// mask = set(1.0-mask.r, 1.0-mask.g, 1.0-mask.b);

// v@Cd = (v@Cd*2.0)-1.0;
// v@Cd = set(v@Cd.r * mask.r, v@Cd.g * mask.g, v@Cd.b * mask.b);
f@mask = luminance(vector(point(1, \"Cd\", @ptnum)));
f@r = v@Cd.r;
f@g = v@Cd.g;
f@b = v@Cd.b;"	)
exportlist	[ 0	locks=0 ]	(	*	)
vex_strict	[ 0	locks=0 ]	(	"off"	)
autobind	[ 0	locks=0 ]	(	"on"	)
bindings	[ 0	locks=0 ]	(	0	)
groupautobind	[ 0	locks=0 ]	(	"on"	)
groupbindings	[ 0	locks=0 ]	(	0	)
vex_cwdpath	[ 0	locks=0 ]	(	.	)
vex_outputmask	[ 0	locks=0 ]	(	*	)
vex_updatenmls	[ 0	locks=0 ]	(	"off"	)
vex_matchattrib	[ 0	locks=0 ]	(	id	)
vex_inplace	[ 0	locks=0 ]	(	"off"	)
vex_selectiongroup	[ 0	locks=0 ]	(	""	)
vex_precision	[ 0	locks=0 ]	(	auto	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribwrangle2.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribwrangle3.init"
Content-Type: text/plain

type = attribwrangle
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribwrangle3.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -4.48232 5.44728
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	python1 1 1 "input1"
}
inputs
{
0 	python1 0 1
}
stat
{
  create -1
  modify -1
  author Paul@M16AMTA
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribwrangle3.parm"
Content-Type: text/plain

{
version 0.8
folder0	[ 0	locks=0 ]	(	0	0	)
group	[ 0	locks=0 ]	(	""	)
grouptype	[ 0	locks=0 ]	(	"guess"	)
class	[ 0	locks=0 ]	(	"point"	)
vex_numcount	[ 0	locks=0 ]	(	10	)
vex_threadjobsize	[ 0	locks=0 ]	(	1024	)
snippet	[ 0	locks=0 ]	(	"v@Cd = set(f@r, f@g, f@b);"	)
exportlist	[ 0	locks=0 ]	(	*	)
vex_strict	[ 0	locks=0 ]	(	"off"	)
autobind	[ 0	locks=0 ]	(	"on"	)
bindings	[ 0	locks=0 ]	(	0	)
groupautobind	[ 0	locks=0 ]	(	"on"	)
groupbindings	[ 0	locks=0 ]	(	0	)
vex_cwdpath	[ 0	locks=0 ]	(	.	)
vex_outputmask	[ 0	locks=0 ]	(	*	)
vex_updatenmls	[ 0	locks=0 ]	(	"off"	)
vex_matchattrib	[ 0	locks=0 ]	(	id	)
vex_inplace	[ 0	locks=0 ]	(	"off"	)
vex_selectiongroup	[ 0	locks=0 ]	(	""	)
vex_precision	[ 0	locks=0 ]	(	auto	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribwrangle3.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribdelete1.init"
Content-Type: text/plain

type = attribdelete
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribdelete1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -3.86817 4.34928
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	attribwrangle3 1 1 "input1"
}
inputs
{
0 	attribwrangle3 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribdelete1.parm"
Content-Type: text/plain

{
version 0.8
usereference	[ 0	locks=0 ]	(	"off"	)
negate	[ 0	locks=0 ]	(	"off"	)
doptdel	[ 0	locks=0 ]	(	"on"	)
ptdel	[ 0	locks=0 ]	(	"r g b"	)
dovtxdel	[ 0	locks=0 ]	(	"on"	)
vtxdel	[ 0	locks=0 ]	(	""	)
doprimdel	[ 0	locks=0 ]	(	"on"	)
primdel	[ 0	locks=0 ]	(	""	)
dodtldel	[ 0	locks=0 ]	(	"on"	)
dtldel	[ 0	locks=0 ]	(	""	)
updatevar	[ 0	locks=0 ]	(	"on"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribdelete1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resize_image1.init"
Content-Type: text/plain

type = mlops::resize_image::1.0
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resize_image1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -5.13714 8.7337
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	(0) "" 1 "input1"
}
inputs
{
0 	(0) 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resize_image1.parm"
Content-Type: text/plain

{
version 0.8
folder0	[ 0	locks=0 ]	(	0	)
width	[ 0	locks=0 ]	(	512	)
height	[ 0	locks=0 ]	(	512	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/resize_image1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.order"
Content-Type: text/plain

6
output0
python1
attribwrangle2
attribwrangle3
attribdelete1
resize_image1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.net"
Content-Type: text/plain

1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY--
