MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="node_type"
Content-Type: text/plain

Sop

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.init"
Content-Type: text/plain

type = mlops::extract_alphapose::1.0
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -1.89291 2.51496
connectornextid 1
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
}
inputs
{
}
stat
{
  create -1
  modify -1
  author Mo@MO-GPU
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/AlphaPose.init"
Content-Type: text/plain

type = python
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/AlphaPose.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0 6.1118
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
1 	attribcreate1 1 1 "input1"
}
inputs
{
0 	attribcreate1 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/AlphaPose.parm"
Content-Type: text/plain

{
version 0.8
python	[ 0	locks=0 ]	(	"import argparse
import os
import mlops_utils

import torch
import natsort 
 
from alphapose.detector.apis import get_detector
from alphapose.trackers.tracker_api import Tracker
from alphapose.trackers.tracker_cfg import cfg as tcfg
from alphapose.trackers import track
from alphapose.models import builder
from alphapose.utils.config import update_config
from alphapose.utils.detector import DetectionLoader
from alphapose.utils.transforms import flip, flip_heatmap 
from alphapose.utils.vis import getTime
from alphapose.utils.writer import DataWriter

parser = argparse.ArgumentParser(description='AlphaPose Demo') 
parser.add_argument('--cfg', type=str, required=False,
                    help='experiment configure file name')
parser.add_argument('--checkpoint', type=str, required=False,
                    help='checkpoint file name')
parser.add_argument('--det_weights', type=str, required=False,
                    help='detector weights')
parser.add_argument('--det_cfg', type=str, required=False,
                    help='detector weights')
parser.add_argument('--sp', default=False, action='store_true',
                    help='Use single process for pytorch')
parser.add_argument('--detector', dest='detector',
                    help='detector name', default=\"yolo\")
parser.add_argument('--detfile', dest='detfile',
                    help='detection result file', default=\"\")
parser.add_argument('--indir', dest='inputpath',
                    help='image-directory', default=\"\")
parser.add_argument('--list', dest='inputlist',
                    help='image-list', default=\"\")
parser.add_argument('--image', dest='inputimg',
                    help='image-name', default=\"\")
parser.add_argument('--outdir', dest='outputpath',
                    help='output-directory', default=\"examples/res/\")
parser.add_argument('--save_img', default=False, action='store_true',
                    help='save result as image')
parser.add_argument('--vis', default=False, action='store_true',
                    help='visualize image')
parser.add_argument('--showbox', default=False, action='store_true',
                    help='visualize human bbox')
parser.add_argument('--format', type=str,
                    help='save in the format of cmu or coco or openpose, option: coco/cmu/open')
parser.add_argument('--min_box_area', type=int, default=0,
                    help='min box area to filter out')
parser.add_argument('--detbatch', type=int, default=5,
                    help='detection batch size PER GPU')
parser.add_argument('--posebatch', type=int, default=64,
                    help='pose estimation maximum batch size PER GPU')
parser.add_argument('--eval', dest='eval', default=False, action='store_true',
                    help='save the result json as coco format, using image index(int) instead of image name(str)')
parser.add_argument('--gpus', type=str, dest='gpus', default=\"0\",
                    help='choose which cuda device to use by index and input comma to use multi gpus, e.g. 0,1,2,3. (input -1 for cpu only)')
parser.add_argument('--qsize', type=int, dest='qsize', default=1024,
                    help='the length of result buffer, where reducing it will lower requirement of cpu memory')
parser.add_argument('--flip', default=False, action='store_true',
                    help='enable flip testing')
parser.add_argument('--debug', default=False, action='store_true',
                    help='print detail information')
parser.add_argument('--video', dest='video',
                    help='video-name', default=\"\")
parser.add_argument('--webcam', dest='webcam', type=int,
                    help='webcam number', default=-1)
parser.add_argument('--save_video', dest='save_video',
                    help='whether to save rendered video', default=False, action='store_true')
parser.add_argument('--vis_fast', dest='vis_fast',
                    help='use fast rendering', action='store_true', default=False)
parser.add_argument('--pose_flow', dest='pose_flow',
                    help='track humans in video with PoseFlow', action='store_true', default=False)
parser.add_argument('--pose_track', dest='pose_track',
                    help='track humans in video with reid', action='store_true', default=False)

node = hou.pwd()
geo = node.geometry()

args = parser.parse_args()
args = mlops_utils.parse_args_from_node_parms(args, node.parent())
args.sp=True
cfg = update_config(args.cfg)

args.gpus = [int(i) for i in args.gpus.split(',')] if torch.cuda.device_count() >= 1 else [-1]
args.device = torch.device(\"cuda:\" + str(args.gpus[0]) if args.gpus[0] >= 0 else \"cpu\")
args.detbatch = args.detbatch * len(args.gpus)
args.posebatch = args.posebatch * len(args.gpus)
args.tracking = args.pose_track or args.pose_flow or args.detector=='tracker'


det = get_detector(args)
det.model_cfg = args.det_cfg
det.model_weights = args.det_weights
det.load_model()

def check_input():
    # for video
    if len(args.video):
        if os.path.isfile(args.video):
            return 'video', args.video

    # for images
    if len(args.inputpath) or len(args.inputlist) or len(args.inputimg):
        inputpath = args.inputpath
        inputlist = args.inputlist
        inputimg = args.inputimg

        if len(inputlist):
            im_names = open(inputlist, 'r').readlines()
        elif len(inputpath) and inputpath != '/':
            for _, _, files in os.walk(inputpath):
                im_names = files
            im_names = natsort.natsorted(im_names)
        elif len(inputimg):
            args.inputpath = os.path.split(inputimg)[0]
            im_names = [os.path.split(inputimg)[1]]

        return 'image', im_names

mode, input_source = check_input()

if not os.path.exists(args.outputpath):
    os.makedirs(args.outputpath)

det_loader = DetectionLoader(input_source, det, cfg, args, batchSize=args.detbatch, mode=mode, queueSize=args.qsize)
det_worker = det_loader.start() 


# Load pose model
pose_model = builder.build_sppe(cfg.MODEL, preset_cfg=cfg.DATA_PRESET)

pose_model.load_state_dict(torch.load(args.checkpoint, map_location=args.device))
pose_dataset = builder.retrieve_dataset(cfg.DATASET.TRAIN)
if args.pose_track:
    tracker = Tracker(tcfg, args)
if len(args.gpus) > 1:
    pose_model = torch.nn.DataParallel(pose_model, device_ids=args.gpus).to(args.device)
else:
    pose_model.to(args.device)
pose_model.eval()

# Init data writer
if args.save_video and mode != 'image':
    from alphapose.utils.writer import DEFAULT_VIDEO_SAVE_OPT as video_save_opt
    if mode == 'video':
        video_save_opt['savepath'] = os.path.join(args.outputpath, 'AlphaPose_' + os.path.basename(input_source))
    else:
        video_save_opt['savepath'] = os.path.join(args.outputpath, 'AlphaPose_webcam' + str(input_source) + '.mp4')
    video_save_opt.update(det_loader.videoinfo)
    writer = DataWriter(cfg, args, save_video=True, video_save_opt=video_save_opt, queueSize=args.qsize).start()
else:
    writer = DataWriter(cfg, args, save_video=False, queueSize=args.qsize).start()


data_len = det_loader.length

batchSize = args.posebatch
if args.flip:
    batchSize = int(batchSize / 2)

with hou.InterruptableOperation(\"Extracting Pose\", open_interrupt_dialog=True) as operation:
    for i in range(data_len):
        start_time = getTime()
        with torch.no_grad():
            (inps, orig_img, im_name, boxes, scores, ids, cropped_boxes) = det_loader.read()
            if orig_img is None:
                break
            if boxes is None or boxes.nelement() == 0:
                writer.save(None, None, None, None, None, orig_img, im_name)
                continue

            # Pose Estimation
            inps = inps.to(args.device)
            datalen = inps.size(0)
            leftover = 0
            if (datalen) % batchSize:
                leftover = 1
            num_batches = datalen // batchSize + leftover
            hm = []
            for j in range(num_batches):
                inps_j = inps[j * batchSize:min((j + 1) * batchSize, datalen)]
                if args.flip:
                    inps_j = torch.cat((inps_j, flip(inps_j)))
                hm_j = pose_model(inps_j)
                if args.flip:
                    hm_j_flip = flip_heatmap(hm_j[int(len(hm_j) / 2):], pose_dataset.joint_pairs, shift=True)
                    hm_j = (hm_j[0:int(len(hm_j) / 2)] + hm_j_flip) / 2
                hm.append(hm_j)
            hm = torch.cat(hm)
            if args.pose_track:
                boxes,scores,ids,hm,cropped_boxes = track(tracker,args,orig_img,inps,boxes,hm,cropped_boxes,im_name,scores)
            hm = hm.cpu()
            writer.save(boxes, scores, ids, hm, cropped_boxes, orig_img, im_name)

        operation.updateProgress(float(i)/float(data_len))
    writer.stop()
    det_loader.stop()
"	)
maintainstate	[ 0	locks=0 ]	(	"off"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/AlphaPose.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.init"
Content-Type: text/plain

type = output
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0 5.2176
connectornextid 1
flags =  lock off model off template off footprint off xray off bypass off display on render on highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
0 	AlphaPose 0 1 "input1"
}
inputs
{
0 	AlphaPose 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.parm"
Content-Type: text/plain

{
version 0.8
outputidx	[ 0	locks=0 ]	(	0	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribcreate1.init"
Content-Type: text/plain

type = attribcreate::2.0
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribcreate1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -2.79412 7.12352
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	null1 0 1 "input1"
}
inputs
{
0 	null1 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribcreate1.parm"
Content-Type: text/plain

{
version 0.8
group	[ 0	locks=0 ]	(	""	)
grouptype	[ 0	locks=0 ]	(	"guess"	)
encodenames	[ 0	locks=0 ]	(	"off"	)
numattr	[ 0	locks=0 ]	(	2	)
enable1	[ 0	locks=0 ]	(	"on"	)
name1	[ 0	locks=0 ]	(	video_path	)
existing1	[ 0	locks=0 ]	(	"better"	)
createvarmap1	[ 0	locks=0 ]	(	"off"	)
varname1	[ 0	locks=0 ]	(	""	)
class1	[ 0	locks=0 ]	(	"detail"	)
savetoinfo1	[ 0	locks=0 ]	(	"off"	)
type1	[ 0	locks=0 ]	(	"index"	)
typeinfo1	[ 0	locks=0 ]	(	"guess"	)
precision1	[ 0	locks=0 ]	(	"auto"	)
size1	[ 0	locks=0 ]	(	1	)
default1v	[ 0	locks=0 ]	(	0	0	0	0	)
writevalues1	[ 0	locks=0 ]	(	"on"	)
uselocal1	[ 0	locks=0 ]	(	"on"	)
value1v	[ 0	locks=0 ]	(	0	0	0	0	)
string1	[ 0	locks=0 ]	(	`chs(\"../video\")`	)
numattr_spacerparm1	[ 0	locks=0 ]	(	)
enable2	[ 0	locks=0 ]	(	"on"	)
name2	[ 0	locks=0 ]	(	output_keypoints	)
existing2	[ 0	locks=0 ]	(	"better"	)
createvarmap2	[ 0	locks=0 ]	(	"off"	)
varname2	[ 0	locks=0 ]	(	""	)
class2	[ 0	locks=0 ]	(	"detail"	)
savetoinfo2	[ 0	locks=0 ]	(	"off"	)
type2	[ 0	locks=0 ]	(	"index"	)
typeinfo2	[ 0	locks=0 ]	(	"guess"	)
precision2	[ 0	locks=0 ]	(	"auto"	)
size2	[ 0	locks=0 ]	(	1	)
default2v	[ 0	locks=0 ]	(	0	0	0	0	)
writevalues2	[ 0	locks=0 ]	(	"on"	)
uselocal2	[ 0	locks=0 ]	(	"on"	)
value2v	[ 0	locks=0 ]	(	0	0	0	0	)
string2	[ 0	locks=0 ]	(	`chs(\"../outputpath\")`/alphapose-results.json	)
numattr_spacerparm2	[ 0	locks=0 ]	(	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribcreate1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/null1.init"
Content-Type: text/plain

type = null
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/null1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -2.79067 8.22941
connectornextid 1
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
}
inputs
{
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.6 0.7 0.77 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/null1.parm"
Content-Type: text/plain

{
version 0.8
copyinput	[ 0	locks=0 ]	(	"on"	)
cacheinput	[ 0	locks=0 ]	(	"off"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/null1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.order"
Content-Type: text/plain

4
AlphaPose
output0
attribcreate1
null1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.net"
Content-Type: text/plain

1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY--
