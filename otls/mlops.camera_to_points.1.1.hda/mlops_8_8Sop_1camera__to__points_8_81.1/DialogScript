# Dialog script for mlops::camera_to_points::1.1 automatically generated

{
    name	mlops::camera_to_points::1.1
    script	leuns::dev::MLOPS_depth_reader::1.0
    label	"MLOPs Camera to Points"

    help {
	""
    }

    inputlabel	1	"Sub-Network Input #1"
    inputlabel	2	"Sub-Network Input #2"
    inputlabel	3	"Sub-Network Input #3"
    inputlabel	4	"Sub-Network Input #4"
    outputlabel	1	"Colored Points"

    groupsimple {
        name    "folder0"
        label   "Settings"

        parm {
            name    "mode"
            label   "Mode"
            type    ordinal
            default { "4" }
            menu {
                "depth"     "Depth"
                "normal"    "Normal"
                "segment"   "Segmentation"
                "albedo"    "Albedo (Cd)"
                "shading"   "Shading"
            }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "camerapath"
            label   "Camera Path"
            type    oppath
            default { "/obj/cam1/" }
            help    "Camera that will be rendered"
            parmtag { "autoscope" "0000000000000000" }
            parmtag { "opfilter" "/obj/camera" }
            parmtag { "oprelative" "." }
        }
        parm {
            name    "scenepath"
            label   "Scene Path"
            type    oppath
            default { "/obj" }
            parmtag { "autoscope" "0000000000000000" }
            parmtag { "opfilter" "!!OBJ!!" }
            parmtag { "oprelative" "." }
        }
        parm {
            name    "width"
            label   "Width"
            type    integer
            default { "512" }
            help    "Image pixel width (should match SD settings)"
            range   { 1! 50 }
            parmtag { "autoscope" "0000000000000000" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "height"
            label   "Height"
            type    integer
            default { "512" }
            help    "Image pixel height (should match SD settings)"
            range   { 1! 50 }
            parmtag { "autoscope" "0000000000000000" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "projmode"
            label   "Projection"
            type    integer
            default { "ch(strcat(chs(\"camerapath\"),\"/projection\"))" }
            menu {
                "persp" "Perspective"
                "ortho" "Orthograpohic"
            }
            range   { 0 10 }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "nearclip"
            label   "Near Clip"
            type    float
            default { "0.1" }
            range   { 0! 100 }
            parmtag { "script_callback_language" "python" }
        }
        groupsimple {
            name    "folder1"
            label   "Depth"
            hidewhen "{ mode != depth }"

            parm {
                name    "minchoke"
                label   "Min Choke"
                type    float
                default { "0" }
                help    "Change the minimum depth clipping plane"
                range   { 0 1 }
                parmtag { "autoscope" "0000000000000000" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "maxchoke"
                label   "Max Choke"
                type    float
                default { "0" }
                help    "Change the maximum depth clipping plane"
                range   { 0 1 }
                parmtag { "autoscope" "0000000000000000" }
                parmtag { "script_callback_language" "python" }
            }
        }

        groupsimple {
            name    "albedo"
            label   "Color"
            hidewhen "{ mode != albedo }"

            parm {
                name    "albAttr"
                label   "Attribute Name"
                type    string
                default { "Cd" }
                parmtag { "script_callback_language" "python" }
            }
        }

    }

    parm {
        name    "renderme"
        label   "Render"
        type    button
        default { "0" }
        parmtag { "script_callback" "hou.node(\"./set_objects_to_import\").cook(force=True)" }
        parmtag { "script_callback_language" "python" }
    }
    parm {
        name    "vobjects"
        label   "Objects To Render"
        type    oplist
        default { "*" }
        menureplace {
            [ "opmenu -l -a ropnet1/opengl1 vobjects" ]
        }
        parmtag { "autoscope" "0000000000000000" }
        parmtag { "opfilter" "!!OBJ/GEOMETRY!!" }
        parmtag { "oprelative" "/" }
    }
    parm {
        name    "ignore_visibility"
        label   "Ignore Visibility Flags"
        type    toggle
        default { "0" }
        parmtag { "script_callback_language" "python" }
    }
}
