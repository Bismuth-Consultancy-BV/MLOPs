MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="node_type"
Content-Type: text/plain

Sop

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.init"
Content-Type: text/plain

type = mlops::extract_hybrik::1.0
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -3.31863 0.291176
connectornextid 0
flags =  lock off model off template off footprint off xray off bypass off display on render on highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
}
inputs
{
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.init"
Content-Type: text/plain

type = python
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0.923492 2.66544
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	null1 0 1 "input1"
}
inputs
{
0 	null1 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.parm"
Content-Type: text/plain

{
version 0.8
python	[ 0	locks=0 ]	(	"\"\"\"Image demo script.\"\"\"
import argparse
import os

import mlops_utils
ROOT = hou.text.expandString(\"$MLOPS/data/models/hybrik/\")
if not os.path.isdir(ROOT):
    os.makedirs(ROOT, exist_ok=True)
os.chdir(ROOT)

import pickle as pk

import cv2
import numpy as np
import torch
from easydict import EasyDict as edict
from torchvision import transforms as T
from torchvision.models.detection import fasterrcnn_resnet50_fpn
from tqdm import tqdm

from hybrik.models import builder
from hybrik.utils.config import update_config
from hybrik.utils.presets import SimpleTransform3DSMPLCam
from hybrik.utils.render_pytorch3d import render_mesh
from hybrik.utils.vis import get_max_iou_box, get_one_box, vis_2d

det_transform = T.Compose([T.ToTensor()])


def xyxy2xywh(bbox):
    x1, y1, x2, y2 = bbox

    cx = (x1 + x2) / 2
    cy = (y1 + y2) / 2
    w = x2 - x1
    h = y2 - y1
    return [cx, cy, w, h]


def get_video_info(in_file):
    stream = cv2.VideoCapture(in_file)
    assert stream.isOpened(), 'Cannot capture source'
    # self.path = input_source
    datalen = int(stream.get(cv2.CAP_PROP_FRAME_COUNT))
    fourcc = int(stream.get(cv2.CAP_PROP_FOURCC))
    fps = stream.get(cv2.CAP_PROP_FPS)
    frameSize = (int(stream.get(cv2.CAP_PROP_FRAME_WIDTH)),
                 int(stream.get(cv2.CAP_PROP_FRAME_HEIGHT)))
    # bitrate = int(stream.get(cv2.CAP_PROP_BITRATE))
    videoinfo = {'fourcc': fourcc, 'fps': fps, 'frameSize': frameSize}
    stream.release()

    return stream, videoinfo, datalen


def recognize_video_ext(ext=''):
    if ext == 'mp4':
        return cv2.VideoWriter_fourcc(*'mp4v'), '.' + ext
    elif ext == 'avi':
        return cv2.VideoWriter_fourcc(*'XVID'), '.' + ext
    elif ext == 'mov':
        return cv2.VideoWriter_fourcc(*'XVID'), '.' + ext
    else:
        # print(\"Unknow video format {}, will use .mp4 instead of it\".format(ext))
        return cv2.VideoWriter_fourcc(*'mp4v'), '.mp4'


parser = argparse.ArgumentParser(description='HybrIK Demo')

parser.add_argument('--gpu',
                    help='gpu',
                    default=0,
                    type=int)
# parser.add_argument('--img-path',
#                     help='image name',
#                     default='',
#                     type=str)
parser.add_argument('--video-name',
                    help='video name',
                    default='',
                    type=str)
parser.add_argument('--out-dir',
                    help='output folder',
                    default='',
                    type=str)
parser.add_argument('--cfg_file',
                    help='cfg file',
                    default='',
                    type=str)
parser.add_argument('--ckpt',
                    help='ckpt file',
                    default='',
                    type=str)
parser.add_argument('--save-pk', default=False, dest='save_pk',
                    help='save prediction', action='store_true')
parser.add_argument('--save-img', default=False, dest='save_img',
                    help='save prediction', action='store_true')


opt = parser.parse_args()
node = hou.pwd()
opts = mlops_utils.parse_args_from_node_parms(opt, node.parent())
opt.save_pk = True
opt.save_img = False

cfg = update_config(opt.cfg_file)
cfg[\"MODEL\"][\"ROOT\"] = hou.text.expandString(\"$MLOPS/data/dependencies/python/hybrik/\")



bbox_3d_shape = getattr(cfg.MODEL, 'BBOX_3D_SHAPE', (2000, 2000, 2000))
bbox_3d_shape = [item * 1e-3 for item in bbox_3d_shape]
dummpy_set = edict({
    'joint_pairs_17': None,
    'joint_pairs_24': None,
    'joint_pairs_29': None,
    'bbox_3d_shape': bbox_3d_shape
})

res_keys = [
    'pred_uvd',
    'pred_xyz_17',
    'pred_xyz_29',
    'pred_xyz_24_struct',
    'pred_scores',
    'pred_camera',
    # 'f',
    'pred_betas',
    'pred_thetas',
    'pred_phi',
    'pred_cam_root',
    # 'features',
    'transl',
    'transl_camsys',
    'bbox',
    'height',
    'width',
    'img_path'
]
res_db = {k: [] for k in res_keys}

transformation = SimpleTransform3DSMPLCam(
    dummpy_set, scale_factor=cfg.DATASET.SCALE_FACTOR,
    color_factor=cfg.DATASET.COLOR_FACTOR,
    occlusion=cfg.DATASET.OCCLUSION,
    input_size=cfg.MODEL.IMAGE_SIZE,
    output_size=cfg.MODEL.HEATMAP_SIZE,
    depth_dim=cfg.MODEL.EXTRA.DEPTH_DIM,
    bbox_3d_shape=bbox_3d_shape,
    rot=cfg.DATASET.ROT_FACTOR, sigma=cfg.MODEL.EXTRA.SIGMA,
    train=False, add_dpg=False,
    loss_type=cfg.LOSS['TYPE'])

det_model = fasterrcnn_resnet50_fpn(pretrained=True)

hybrik_model = builder.build_sppe(cfg.MODEL)

# print(f'Loading model from {opt.ckpt}...')
save_dict = torch.load(opt.ckpt, map_location='cpu')
if type(save_dict) == dict:
    model_dict = save_dict['model']
    hybrik_model.load_state_dict(model_dict)
else:
    hybrik_model.load_state_dict(save_dict)

det_model.cuda(opt.gpu)
hybrik_model.cuda(opt.gpu)
det_model.eval()
hybrik_model.eval()

# print('### Extract Image...')
video_basename = os.path.basename(opt.video_name).split('.')[0]

if not os.path.exists(opt.out_dir):
    os.makedirs(opt.out_dir)
if not os.path.exists(os.path.join(opt.out_dir, 'raw_images')):
    os.makedirs(os.path.join(opt.out_dir, 'raw_images'))
# if not os.path.exists(os.path.join(opt.out_dir, 'res_images')) and opt.save_img:
#     os.makedirs(os.path.join(opt.out_dir, 'res_images'))
# if not os.path.exists(os.path.join(opt.out_dir, 'res_2d_images')) and opt.save_img:
#     os.makedirs(os.path.join(opt.out_dir, 'res_2d_images'))

_, info, _ = get_video_info(opt.video_name)
video_basename = os.path.basename(opt.video_name).split('.')[0]

savepath = f'{opt.out_dir}/res_{video_basename}.mp4'
savepath2d = f'{opt.out_dir}/res_2d_{video_basename}.mp4'
info['savepath'] = savepath
info['savepath2d'] = savepath2d

# write_stream = cv2.VideoWriter(
#     *[info[k] for k in ['savepath', 'fourcc', 'fps', 'frameSize']])
# write2d_stream = cv2.VideoWriter(
#     *[info[k] for k in ['savepath2d', 'fourcc', 'fps', 'frameSize']])
# if not write_stream.isOpened():
#     # print(\"Try to use other video encoders...\")
#     ext = info['savepath'].split('.')[-1]
#     fourcc, _ext = recognize_video_ext(ext)
#     info['fourcc'] = fourcc
#     info['savepath'] = info['savepath'][:-4] + _ext
#     info['savepath2d'] = info['savepath2d'][:-4] + _ext
    # write_stream = cv2.VideoWriter(
    #     *[info[k] for k in ['savepath', 'fourcc', 'fps', 'frameSize']])
    # write2d_stream = cv2.VideoWriter(
    #     *[info[k] for k in ['savepath2d', 'fourcc', 'fps', 'frameSize']])

# assert write_stream.isOpened(), 'Cannot open video for writing'
# assert write2d_stream.isOpened(), 'Cannot open video for writing'

# os.system(f'ffmpeg -i {opt.video_name} {opt.out_dir}/raw_images/{video_basename}-%06d.png')
import cv2
vidcap = cv2.VideoCapture(opt.video_name)
success,image = vidcap.read()
count = 0
while success:
  cv2.imwrite(f\"{opt.out_dir}/raw_images/{video_basename}-{count:06d}.png\", image)     # save frame as JPEG file      
  success,image = vidcap.read()
  count += 1

files = os.listdir(f'{opt.out_dir}/raw_images')
files.sort()

img_path_list = []

for file in tqdm(files):
    if not os.path.isdir(file) and file[-4:] in ['.jpg', '.png']:

        img_path = os.path.join(opt.out_dir, 'raw_images', file)
        img_path_list.append(img_path)

prev_box = None
renderer = None
# smpl_faces = torch.from_numpy(hybrik_model.smpl.faces.astype(np.int32))

# print('### Run Model...')
idx = 0
for img_path in tqdm(img_path_list):
    dirname = os.path.dirname(img_path)
    basename = os.path.basename(img_path)

    with torch.no_grad():
        # Run Detection
        input_image = cv2.cvtColor(cv2.imread(img_path), cv2.COLOR_BGR2RGB)
        det_input = det_transform(input_image).to(opt.gpu)
        det_output = det_model([det_input])[0]

        if prev_box is None:
            tight_bbox = get_one_box(det_output)  # xyxy
            if tight_bbox is None:
                continue
        else:
            tight_bbox = get_max_iou_box(det_output, prev_box)  # xyxy

        prev_box = tight_bbox

        # Run HybrIK
        # bbox: [x1, y1, x2, y2]
        pose_input, bbox, img_center = transformation.test_transform(
            input_image, tight_bbox)
        pose_input = pose_input.to(opt.gpu)[None, :, :, :]
        pose_output = hybrik_model(
            pose_input, flip_test=True,
            bboxes=torch.from_numpy(np.array(bbox)).to(pose_input.device).unsqueeze(0).float(),
            img_center=torch.from_numpy(img_center).to(pose_input.device).unsqueeze(0).float()
        )
        # uv_29 = pose_output.pred_uvd_jts.reshape(29, 3)[:, :2]
        transl = pose_output.transl.detach()

        # # Visualization
        # image = input_image.copy()
        # focal = 1000.0
        bbox_xywh = xyxy2xywh(bbox)
        transl_camsys = transl.clone()
        transl_camsys = transl_camsys * 256 / bbox_xywh[2]

        # focal = focal / 256 * bbox_xywh[2]

        # vertices = pose_output.pred_vertices.detach()

        # verts_batch = vertices
        # transl_batch = transl

        # color_batch = render_mesh(
        #     vertices=verts_batch, faces=smpl_faces,
        #     translation=transl_batch,
        #     focal_length=focal, height=image.shape[0], width=image.shape[1])

        # valid_mask_batch = (color_batch[:, :, :, [-1]] > 0)
        # image_vis_batch = color_batch[:, :, :, :3] * valid_mask_batch
        # image_vis_batch = (image_vis_batch * 255).cpu().numpy()

        # color = image_vis_batch[0]
        # valid_mask = valid_mask_batch[0].cpu().numpy()
        # input_img = image
        # alpha = 0.9
        # image_vis = alpha * color[:, :, :3] * valid_mask + (
        #     1 - alpha) * input_img * valid_mask + (1 - valid_mask) * input_img

        # image_vis = image_vis.astype(np.uint8)
        # image_vis = cv2.cvtColor(image_vis, cv2.COLOR_RGB2BGR)

        # if opt.save_img:
        #     idx += 1
        #     res_path = os.path.join(opt.out_dir, 'res_images', f'image-{idx:06d}.jpg')
        #     cv2.imwrite(res_path, image_vis)
        # write_stream.write(image_vis)

        # vis 2d
        # pts = uv_29 * bbox_xywh[2]
        # pts[:, 0] = pts[:, 0] + bbox_xywh[0]
        # pts[:, 1] = pts[:, 1] + bbox_xywh[1]
        # image = input_image.copy()
        # bbox_img = vis_2d(image, tight_bbox, pts)
        # bbox_img = cv2.cvtColor(bbox_img, cv2.COLOR_RGB2BGR)
        # write2d_stream.write(bbox_img)

        if opt.save_img:
            res_path = os.path.join(
                opt.out_dir, 'res_2d_images', f'image-{idx:06d}.jpg')
            cv2.imwrite(res_path, bbox_img)

        if opt.save_pk:
            assert pose_input.shape[0] == 1, 'Only support single batch inference for now'

            pred_xyz_jts_17 = pose_output.pred_xyz_jts_17.reshape(
                17, 3).cpu().data.numpy()
            pred_uvd_jts = pose_output.pred_uvd_jts.reshape(
                -1, 3).cpu().data.numpy()
            pred_xyz_jts_29 = pose_output.pred_xyz_jts_29.reshape(
                -1, 3).cpu().data.numpy()
            pred_xyz_jts_24_struct = pose_output.pred_xyz_jts_24_struct.reshape(
                24, 3).cpu().data.numpy()
            pred_scores = pose_output.maxvals.cpu(
            ).data[:, :29].reshape(29).numpy()
            pred_camera = pose_output.pred_camera.squeeze(
                dim=0).cpu().data.numpy()
            pred_betas = pose_output.pred_shape.squeeze(
                dim=0).cpu().data.numpy()
            pred_theta = pose_output.pred_theta_mats.squeeze(
                dim=0).cpu().data.numpy()
            pred_phi = pose_output.pred_phi.squeeze(dim=0).cpu().data.numpy()
            pred_cam_root = pose_output.cam_root.squeeze(dim=0).cpu().numpy()
            img_size = np.array((input_image.shape[0], input_image.shape[1]))

            res_db['pred_xyz_17'].append(pred_xyz_jts_17)
            res_db['pred_uvd'].append(pred_uvd_jts)
            res_db['pred_xyz_29'].append(pred_xyz_jts_29)
            res_db['pred_xyz_24_struct'].append(pred_xyz_jts_24_struct)
            res_db['pred_scores'].append(pred_scores)
            res_db['pred_camera'].append(pred_camera)
            # res_db['f'].append(1000.0)
            res_db['pred_betas'].append(pred_betas)
            res_db['pred_thetas'].append(pred_theta)
            res_db['pred_phi'].append(pred_phi)
            res_db['pred_cam_root'].append(pred_cam_root)
            # res_db['features'].append(img_feat)
            res_db['transl'].append(transl[0].cpu().data.numpy())
            res_db['transl_camsys'].append(transl_camsys[0].cpu().data.numpy())
            res_db['bbox'].append(np.array(bbox))
            res_db['height'].append(img_size[0])
            res_db['width'].append(img_size[1])
            res_db['img_path'].append(img_path)


if opt.save_pk:
    n_frames = len(res_db['img_path'])
    for k in res_db.keys():
        # print(k)
        res_db[k] = np.stack(res_db[k])
        assert res_db[k].shape[0] == n_frames

    with open(os.path.join(opt.out_dir, 'res.pk'), 'wb') as fid:
        pk.dump(res_db, fid)

# write_stream.release()
# write2d_stream.release()"	)
maintainstate	[ 0	locks=0 ]	(	"off"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python3.init"
Content-Type: text/plain

type = python
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python3.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0.923492 0.406444
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	attribcreate1 0 1 "input1"
}
inputs
{
0 	attribcreate1 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python3.parm"
Content-Type: text/plain

{
version 0.8
python	[ 0	locks=0 ]	(	"node = hou.pwd()
geo = node.geometry()

# Add code to modify contents of geo.
# Use drop down menu to select examples.

import pickle, os

with open(os.path.join(node.parent().parm(\"out_dir\").evalAsString(), \"res.pk\"), 'rb') as f:
    x = pickle.load(f)
    
for f, frame_data in enumerate(x[\"pred_xyz_17\"]):
    for data in frame_data:
        pt = geo.createPoint()
        pt.setPosition(hou.Vector3(tuple(map(float, data))))
        pt.setAttribValue(\"frame\", f+1)"	)
maintainstate	[ 0	locks=0 ]	(	"off"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/python3.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribcreate1.init"
Content-Type: text/plain

type = attribcreate::2.0
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribcreate1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0.923492 1.53594
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
1 	python1 1 1 "input1"
}
inputs
{
0 	python1 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribcreate1.parm"
Content-Type: text/plain

{
version 0.8
group	[ 0	locks=0 ]	(	""	)
grouptype	[ 0	locks=0 ]	(	"guess"	)
encodenames	[ 0	locks=0 ]	(	"off"	)
numattr	[ 0	locks=0 ]	(	1	)
enable1	[ 0	locks=0 ]	(	"on"	)
name1	[ 0	locks=0 ]	(	frame	)
existing1	[ 0	locks=0 ]	(	"better"	)
createvarmap1	[ 0	locks=0 ]	(	"off"	)
varname1	[ 0	locks=0 ]	(	""	)
class1	[ 0	locks=0 ]	(	"point"	)
savetoinfo1	[ 0	locks=0 ]	(	"off"	)
type1	[ 0	locks=0 ]	(	"int"	)
typeinfo1	[ 0	locks=0 ]	(	"guess"	)
precision1	[ 0	locks=0 ]	(	"auto"	)
size1	[ 0	locks=0 ]	(	1	)
default1v	[ 0	locks=0 ]	(	0	0	0	0	)
writevalues1	[ 0	locks=0 ]	(	"on"	)
uselocal1	[ 0	locks=0 ]	(	"on"	)
value1v	[ 0	locks=0 ]	(	0	0	0	0	)
string1	[ 0	locks=0 ]	(	""	)
numattr_spacerparm1	[ 0	locks=0 ]	(	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/attribcreate1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/null1.init"
Content-Type: text/plain

type = null
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/null1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0.923492 3.79494
connectornextid 1
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
}
inputs
{
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.6 0.7 0.77 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/null1.parm"
Content-Type: text/plain

{
version 0.8
copyinput	[ 0	locks=0 ]	(	"off"	)
cacheinput	[ 0	locks=0 ]	(	"off"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/null1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/transform1.init"
Content-Type: text/plain

type = xform
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/transform1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0.923492 -0.723056
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	python3 1 1 "input1"
}
inputs
{
0 	python3 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/transform1.parm"
Content-Type: text/plain

{
version 0.8
group	[ 0	locks=0 ]	(	""	)
grouptype	[ 0	locks=0 ]	(	"guess"	)
xOrd	[ 0	locks=0 ]	(	"srt"	)
rOrd	[ 0	locks=0 ]	(	"xyz"	)
t	[ 0	locks=0 ]	(	0	0	0	)
r	[ 0	locks=0 ]	(	0	-180	-179.99999999999997	)
s	[ 0	locks=0 ]	(	1	1	1	)
shear	[ 0	locks=0 ]	(	0	0	0	)
scale	[ 0	locks=0 ]	(	1	)
parmgroup_pivotxform	[ 0	locks=0 ]	(	0	)
p	[ 0	locks=0 ]	(	0	0	0	)
pr	[ 0	locks=0 ]	(	0	0	0	)
parmgroup_prexform	[ 0	locks=0 ]	(	0	)
prexform_xOrd	[ 0	locks=0 ]	(	"srt"	)
prexform_rOrd	[ 0	locks=0 ]	(	"xyz"	)
prexform_t	[ 0	locks=0 ]	(	0	0	0	)
prexform_r	[ 0	locks=0 ]	(	0	0	0	)
prexform_s	[ 0	locks=0 ]	(	1	1	1	)
prexform_shear	[ 0	locks=0 ]	(	0	0	0	)
movecentroid	[ 0	locks=0 ]	(	0	)
movepivot	[ 0	locks=0 ]	(	0	)
attribs	[ 0	locks=0 ]	(	*	)
updatenmls	[ 0	locks=0 ]	(	"off"	)
updateaffectednmls	[ 0	locks=0 ]	(	"on"	)
vlength	[ 0	locks=0 ]	(	"on"	)
invertxform	[ 0	locks=0 ]	(	"off"	)
addattrib	[ 0	locks=0 ]	(	"off"	)
outputattrib	[ 0	locks=0 ]	(	xform	)
outputmerge	[ 0	locks=0 ]	(	"post"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/transform1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/blast1.init"
Content-Type: text/plain

type = blast
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/blast1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0.923492 -1.85256
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	transform1 1 1 "input1"
}
inputs
{
0 	transform1 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/blast1.parm"
Content-Type: text/plain

{
version 0.8
group	[ 0	locks=0 ]	(	@frame=$F	)
grouptype	[ 0	locks=0 ]	(	"points"	)
computenorms	[ 0	locks=0 ]	(	"off"	)
negate	[ 0	locks=0 ]	(	"on"	)
fillhole	[ 0	locks=0 ]	(	"off"	)
removegrp	[ 0	locks=0 ]	(	"off"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/blast1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/add1.init"
Content-Type: text/plain

type = add
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/add1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0.923492 -2.98206
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	blast1 1 1 "input1"
}
inputs
{
0 	blast1 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/add1.parm"
Content-Type: text/plain

{
version 0.8
stdswitcher	[ 0	locks=0 ]	(	1	1	1	)
keep	[ 0	locks=0 ]	(	"off"	)
points	[ 0	locks=0 ]	(	0	)
remove	[ 0	locks=0 ]	(	"off"	)
switcher	[ 0	locks=0 ]	(	0	0	)
prims	[ 0	locks=0 ]	(	5	)
group	[ 0	locks=0 ]	(	""	)
add	[ 0	locks=0 ]	(	"all"	)
inc	[ 0	locks=0 ]	(	2	)
attrname	[ 0	locks=0 ]	(	""	)
closedall	[ 0	locks=0 ]	(	"off"	)
addparticlesystem	[ 0	locks=0 ]	(	"off"	)
particlegroup	[ 0	locks=0 ]	(	""	)
appendunusedtoparticlesystem	[ 0	locks=0 ]	(	"off"	)
prim0	[ 0	locks=0 ]	(	"0 4 5 6"	)
closed0	[ 0	locks=0 ]	(	"off"	)
prim1	[ 0	locks=0 ]	(	"0  1 2 3"	)
closed1	[ 0	locks=0 ]	(	"off"	)
prim2	[ 0	locks=0	autoscope=0	autosel=4294967295 ]	(	"8 11 12 13"	)
closed2	[ 0	locks=0	autoscope=0	autosel=4294967295 ]	(	"off"	)
prim3	[ 0	locks=0 ]	(	"8 14 15 16"	)
closed3	[ 0	locks=0 ]	(	"off"	)
prim4	[ 0	locks=0 ]	(	"0 7 8 9 10"	)
closed4	[ 0	locks=0 ]	(	"off"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/add1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.init"
Content-Type: text/plain

type = output
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0.923492 -4.11156
connectornextid 1
flags =  lock off model off template on footprint off xray off bypass off display on render on highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
0 	add1 1 1 "input1"
}
inputs
{
0 	add1 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.parm"
Content-Type: text/plain

{
version 0.8
outputidx	[ 0	locks=0 ]	(	0	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.order"
Content-Type: text/plain

8
python1
python3
attribcreate1
null1
transform1
blast1
add1
output0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.net"
Content-Type: text/plain

1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY--
